{
  "api/cad/TopSolid.Cad.Design.Automating.BendFeature.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.BendFeature.html",
    "title": "Class BendFeature | TopSolid Automation website",
    "keywords": "Class BendFeature Represents a bend feature. Inheritance System.Object BendFeature Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] public class BendFeature Constructors BendFeature() Initializes a new instance of the BendFeature class. Declaration public BendFeature() BendFeature(Real, Real, Real) Initializes a new instance of the BendFeature class. Declaration public BendFeature(Real inRadius, Real inAngle, Real inLength) Parameters Type Name Description Real inRadius Real inAngle Real inLength Properties Angle Gets the bend angle. Declaration public Real Angle { get; } Property Value Type Description Real Length Gets the bend length. Declaration public Real Length { get; } Property Value Type Description Real Radius Gets the bend radius. Declaration public Real Radius { get; } Property Value Type Description Real"
  },
  "api/cad/TopSolid.Cad.Design.Automating.BomPropertyDefinitions.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.BomPropertyDefinitions.html",
    "title": "Class BomPropertyDefinitions | TopSolid Automation website",
    "keywords": "Class BomPropertyDefinitions Contains the special BOM property definitions. Inheritance System.Object BomPropertyDefinitions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax public static class BomPropertyDefinitions Fields Image BOM image property definition ( Unclassified ). Declaration public static readonly PropertyDefinition Image Field Value Type Description PropertyDefinition Index BOM index property definition ( Text ). Declaration public static readonly PropertyDefinition Index Field Value Type Description PropertyDefinition Quantity BOM quantity property definition ( Integer ). Declaration public static readonly PropertyDefinition Quantity Field Value Type Description PropertyDefinition"
  },
  "api/cad/TopSolid.Cad.Design.Automating.BomRoot.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.BomRoot.html",
    "title": "Class BomRoot | TopSolid Automation website",
    "keywords": "Class BomRoot Represents a BOM root. Inheritance System.Object BomRoot Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [Obsolete(\"Since v7.12, access to BOM is done using IBoms interface.\")] [DataContract] public class BomRoot Constructors BomRoot(List<String>, List<BomRow>) Initializes a new instance of the BomRoot structure. Declaration public BomRoot(List<string> inColumns, List<BomRow> inRows) Parameters Type Name Description System.Collections.Generic.List < System.String > inColumns System.Collections.Generic.List < BomRow > inRows Properties Columns Gets the BOM columns. Declaration public List<string> Columns { get; } Property Value Type Description System.Collections.Generic.List < System.String > Rows Gets the top BOM rows. Declaration public List<BomRow> Rows { get; } Property Value Type Description System.Collections.Generic.List < BomRow >"
  },
  "api/cad/TopSolid.Cad.Design.Automating.BomRow.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.BomRow.html",
    "title": "Class BomRow | TopSolid Automation website",
    "keywords": "Class BomRow Represents a BOM row. Inheritance System.Object BomRow Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [Obsolete(\"Since v7.12, access to BOM is done using IBoms interface.\")] [DataContract(IsReference = true)] public class BomRow Constructors BomRow() Initializes a new instance of the BomRow class. Declaration public BomRow() BomRow(List<String>, List<BomRow>, BomRow) Initializes a new instance of the BomRow class. Declaration public BomRow(List<string> inCells, List<BomRow> inRows, BomRow inParentRow) Parameters Type Name Description System.Collections.Generic.List < System.String > inCells System.Collections.Generic.List < BomRow > inRows BomRow inParentRow Properties Cells Gets the all cells of a row. Declaration public List<string> Cells { get; } Property Value Type Description System.Collections.Generic.List < System.String > ParentRow Gets the parent row. Declaration public BomRow ParentRow { get; } Property Value Type Description BomRow Rows Gets the child rows. Declaration public List<BomRow> Rows { get; } Property Value Type Description System.Collections.Generic.List < BomRow >"
  },
  "api/cad/TopSolid.Cad.Design.Automating.CoatingCategoryType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.CoatingCategoryType.html",
    "title": "Enum CoatingCategoryType | TopSolid Automation website",
    "keywords": "Enum CoatingCategoryType Defines the various types of coating categories. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 16, 0, 0)] public enum CoatingCategoryType Remarks This enum is available since v7.16. Fields Name Description Conversion Conversion. Finish Finish. None No coating category defined. Paint Paint. Plating Plating. Unclassified Unclassified coating category."
  },
  "api/cad/TopSolid.Cad.Design.Automating.DrillingCounterSinkingMode.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.DrillingCounterSinkingMode.html",
    "title": "Enum DrillingCounterSinkingMode | TopSolid Automation website",
    "keywords": "Enum DrillingCounterSinkingMode Defines the various mode of counter sinking primitive. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 14, 0, 0)] public enum DrillingCounterSinkingMode Remarks This enum is available since v7.14. Fields Name Description AngleDepth Defined with an angle and a depth. DiameterAngle Defined with a diameter and an angle. DiameterAngleDepth Defined with a diameter, an angle and a depth. DiameterDepth Defined with a diameter and a depth. None The counter sinking primitive is not defined Unclassified Unclassified type."
  },
  "api/cad/TopSolid.Cad.Design.Automating.DrillingCounterSinkingPrimitive.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.DrillingCounterSinkingPrimitive.html",
    "title": "Class DrillingCounterSinkingPrimitive | TopSolid Automation website",
    "keywords": "Class DrillingCounterSinkingPrimitive Represents a Spot Facing Drilling Primitive. Inheritance System.Object DrillingPrimitive DrillingCounterSinkingPrimitive Inherited Members DrillingPrimitive.PrimitiveDepthType DrillingPrimitive.MachiningProcessDocument DrillingPrimitive.MachiningProcessValue System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 14, 0, 0)] public class DrillingCounterSinkingPrimitive : DrillingPrimitive Remarks This class is available since v7.14. Warning: This class has been modified for 7.15, please recompile your solution to use it. Constructors DrillingCounterSinkingPrimitive() Initializes a new instance of the DrillingSpotFacingPrimitive class. Declaration public DrillingCounterSinkingPrimitive() Fields Angle Primitive Angle. Declaration [DataMember] public SmartReal Angle Field Value Type Description SmartReal Depth Primitive Depth. Declaration [DataMember] public SmartReal Depth Field Value Type Description SmartReal Diameter Primitive Diameter. Declaration [DataMember] public SmartReal Diameter Field Value Type Description SmartReal IsOpposed Tells wether the counter sinking is opposed. Declaration [DataMember] public bool IsOpposed Field Value Type Description System.Boolean Mode Tells wether the counter sinking is opposed. Declaration [DataMember] public DrillingCounterSinkingMode Mode Field Value Type Description DrillingCounterSinkingMode Properties PrimitiveType Primitive Type. Declaration public override DrillingPrimitiveType PrimitiveType { get; } Property Value Type Description DrillingPrimitiveType Overrides DrillingPrimitive.PrimitiveType Methods SetAngleDepthMode(SmartReal, SmartReal) Set the AngleDepth mode. Declaration public void SetAngleDepthMode(SmartReal inAngle, SmartReal inDepth) Parameters Type Name Description SmartReal inAngle SmartReal inDepth SetDiameterAngleDepthMode(SmartReal, SmartReal, SmartReal) Set the DiameterAngleDepth mode. Declaration public void SetDiameterAngleDepthMode(SmartReal inDiameter, SmartReal inAngle, SmartReal inDepth) Parameters Type Name Description SmartReal inDiameter SmartReal inAngle SmartReal inDepth SetDiameterAngleMode(SmartReal, SmartReal) Set the DiameterAngle mode. Declaration public void SetDiameterAngleMode(SmartReal inDiameter, SmartReal inAngle) Parameters Type Name Description SmartReal inDiameter SmartReal inAngle SetDiameterDepthMode(SmartReal, SmartReal) Set the DiameterinDepth mode. Declaration public void SetDiameterDepthMode(SmartReal inDiameter, SmartReal inDepth) Parameters Type Name Description SmartReal inDiameter SmartReal inDepth"
  },
  "api/cad/TopSolid.Cad.Design.Automating.DrillingHolePrimitive.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.DrillingHolePrimitive.html",
    "title": "Class DrillingHolePrimitive | TopSolid Automation website",
    "keywords": "Class DrillingHolePrimitive Represents a Hole Drilling Primitive. Inheritance System.Object DrillingPrimitive DrillingHolePrimitive Inherited Members DrillingPrimitive.PrimitiveDepthType DrillingPrimitive.MachiningProcessDocument DrillingPrimitive.MachiningProcessValue System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 14, 0, 0)] public class DrillingHolePrimitive : DrillingPrimitive Remarks This class is available since v7.14. Warning: This class has been modified for 7.15, please recompile your solution to use it. Constructors DrillingHolePrimitive(SmartReal) Initializes a new instance of a through DrillingHolePrimitive class. Declaration public DrillingHolePrimitive(SmartReal inDiameter) Parameters Type Name Description SmartReal inDiameter DrillingHolePrimitive(SmartReal, SmartReal, DrillingHolePrimitiveBottomType) Initializes a new instance of a blind DrillingHolePrimitive class. Declaration public DrillingHolePrimitive(SmartReal inDiameter, SmartReal inDepth, DrillingHolePrimitiveBottomType inBottomType) Parameters Type Name Description SmartReal inDiameter SmartReal inDepth DrillingHolePrimitiveBottomType inBottomType Fields BottomAngle Primitive Bottom Angle. Declaration [DataMember] public SmartReal BottomAngle Field Value Type Description SmartReal BottomType Primitive Bottom Type. Declaration [DataMember] public DrillingHolePrimitiveBottomType BottomType Field Value Type Description DrillingHolePrimitiveBottomType Depth Primitive Depth. Declaration [DataMember] public SmartReal Depth Field Value Type Description SmartReal Diameter Primitive Diameter. Declaration [DataMember] public SmartReal Diameter Field Value Type Description SmartReal IsTapered Primitive Bottom Angle. Declaration [DataMember] public SmartBoolean IsTapered Field Value Type Description SmartBoolean TaperAngle Primitive Taper Angle. Declaration [DataMember] public SmartReal TaperAngle Field Value Type Description SmartReal Properties PrimitiveType Primitive Type. Declaration public override DrillingPrimitiveType PrimitiveType { get; } Property Value Type Description DrillingPrimitiveType Overrides DrillingPrimitive.PrimitiveType"
  },
  "api/cad/TopSolid.Cad.Design.Automating.DrillingHolePrimitiveBottomType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.DrillingHolePrimitiveBottomType.html",
    "title": "Enum DrillingHolePrimitiveBottomType | TopSolid Automation website",
    "keywords": "Enum DrillingHolePrimitiveBottomType Defines the various types of bottom hole of primitive of drilling features entities. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 14, 0, 0)] public enum DrillingHolePrimitiveBottomType Remarks This enum is available since v7.14. Fields Name Description Cone Cone. Flat Flat. None Not a primitive bottom hole. Sphere Sphere. Unclassified Unclassified type."
  },
  "api/cad/TopSolid.Cad.Design.Automating.DrillingPrimitive.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.DrillingPrimitive.html",
    "title": "Class DrillingPrimitive | TopSolid Automation website",
    "keywords": "Class DrillingPrimitive Represents a Drilling primitive. Inheritance System.Object DrillingPrimitive DrillingCounterSinkingPrimitive DrillingHolePrimitive DrillingSpotFacingPrimitive DrillingTappedHolePrimitive Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [KnownType(typeof(DrillingHolePrimitive))] [KnownType(typeof(DrillingSpotFacingPrimitive))] [KnownType(typeof(DrillingCounterSinkingPrimitive))] [KnownType(typeof(DrillingTappedHolePrimitive))] [AvailableSinceVersion(7, 14, 0, 0)] public abstract class DrillingPrimitive Remarks This class is available since v7.14. Constructors DrillingPrimitive() Initializes a new instance of the DrillingPrimitive class. Declaration public DrillingPrimitive() Properties MachiningProcessDocument Machining process document Declaration public PdmObjectId MachiningProcessDocument { get; set; } Property Value Type Description PdmObjectId MachiningProcessValue Machining process document Declaration public int MachiningProcessValue { get; set; } Property Value Type Description System.Int32 PrimitiveDepthType Primitive Depth Type. Declaration public DrillingPrimitiveDepthType PrimitiveDepthType { get; set; } Property Value Type Description DrillingPrimitiveDepthType PrimitiveType Primitive Type. Declaration public abstract DrillingPrimitiveType PrimitiveType { get; } Property Value Type Description DrillingPrimitiveType"
  },
  "api/cad/TopSolid.Cad.Design.Automating.DrillingPrimitiveDepthType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.DrillingPrimitiveDepthType.html",
    "title": "Enum DrillingPrimitiveDepthType | TopSolid Automation website",
    "keywords": "Enum DrillingPrimitiveDepthType Defines the various types of depth of primitive of drilling features entities. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 14, 0, 0)] public enum DrillingPrimitiveDepthType Remarks This enum is available since v7.14. Fields Name Description Blind Blind. None Not a primitive depth. Through Through. ThroughAll Through All. Unclassified Unclassified type. UpToPlane Up To Plane. UpToPoint Up To Point. UpToSurface Up To Surface."
  },
  "api/cad/TopSolid.Cad.Design.Automating.DrillingPrimitiveType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.DrillingPrimitiveType.html",
    "title": "Enum DrillingPrimitiveType | TopSolid Automation website",
    "keywords": "Enum DrillingPrimitiveType Defines the various types of primitive of drilling features entities. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 14, 0, 0)] public enum DrillingPrimitiveType Remarks This enum is available since v7.14. Fields Name Description CounterSinking Counter Sinking. Hole Hole. None Not a primitive. SpotFacing Spot Facing. TappedHole Tapped Hole. Unclassified Unclassified type."
  },
  "api/cad/TopSolid.Cad.Design.Automating.DrillingSpotFacingPrimitive.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.DrillingSpotFacingPrimitive.html",
    "title": "Class DrillingSpotFacingPrimitive | TopSolid Automation website",
    "keywords": "Class DrillingSpotFacingPrimitive Represents a Spot Facing Drilling Primitive. Inheritance System.Object DrillingPrimitive DrillingSpotFacingPrimitive Inherited Members DrillingPrimitive.PrimitiveDepthType DrillingPrimitive.MachiningProcessDocument DrillingPrimitive.MachiningProcessValue System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 14, 0, 0)] public class DrillingSpotFacingPrimitive : DrillingPrimitive Remarks This class is available since v7.14. Warning: This class has been modified for 7.15, please recompile your solution to use it. Constructors DrillingSpotFacingPrimitive(SmartReal, SmartReal, Boolean) Initializes a new instance of the DrillingSpotFacingPrimitive class. Declaration public DrillingSpotFacingPrimitive(SmartReal inDiameter, SmartReal inDepth, bool inIsOpposed) Parameters Type Name Description SmartReal inDiameter SmartReal inDepth System.Boolean inIsOpposed Fields Depth Primitive Depth. Declaration [DataMember] public SmartReal Depth Field Value Type Description SmartReal Diameter Primitive Diameter. Declaration [DataMember] public SmartReal Diameter Field Value Type Description SmartReal IsOpposed Tells wether the spot facing is opposed. Declaration [DataMember] public bool IsOpposed Field Value Type Description System.Boolean Properties PrimitiveType Primitive Type. Declaration public override DrillingPrimitiveType PrimitiveType { get; } Property Value Type Description DrillingPrimitiveType Overrides DrillingPrimitive.PrimitiveType"
  },
  "api/cad/TopSolid.Cad.Design.Automating.DrillingTappedHolePrimitive.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.DrillingTappedHolePrimitive.html",
    "title": "Class DrillingTappedHolePrimitive | TopSolid Automation website",
    "keywords": "Class DrillingTappedHolePrimitive Represents a Hole Drilling Primitive. Inheritance System.Object DrillingPrimitive DrillingTappedHolePrimitive Inherited Members DrillingPrimitive.PrimitiveDepthType DrillingPrimitive.MachiningProcessDocument DrillingPrimitive.MachiningProcessValue System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 14, 0, 0)] public class DrillingTappedHolePrimitive : DrillingPrimitive Remarks This class is available since v7.14. Warning: This class has been modified for 7.15, please recompile your solution to use it. Constructors DrillingTappedHolePrimitive(SmartReal, SmartReal, DrillingHolePrimitiveBottomType, SmartReal, SmartReal, String) Initializes a new instance of a blind DrillingTappedHolePrimitive class. Declaration public DrillingTappedHolePrimitive(SmartReal inDiameter, SmartReal inDepth, DrillingHolePrimitiveBottomType inBottomType, SmartReal inTappingDiameter, SmartReal inTappingPitch, string inDescription) Parameters Type Name Description SmartReal inDiameter SmartReal inDepth DrillingHolePrimitiveBottomType inBottomType SmartReal inTappingDiameter SmartReal inTappingPitch System.String inDescription Fields Description Primitive Tapping Diameter. Declaration [DataMember] public string Description Field Value Type Description System.String HoleBottomAngle Primitive Hole Bottom Angle. Declaration [DataMember] public SmartReal HoleBottomAngle Field Value Type Description SmartReal HoleBottomType Primitive Hole Bottom Type. Declaration [DataMember] public DrillingHolePrimitiveBottomType HoleBottomType Field Value Type Description DrillingHolePrimitiveBottomType HoleDepth Primitive Hole Depth. Declaration [DataMember] public SmartReal HoleDepth Field Value Type Description SmartReal HoleDiameter Primitive Hole Diameter. Declaration [DataMember] public SmartReal HoleDiameter Field Value Type Description SmartReal HoleTaperAngle Primitive Taper Angle. Declaration [DataMember] public SmartReal HoleTaperAngle Field Value Type Description SmartReal IsCompleteTapping Tells wether the tapping is complete. Declaration [DataMember] public SmartBoolean IsCompleteTapping Field Value Type Description SmartBoolean IsHoleTotalDepth Tells or sets whether is total depth, i.e from the drill origin to the hole extremity. Declaration [DataMember] public bool IsHoleTotalDepth Field Value Type Description System.Boolean IsLeftHand Tells wether the tapped hole is left hand. Declaration [DataMember] public SmartBoolean IsLeftHand Field Value Type Description SmartBoolean IsStandard Tells wether the tapped hole comes from a document. Declaration [DataMember] public bool IsStandard Field Value Type Description System.Boolean IsTaperedHole Tells wether the tapped hole is tapered. Declaration [DataMember] public SmartBoolean IsTaperedHole Field Value Type Description SmartBoolean IsTaperedThread Tells or sets whether the tapped hole is tapered thread. Declaration [DataMember] public SmartBoolean IsTaperedThread Field Value Type Description SmartBoolean TappingDepth Primitive Tapping Depth. Declaration [DataMember] public SmartReal TappingDepth Field Value Type Description SmartReal TappingDiameter Primitive Tapping Diameter. Declaration [DataMember] public SmartReal TappingDiameter Field Value Type Description SmartReal TappingPitch Primitive Tapping Pitch. Declaration [DataMember] public SmartReal TappingPitch Field Value Type Description SmartReal ThreadStartNumber Primitive Thread Start Number. Declaration [DataMember] public SmartInteger ThreadStartNumber Field Value Type Description SmartInteger Properties PrimitiveType Primitive Type. Declaration public override DrillingPrimitiveType PrimitiveType { get; } Property Value Type Description DrillingPrimitiveType Overrides DrillingPrimitive.PrimitiveType"
  },
  "api/cad/TopSolid.Cad.Design.Automating.DrillingTappedHolePrimitiveThreadType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.DrillingTappedHolePrimitiveThreadType.html",
    "title": "Enum DrillingTappedHolePrimitiveThreadType | TopSolid Automation website",
    "keywords": "Enum DrillingTappedHolePrimitiveThreadType Defines the various types of thread of primitive of drilling features entities. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 14, 0, 0)] public enum DrillingTappedHolePrimitiveThreadType Remarks This enum is available since v7.14. Fields Name Description InchISO Inch ISO. MetricISO Metric ISO. MetricMiniatureISO Metric Miniature ISO. MetricTrapezoidalISO Metric Trapezoidal ISO None Not a primitive thread. Pipe Pipe Unclassified Unclassified type."
  },
  "api/cad/TopSolid.Cad.Design.Automating.EnclosingBoxManagementType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.EnclosingBoxManagementType.html",
    "title": "Enum EnclosingBoxManagementType | TopSolid Automation website",
    "keywords": "Enum EnclosingBoxManagementType Defines the various types of enclosing box management. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 10, 0, 0)] public enum EnclosingBoxManagementType Remarks This enum is available since v7.10. Fields Name Description Aligned Automatic enclosing box aligned with absolute frame directions. Manual Specified enclosing box parameters. Minimal Automatic enclosing box of minimal size. None No enclosing box management."
  },
  "api/cad/TopSolid.Cad.Design.Automating.EnclosingCylinderManagementType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.EnclosingCylinderManagementType.html",
    "title": "Enum EnclosingCylinderManagementType | TopSolid Automation website",
    "keywords": "Enum EnclosingCylinderManagementType Defines the various types of enclosing cylinder management. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 10, 0, 0)] public enum EnclosingCylinderManagementType Remarks This enum is available since v7.10. Fields Name Description Axial Automatic enclosing cylinder with specified axis. Manual Specified enclosing cylinder parameters. None No enclosing cylinder management."
  },
  "api/cad/TopSolid.Cad.Design.Automating.EntityCopyNameMode.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.EntityCopyNameMode.html",
    "title": "Enum EntityCopyNameMode | TopSolid Automation website",
    "keywords": "Enum EntityCopyNameMode Defines the various types of entity copy name mode. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 16, 0, 0)] public enum EntityCopyNameMode Remarks This enum is available since v7.16. Fields Name Description PrefixedByCustomPrefix Name prefixed by custom prefix. PrefixedByOccurrenceName Name prefixed by occurrence name. SameName Same name."
  },
  "api/cad/TopSolid.Cad.Design.Automating.FeatureType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.FeatureType.html",
    "title": "Enum FeatureType | TopSolid Automation website",
    "keywords": "Enum FeatureType Defines the various types of features entities. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 14, 0, 0)] public enum FeatureType Remarks This enum is available since v7.14. Fields Name Description Countouring Countouring. Drilling Drilling. None Not a feature. Pocket Pocket. Unclassified Unclassified type."
  },
  "api/cad/TopSolid.Cad.Design.Automating.ForceDrivingInterpolationType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.ForceDrivingInterpolationType.html",
    "title": "Enum ForceDrivingInterpolationType | TopSolid Automation website",
    "keywords": "Enum ForceDrivingInterpolationType Defines the various types of interpolation for force driving. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 6, 0, 0)] public enum ForceDrivingInterpolationType Remarks This enum is available since v7.6. Fields Name Description Constant Constant. Linear Linear. None No interpolation."
  },
  "api/cad/TopSolid.Cad.Design.Automating.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.html",
    "title": "Namespace TopSolid.Cad.Design.Automating | TopSolid Automation website",
    "keywords": "Namespace TopSolid.Cad.Design.Automating Classes BendFeature Represents a bend feature. BomPropertyDefinitions Contains the special BOM property definitions. BomRoot Represents a BOM root. BomRow Represents a BOM row. DrillingCounterSinkingPrimitive Represents a Spot Facing Drilling Primitive. DrillingHolePrimitive Represents a Hole Drilling Primitive. DrillingPrimitive Represents a Drilling primitive. DrillingSpotFacingPrimitive Represents a Spot Facing Drilling Primitive. DrillingTappedHolePrimitive Represents a Hole Drilling Primitive. SmartCoating Represents a smart coating. SmartDesignObject Represents a general design smart object. SmartDocument Represents a smart design document value. SmartFinishing Represents a smart finishing. SmartMaterial Represents a smart material. TopSolidDesignHost Represents TopSolid'Design host providing WCF services for automating. TopSolidDesignHostInstance Represents a TopSolid'Design host instance providing WCF services for automating. Interfaces IAssemblies Gives access to assemblies. IBoms Gives access to bill of materials (BOMs). ICoatings Gives access to methods to read or write in a coating document. IFeatures Gives access to feature entities. IMaterials Gives access to methods to read or write in a material document. IMechanisms Gives access to mechanisms. IParts Gives access to parts. IRepresentations Gives access to representations. ISimulations Gives access to simulations. ITools Gives access to various tools. IUnfoldings Gives access to unfoldings. Enums CoatingCategoryType Defines the various types of coating categories. DrillingCounterSinkingMode Defines the various mode of counter sinking primitive. DrillingHolePrimitiveBottomType Defines the various types of bottom hole of primitive of drilling features entities. DrillingPrimitiveDepthType Defines the various types of depth of primitive of drilling features entities. DrillingPrimitiveType Defines the various types of primitive of drilling features entities. DrillingTappedHolePrimitiveThreadType Defines the various types of thread of primitive of drilling features entities. EnclosingBoxManagementType Defines the various types of enclosing box management. EnclosingCylinderManagementType Defines the various types of enclosing cylinder management. EntityCopyNameMode Defines the various types of entity copy name mode. FeatureType Defines the various types of features entities. ForceDrivingInterpolationType Defines the various types of interpolation for force driving. JointDrivingInterpolationType Defines the various types of interpolation for joint driving. JointDrivingType Defines the various types of joint drivings. JointType Defines the various types of joints entities. MaterialCategoryType Defines the various types of material categories. MaterialModelType Defines the various types of material. RigidGroupDrivingType Defines the various types of rigid group driving. StockManagementType Defines the various types of stock managements. SymmetryType Defines the various types of symmetries entities. TaskType Defines the various types of tasks entities."
  },
  "api/cad/TopSolid.Cad.Design.Automating.IAssemblies.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.IAssemblies.html",
    "title": "Interface IAssemblies | TopSolid Automation website",
    "keywords": "Interface IAssemblies Gives access to assemblies. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 6, 0, 0)] public interface IAssemblies Remarks This interface is available since v7.6. Methods AskOccurrence(UserQuestion, Boolean, Boolean, Boolean, Boolean, Boolean, ElementId, out ElementId) Asks the user for a part or an assembly occurrence. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] UserAnswerType AskOccurrence(UserQuestion inQuestion, bool inAcceptsPositioned, bool inAcceptsInPlace, bool inAcceptsPart, bool inAcceptsAssembly, bool inAcceptsMechanism, ElementId inSuggestion, out ElementId outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. System.Boolean inAcceptsPositioned Accepts positioned occurrence. System.Boolean inAcceptsInPlace Accepts in-place occurrence. System.Boolean inAcceptsPart Accepts part occurrence. System.Boolean inAcceptsAssembly Accepts assembly occurrence. System.Boolean inAcceptsMechanism Accepts mechanism occurrence. ElementId inSuggestion Suggested answer, or Empty if none. ElementId outAnswer User answer, or Empty if none. Returns Type Description UserAnswerType Type of user answer. Remarks Only occurrences that are directly in the parts folder of the document may be obtained by this method, not \"deep\" occurrences that are inside them. This method is available since v7.10. CreateDisassembly(ElementId, Boolean) Creates the disassembly operation of an assembly entity. Declaration [OperationContract] [AvailableSinceVersion(7, 17, 300, 80)] ElementId CreateDisassembly(ElementId inAssemblyId, bool inInheritsAuxiliaryElements) Parameters Type Name Description ElementId inAssemblyId Identifier of the assembly entity to modify. System.Boolean inInheritsAuxiliaryElements Tells wehter auxiliary elements must be inherited. Returns Type Description ElementId The created disassembly operation. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17. CreateFixedConstraint(ElementId) Creates a fixed constraint of a positioning. Declaration [OperationContract] [AvailableSinceVersion(7, 15, 400, 120)] ElementId CreateFixedConstraint(ElementId inOccurrenceId) Parameters Type Name Description ElementId inOccurrenceId Identifier of the occurrence of the part or assembly to fix. Returns Type Description ElementId Identifier of the created constraint. Remarks This method is available since v7.15.400.120. CreateFrameOnFrameConstraint(ElementId, SmartFrame3D, SmartFrame3D, SmartReal, Boolean, SmartReal, Boolean, SmartReal, Boolean, SmartReal, Boolean, Boolean) Creates a \"frame on frame\" positioning constraint. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] ElementId CreateFrameOnFrameConstraint(ElementId inPositioningId, SmartFrame3D inSourceFrame, SmartFrame3D inDestinationFrame, SmartReal inOffsetDistance, bool inIsOffsetReversed, SmartReal inXRotationAngle, bool inIsXRotationReversed, SmartReal inYRotationAngle, bool inIsYRotationReversed, SmartReal inZRotationAngle, bool inIsZRotationReversed, bool inRotatesZYX) Parameters Type Name Description ElementId inPositioningId Identifier of the positioning operation that will contain the constraint. SmartFrame3D inSourceFrame Frame on source occurrence. SmartFrame3D inDestinationFrame Destination frame. SmartReal inOffsetDistance Offset distance of the source frame along the destination frame Z direction. System.Boolean inIsOffsetReversed Whether the offset is reversed. SmartReal inXRotationAngle Rotation angle of the source frame around its X axis. System.Boolean inIsXRotationReversed Whether the rotation around X is reversed. SmartReal inYRotationAngle Rotation angle of the source frame around its Y axis. System.Boolean inIsYRotationReversed Whether the rotation around Y is reversed. SmartReal inZRotationAngle Rotation angle of the source frame around its Z axis. System.Boolean inIsZRotationReversed Whether the rotation around Z is reversed. System.Boolean inRotatesZYX Rotates around Z then Y then X instead of X then Y then Z. Returns Type Description ElementId Identifier of the created constraint. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. CreateFrameOnFrameConstraintWithXYOffsets(ElementId, SmartFrame3D, SmartFrame3D, SmartReal, Boolean, SmartReal, Boolean, SmartReal, Boolean, SmartReal, Boolean, SmartReal, Boolean, SmartReal, Boolean, Boolean) Creates a \"frame on frame\" positioning constraint with X and Y offsets. Declaration [OperationContract] [AvailableSinceVersion(7, 9, 0, 0)] ElementId CreateFrameOnFrameConstraintWithXYOffsets(ElementId inPositioningId, SmartFrame3D inSourceFrame, SmartFrame3D inDestinationFrame, SmartReal inXOffsetDistance, bool inIsXOffsetReversed, SmartReal inYOffsetDistance, bool inIsYOffsetReversed, SmartReal inZOffsetDistance, bool inIsZOffsetReversed, SmartReal inXRotationAngle, bool inIsXRotationReversed, SmartReal inYRotationAngle, bool inIsYRotationReversed, SmartReal inZRotationAngle, bool inIsZRotationReversed, bool inRotatesZYX) Parameters Type Name Description ElementId inPositioningId Identifier of the positioning operation that will contain the constraint. SmartFrame3D inSourceFrame Frame on source occurrence. SmartFrame3D inDestinationFrame Destination frame. SmartReal inXOffsetDistance Offset distance of the source frame along the destination frame X direction. System.Boolean inIsXOffsetReversed Whether the X offset is reversed. SmartReal inYOffsetDistance Offset distance of the source frame along the destination frame Y direction. System.Boolean inIsYOffsetReversed Whether the Y offset is reversed. SmartReal inZOffsetDistance Offset distance of the source frame along the destination frame Z direction. System.Boolean inIsZOffsetReversed Whether the Z offset is reversed. SmartReal inXRotationAngle Rotation angle of the source frame around its X axis. System.Boolean inIsXRotationReversed Whether the rotation around X is reversed. SmartReal inYRotationAngle Rotation angle of the source frame around its Y axis. System.Boolean inIsYRotationReversed Whether the rotation around Y is reversed. SmartReal inZRotationAngle Rotation angle of the source frame around its Z axis. System.Boolean inIsZRotationReversed Whether the rotation around Z is reversed. System.Boolean inRotatesZYX Rotates around Z then Y then X instead of X then Y then Z. Returns Type Description ElementId Identifier of the created constraint. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.9. CreateInclusion(DocumentId, ElementId, String, DocumentId, String, List<String>, List<SmartObject>, Boolean, ElementId, ElementId, Boolean, Boolean, Boolean, Boolean, Transform3D, Boolean) Creates an inclusion operation in a document. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 0, 0)] ElementId CreateInclusion(DocumentId inDocumentId, ElementId inPositioningId, string inOccurrenceName, DocumentId inDefinitionId, string inCode, List<string> inDriverNames, List<SmartObject> inDriverValues, bool inAutomaticallyFillsRepresentations, ElementId inConfigurationId, ElementId inRigidGroupId, bool inIsRigid, bool inInheritsRigidGroups, bool inInheritsJoints, bool inInheritsForces, Transform3D inTransform, bool inIsFixed) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. ElementId inPositioningId Identifier of the positioning operation that will contain the inclusion, or Empty for creating a new one. System.String inOccurrenceName Occurrence name, or null if none. DocumentId inDefinitionId Identifier of the definition document of the part or assembly or family to include. System.String inCode Instance code, or null if none. System.Collections.Generic.List < System.String > inDriverNames Instance driver names, or null if none. System.Collections.Generic.List < SmartObject > inDriverValues Instance driver values, or null if none. System.Boolean inAutomaticallyFillsRepresentations Automatically fills assembly representations with corresponding representations of mechanical document to include. ElementId inConfigurationId Identifier of the configuration to use when including a mechanism assembly, or Empty otherwise. ElementId inRigidGroupId Identifier of the rigid group in which to put new node entity, or Empty otherwise. System.Boolean inIsRigid Whether to make a rigid inclusion when including a mechanism sub-assembly. System.Boolean inInheritsRigidGroups Whether to inherit sub-assembly rigid groups (when inIsRigid is false ). System.Boolean inInheritsJoints Whether to inherit sub-assembly joints (when inIsRigid is false ). System.Boolean inInheritsForces Whether to inherit sub-assembly forces (when inIsRigid is false ). Transform3D inTransform Transformation to apply. System.Boolean inIsFixed Whether to fix the result of the inclusion. Returns Type Description ElementId Identifier of the created inclusion operation. Remarks Code is not null if document to include is a family which has a catalog. Driver names and values are not null if document to include is a family which has drivers. In this case, driver names and values must match. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7. Automatic creation of the positioning by specifying inPositioningId = Empty is available since v7.8. CreateInclusion2(DocumentId, ElementId, String, DocumentId, String, List<String>, List<SmartObject>, List<String>, List<SmartDesignObject>, Boolean, ElementId, ElementId, Boolean, Boolean, Boolean, Boolean, Transform3D, Boolean) Creates an inclusion operation in a document. Declaration [OperationContract] [AvailableSinceVersion(7, 17, 0, 0)] ElementId CreateInclusion2(DocumentId inDocumentId, ElementId inPositioningId, string inOccurrenceName, DocumentId inDefinitionId, string inCode, List<string> inKernelDriverNames, List<SmartObject> inKernelDriverValues, List<string> inDesignDriverNames, List<SmartDesignObject> inDesignDriverValues, bool inAutomaticallyFillsRepresentations, ElementId inConfigurationId, ElementId inRigidGroupId, bool inIsRigid, bool inInheritsRigidGroups, bool inInheritsJoints, bool inInheritsForces, Transform3D inTransform, bool inIsFixed) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. ElementId inPositioningId Identifier of the positioning operation that will contain the inclusion, or Empty for creating a new one. System.String inOccurrenceName Occurrence name, or null if none. DocumentId inDefinitionId Identifier of the definition document of the part or assembly or family to include. System.String inCode Instance code, or null if none. System.Collections.Generic.List < System.String > inKernelDriverNames Instance kernel driver names, or null if none. System.Collections.Generic.List < SmartObject > inKernelDriverValues Instance kernel driver values, or null if none. System.Collections.Generic.List < System.String > inDesignDriverNames Instance design driver names, or null if none. System.Collections.Generic.List < SmartDesignObject > inDesignDriverValues Instance design driver values, or null if none. System.Boolean inAutomaticallyFillsRepresentations Automatically fills assembly representations with corresponding representations of mechanical document to include. ElementId inConfigurationId Identifier of the configuration to use when including a mechanism assembly, or Empty otherwise. ElementId inRigidGroupId Identifier of the rigid group in which to put new node entity, or Empty otherwise. System.Boolean inIsRigid Whether to make a rigid inclusion when including a mechanism sub-assembly. System.Boolean inInheritsRigidGroups Whether to inherit sub-assembly rigid groups (when inIsRigid is false ). System.Boolean inInheritsJoints Whether to inherit sub-assembly joints (when inIsRigid is false ). System.Boolean inInheritsForces Whether to inherit sub-assembly forces (when inIsRigid is false ). Transform3D inTransform Transformation to apply. System.Boolean inIsFixed Whether to fix the result of the inclusion. Returns Type Description ElementId Identifier of the created inclusion operation. Remarks Code is not null if document to include is a family which has a catalog. Driver names and values are not null if document to include is a family which has drivers. In this case, driver names and values must match. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17. Automatic creation of the positioning by specifying inPositioningId = Empty is available since v7.8. CreatePositioning(DocumentId) Creates a positioning operation in a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreatePositioning(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Returns Type Description ElementId Identifier of the created positioning operation. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. DerivePartForModification(ElementId, Boolean) Derives a part for modification in an assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] DocumentId DerivePartForModification(ElementId inOccurrenceId, bool inUseDefaultTemplate) Parameters Type Name Description ElementId inOccurrenceId Identifier of the occurrence of the part to derive in the assembly document. System.Boolean inUseDefaultTemplate Tells whether to use the default template if present. Returns Type Description DocumentId Derived part document identifier. Remarks The occurrence of the part must be in the parts folder of the assembly, or at the first level of an assembly occurrence that is in the parts folder of the assembly (in which case a derived sub-assembly will also be created). StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. GetAssemblyCenterOfMassManagement(DocumentId) Tells whether the physical property management of an assembly is center of mass managed. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] bool GetAssemblyCenterOfMassManagement(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. Returns Type Description System.Boolean The physical property management is center of mass managed. Remarks This method is available since v7.13.300.220. GetAssemblyMassManagement(DocumentId) Tells whether the physical property management of an assembly is mass managed. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] bool GetAssemblyMassManagement(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. Returns Type Description System.Boolean The physical property management is mass managed. Remarks This method is available since v7.13.300.220. GetAssemblyMomentsOfInertiaManagement(DocumentId) Tells whether the physical property management of an assembly is moments of inertia managed. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] bool GetAssemblyMomentsOfInertiaManagement(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. Returns Type Description System.Boolean The physical property management is moments of inertia managed. Remarks This method is available since v7.13.300.220. GetAssemblyStrictMode(DocumentId) Tells whether the physical property management of an assembly is strict. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] bool GetAssemblyStrictMode(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. Returns Type Description System.Boolean The physical property management is strict. Remarks This method is available since v7.13.300.220. GetAssemblySurfaceAreaManagement(DocumentId) Tells whether the physical property management of an assembly is surface area managed. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] bool GetAssemblySurfaceAreaManagement(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. Returns Type Description System.Boolean The physical property management is surface area managed. Remarks This method is available since v7.13.300.220. GetAssemblyVolumeManagement(DocumentId) Tells whether the physical property management of an assembly is volume managed. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] bool GetAssemblyVolumeManagement(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. Returns Type Description System.Boolean The physical property management is volume managed. Remarks This method is available since v7.13.300.220. GetBom(DocumentId) Gets BOM contents. Declaration [Obsolete(\"Since v7.12, access to BOM is done using IBoms interface.\")] [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] BomRoot GetBom(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of BOM document to analyze. Returns Type Description BomRoot BOM contents. Remarks This method is available since v7.6. GetCollisionsManagement(DocumentId, out ElementId, out Boolean, out Boolean, out Boolean) Gets the collisions management of an assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] void GetCollisionsManagement(DocumentId inDocumentId, out ElementId outRepresentationId, out bool outFindsIntersections, out bool outExcludesThreadingTapping, out bool outIsRefreshAuto) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. ElementId outRepresentationId Identifier of the analyzed representation entity, or empty if there is no collisions management. System.Boolean outFindsIntersections Whether to find collisions intersections. System.Boolean outExcludesThreadingTapping Whether to exclude threading-tapping collisions. System.Boolean outIsRefreshAuto Whether refresh is automatic. Remarks This method is available since v7.8. GetDriverSubFolderName(ElementId, String) Gets the name of the driver sub folder. Declaration [OperationContract] [AvailableSinceVersion(7, 17, 0, 0)] string GetDriverSubFolderName(ElementId inElementId, string inDriverName) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation. System.String inDriverName Instance driver names. Returns Type Description System.String The name of the sub-folder. Remarks This method is available since v7.17. GetFunctionsInheritingOperation(ElementId, out ElementId, out List<ElementId>, out List<ElementId>) Gets a functions inheriting operation. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] void GetFunctionsInheritingOperation(ElementId inOperationId, out ElementId outOccurrenceId, out List<ElementId> outFunctionIds, out List<ElementId> outChildIds) Parameters Type Name Description ElementId inOperationId Identifier of the functions inheriting operation to analyze. ElementId outOccurrenceId Identifier of the occurrence of the part or assembly providing the functions to inherit. System.Collections.Generic.List < ElementId > outFunctionIds Identifiers of the specified function entities to inherit from in the occurrence definition document. System.Collections.Generic.List < ElementId > outChildIds Identifiers of the children provided functions. Remarks This method is available since v7.8. GetInclusionChildOccurrence(ElementId) Gets the part or assembly occurrence entity generated by an inclusion operation. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] ElementId GetInclusionChildOccurrence(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation to analyze. Returns Type Description ElementId Identifier of the part or assembly occurrence entity generated by the inclusion operation. Remarks This method is available since v7.8. GetInclusionCodeAndDrivers(ElementId, out String, out List<String>, out List<SmartObject>) Gets the code and drivers of a family inclusion operation. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void GetInclusionCodeAndDrivers(ElementId inElementId, out string outCode, out List<string> outDriverNames, out List<SmartObject> outDriverValues) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation to analyze. System.String outCode Instance code, or null if none. System.Collections.Generic.List < System.String > outDriverNames Instance driver names, or null if none. System.Collections.Generic.List < SmartObject > outDriverValues Instance driver values, or null if none. Remarks This method is available since v7.10. GetInclusionCodeAndDrivers2(ElementId, out String, out List<String>, out List<SmartObject>, out List<String>, out List<SmartDesignObject>) Gets the code and drivers of a family inclusion operation. Declaration [OperationContract] [AvailableSinceVersion(7, 17, 0, 0)] void GetInclusionCodeAndDrivers2(ElementId inElementId, out string outCode, out List<string> outKernelDriverNames, out List<SmartObject> outKernelDriverValues, out List<string> outDesignDriverNames, out List<SmartDesignObject> outDesignDriverValues) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation to analyze. System.String outCode Instance code, or null if none. System.Collections.Generic.List < System.String > outKernelDriverNames Instance kernel driver names, or null if none. System.Collections.Generic.List < SmartObject > outKernelDriverValues Instance kernel driver values, or null if none. System.Collections.Generic.List < System.String > outDesignDriverNames Instance design driver names, or null if none. System.Collections.Generic.List < SmartDesignObject > outDesignDriverValues Instance design driver values, or null if none. Remarks This method is available since v7.17. GetInclusionDefinitionDocument(ElementId) Gets the definition document of an inclusion operation. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] DocumentId GetInclusionDefinitionDocument(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation to analyze. Returns Type Description DocumentId Identifier of the definition document of the inluded part or assembly. Remarks This method is available since v7.8. GetNodeBomIndex(ElementId) Gets the bill of material index attached to a specified assembly node entity. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] string GetNodeBomIndex(ElementId inNodeId) Parameters Type Name Description ElementId inNodeId Identifier of the assembly node entity (assembly or part occurrence, local part, ...) to analyze. Returns Type Description System.String Bill of material index attached, or null if none. Remarks This method is available since v7.12. GetNodeProperties(ElementId, out List<PropertyDefinition>, out List<Property>) Gets the properties attached to a specified assembly node entity. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void GetNodeProperties(ElementId inNodeId, out List<PropertyDefinition> outDefinitions, out List<Property> outProperties) Parameters Type Name Description ElementId inNodeId Identifier of the assembly node entity (assembly or part occurrence, local part, ...) to analyze. System.Collections.Generic.List < PropertyDefinition > outDefinitions Definitions of the properties attached to the specified node, or empty if none. System.Collections.Generic.List < Property > outProperties Properties attached to the specified node, or empty if none. Remarks This method is available since v7.12. GetOccurrenceDefinition(ElementId) Gets the definition document of a part or assembly occurrence entity. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] DocumentId GetOccurrenceDefinition(ElementId inOccurrenceId) Parameters Type Name Description ElementId inOccurrenceId Identifier of the part or assembly occurrence to analyze. Returns Type Description DocumentId Identifier of the definition document of the occurrence. Remarks This method is available since v7.8. GetOccurrencePublishing(ElementId, ElementId) Gets the constituent of an occurrence corresponding to a specified publishing entity. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] ElementId GetOccurrencePublishing(ElementId inOccurrenceId, ElementId inPublishingId) Parameters Type Name Description ElementId inOccurrenceId Identifier of the part or assembly occurrence to analyze. ElementId inPublishingId Identifier of the specified publishing entity in the occurrence definition document. Returns Type Description ElementId Identifier of the corresponding constituent entity of the occurrence. Remarks This method is available since v7.8. GetParts(DocumentId) Gets the part or assembly entities that are in the parts folder of an asssembly document. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] List<ElementId> GetParts(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the assembly document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Part or assembly entities found. Remarks This method is available since v7.8. HasDriverSubFolderOwner(ElementId, String) Determines whether the driver is inside the sub-folder inside the driver folder of the family document. Declaration [OperationContract] [AvailableSinceVersion(7, 17, 0, 0)] bool HasDriverSubFolderOwner(ElementId inElementId, string inDriverName) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation. System.String inDriverName Instance driver names. Returns Type Description System.Boolean The driver is inside a sub-folder. Remarks This method is available since v7.17. InheritOccurrenceFunctions(ElementId, List<ElementId>) Provides functions by inheriting from the ones provided in a part or assembly occurrence. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] ElementId InheritOccurrenceFunctions(ElementId inOccurrenceId, List<ElementId> inFunctionIds) Parameters Type Name Description ElementId inOccurrenceId Identifier of the occurrence of the part or assembly providing the functions to inherit. System.Collections.Generic.List < ElementId > inFunctionIds Identifiers of the specified function entities to inherit from in the occurrence definition document. Returns Type Description ElementId Identifier of the created functions inheriting operation. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. IsAssembly(DocumentId) Tells whether a document is an assembly document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] bool IsAssembly(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is an assembly document. Remarks This method is available since v7.6. IsAssemblyOccurrence(ElementId) Tells whether an element is an assembly occurrence entity. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] bool IsAssemblyOccurrence(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element is an assembly occurrence entity. Remarks This method is available since v7.8. IsCollisionsManagementCheckingMechanisms(DocumentId) Tells whether the collisions management of an assembly is checking for collisions between rigid groups of articulated subassemblies. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] bool IsCollisionsManagementCheckingMechanisms(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. Returns Type Description System.Boolean Whether the collisions management of the assembly is checking for collisions between rigid groups of articulated subassemblies. Remarks This method is available since v7.10. IsInclusion(ElementId) Tells whether an element is an inclusion operation. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] bool IsInclusion(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element is an inclusion operation. Remarks This method is available since v7.8. IsLocalPartOrLocalAssembly(ElementId) Tells whether an element is a local part or a local assembly entity. Declaration [OperationContract] [AvailableSinceVersion(7, 17, 0, 0)] bool IsLocalPartOrLocalAssembly(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element is a local part or a local assemby entity. Remarks This method is available since v7.17. IsPartOccurrence(ElementId) Tells whether an element is a part occurrence entity. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] bool IsPartOccurrence(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element is a part occurrence entity. Remarks This method is available since v7.8. LinkBom(DocumentId, DocumentId, Boolean) Make BOM. Declaration [Obsolete(\"Since v7.12, access to BOM is done using IBoms interface.\")] [OperationContract] [AvailableSinceVersion(7, 11, 300, 9)] void LinkBom(DocumentId inDocumentId, DocumentId inBomDocumentId, bool inGroupItemsByProperties) Parameters Type Name Description DocumentId inDocumentId Identifier of the assembly document. DocumentId inBomDocumentId Identifier of the bom document. System.Boolean inGroupItemsByProperties regroup mode Remarks This method is available since v7.11.300.9 RedirectInclusion(ElementId, DocumentId) Redirects an inclusion operation. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] void RedirectInclusion(ElementId inElementId, DocumentId inDefinitionId) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation to modify. DocumentId inDefinitionId Identifier of the new definition document of the part or assembly to include. Remarks The previous definition document must be a part or an assembly, not a family. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. RedirectInclusionWithCodeAndDrivers(ElementId, DocumentId, String, List<String>, List<SmartObject>) Redirects an inclusion operation to a family with specified code and drivers. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 300, 80)] void RedirectInclusionWithCodeAndDrivers(ElementId inElementId, DocumentId inDefinitionId, string inCode, List<string> inDriverNames, List<SmartObject> inDriverValues) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation to modify. DocumentId inDefinitionId Identifier of the new family definition document to include. System.String inCode Instance code, or null if none. System.Collections.Generic.List < System.String > inDriverNames Instance driver names, or null if none. System.Collections.Generic.List < SmartObject > inDriverValues Instance driver values, or null if none. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12.300.080. RedirectInclusionWithCodeAndDrivers2(ElementId, DocumentId, String, List<String>, List<SmartObject>, List<String>, List<SmartDesignObject>) Redirects an inclusion operation to a family with specified code and drivers. Declaration [OperationContract] [AvailableSinceVersion(7, 17, 300, 80)] void RedirectInclusionWithCodeAndDrivers2(ElementId inElementId, DocumentId inDefinitionId, string inCode, List<string> inKernelDriverNames, List<SmartObject> inKernelDriverValues, List<string> inDesignDriversValues, List<SmartDesignObject> inDesignDriverValues) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation to modify. DocumentId inDefinitionId Identifier of the new family definition document to include. System.String inCode Instance code, or null if none. System.Collections.Generic.List < System.String > inKernelDriverNames Instance kernel driver names, or null if none. System.Collections.Generic.List < SmartObject > inKernelDriverValues Instance kernel driver values, or null if none. System.Collections.Generic.List < System.String > inDesignDriversValues Instance design driver names, or null if none. System.Collections.Generic.List < SmartDesignObject > inDesignDriverValues Instance design driver values, or null if none. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17. SetAssemblyCenterOfMassManagement(DocumentId, Boolean) Sets the center of mass management of the physical property management of an assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetAssemblyCenterOfMassManagement(DocumentId inDocumentId, bool inIsCenterOfMassManaged) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. System.Boolean inIsCenterOfMassManaged Tells whether the physical property management of an assembly is center of mass managed. Remarks This method is available since v7.13.300.220. SetAssemblyMassManagement(DocumentId, Boolean) Sets the mass management of the physical property management of an assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetAssemblyMassManagement(DocumentId inDocumentId, bool inIsMassManaged) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. System.Boolean inIsMassManaged Tells whether the physical property management of an assembly is mass managed. Remarks This method is available since v7.13.300.220. SetAssemblyMomentsOfInertiaManagement(DocumentId, Boolean) Sets the moments of inertia management of the physical property management of an assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetAssemblyMomentsOfInertiaManagement(DocumentId inDocumentId, bool inIsInertiaManaged) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. System.Boolean inIsInertiaManaged Tells whether the physical property management of an assembly is moments of inertia managed. Remarks This method is available since v7.13.300.220. SetAssemblyStrictMode(DocumentId, Boolean) Sets the strict mode of the physical property management of an assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetAssemblyStrictMode(DocumentId inDocumentId, bool inIsStrict) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. System.Boolean inIsStrict Tells whether the physical property management of an assembly is strict. Remarks This method is available since v7.13.300.220. SetAssemblySurfaceAreaManagement(DocumentId, Boolean) Sets the surface area management of the physical property management of an assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetAssemblySurfaceAreaManagement(DocumentId inDocumentId, bool inIsSurfaceAreaManaged) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. System.Boolean inIsSurfaceAreaManaged Tells whether the physical property management of an assembly is surface area managed. Remarks This method is available since v7.13.300.220. SetAssemblyVolumeManagement(DocumentId, Boolean) Sets the volume management of the physical property management of an assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetAssemblyVolumeManagement(DocumentId inDocumentId, bool inIsVolumeManaged) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to analyze. System.Boolean inIsVolumeManaged Tells whether the physical property management of an assembly is volume managed. Remarks This method is available since v7.13.300.220. SetCollisionsManagement(DocumentId, ElementId, Boolean, Boolean, Boolean) Sets the collisions management of an assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] void SetCollisionsManagement(DocumentId inDocumentId, ElementId inRepresentationId, bool inFindsIntersections, bool inExcludesThreadingTapping, bool inIsRefreshAuto) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to modify. ElementId inRepresentationId Identifier of the analyzed representation entity, or empty for no collisions management. System.Boolean inFindsIntersections Whether to find collisions intersections. System.Boolean inExcludesThreadingTapping Whether to exclude threading-tapping collisions. System.Boolean inIsRefreshAuto Whether refresh is automatic. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetCollisionsManagementCheckingMechanisms(DocumentId, Boolean) Sets whether the collisions management of an assembly is checking for collisions between rigid groups of articulated subassemblies. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void SetCollisionsManagementCheckingMechanisms(DocumentId inDocumentId, bool inIsChecking) Parameters Type Name Description DocumentId inDocumentId Identifier of assembly document to modify. System.Boolean inIsChecking Whether the collisions management of the assembly is checking for collisions between rigid groups of articulated subassemblies. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. SetInclusionCodeAndDrivers(ElementId, String, List<String>, List<SmartObject>) Sets the code and drivers of a family inclusion operation. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void SetInclusionCodeAndDrivers(ElementId inElementId, string inCode, List<string> inDriverNames, List<SmartObject> inDriverValues) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation to modify. System.String inCode Instance code, or null if none. System.Collections.Generic.List < System.String > inDriverNames Instance driver names, or null if none. System.Collections.Generic.List < SmartObject > inDriverValues Instance driver values, or null if none. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. SetInclusionCodeAndDrivers2(ElementId, String, List<String>, List<SmartObject>, List<String>, List<SmartDesignObject>) Sets the code and drivers of a family inclusion operation. Declaration [OperationContract] [AvailableSinceVersion(7, 17, 0, 0)] void SetInclusionCodeAndDrivers2(ElementId inElementId, string inCode, List<string> inKernelDriverNames, List<SmartObject> inKernelDriverValues, List<string> inDesignDriverNames, List<SmartDesignObject> inDesignDriverValues) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation to modify. System.String inCode Instance code, or null if none. System.Collections.Generic.List < System.String > inKernelDriverNames Instance kernel driver names, or null if none. System.Collections.Generic.List < SmartObject > inKernelDriverValues Instance kernel driver values, or null if none. System.Collections.Generic.List < System.String > inDesignDriverNames Instance kernel driver names, or null if none. System.Collections.Generic.List < SmartDesignObject > inDesignDriverValues Instance kernel driver values, or null if none. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17. SetNodeBomIndex(ElementId, String) Sets the bill of material index attached to a specified assembly node entity. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void SetNodeBomIndex(ElementId inNodeId, string inBomIndex) Parameters Type Name Description ElementId inNodeId Identifier of the assembly node entity (assembly or part occurrence, local part, ...) to modify. System.String inBomIndex Bill of material index to attach, or null if none. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. TransformInclusion(ElementId, Transform3D) Transforms an inclusion operation. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] void TransformInclusion(ElementId inElementId, Transform3D inTransform) Parameters Type Name Description ElementId inElementId Identifier of the inclusion operation to modify. Transform3D inTransform Transformation to apply. Remarks The inclusion operation must be constituent of a positioning operation (this method may not be used on in-place parts inclusions). StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100."
  },
  "api/cad/TopSolid.Cad.Design.Automating.IBoms.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.IBoms.html",
    "title": "Interface IBoms | TopSolid Automation website",
    "keywords": "Interface IBoms Gives access to bill of materials (BOMs). Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 12, 0, 0)] public interface IBoms Remarks This interface is available since v7.6. Methods ActivateRow(DocumentId, Int32) Activates a row of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void ActivateRow(DocumentId inDocumentId, int inRowId) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to modify. System.Int32 inRowId Identifier of the row to activate. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. DeactivateRow(DocumentId, Int32) Deactivates a row of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void DeactivateRow(DocumentId inDocumentId, int inRowId) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to modify. System.Int32 inRowId Identifier of the row to deactivate. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. ForceCell(DocumentId, Int32, Int32, Property) Forces the property value of a cell of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void ForceCell(DocumentId inDocumentId, int inRowId, int inColumnIx, Property inForcedProperty) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to modify. System.Int32 inRowId Identifier of the row of the cell to modify. System.Int32 inColumnIx Index of the column of the cell to modify, within [0, GetColumnCount(DocumentId) -1]. Property inForcedProperty Forced property of the cell. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. ForceColumnTitle(DocumentId, Int32, String) Forces the title of a column of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void ForceColumnTitle(DocumentId inDocumentId, int inColumnIx, string inTitle) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to modify. System.Int32 inColumnIx Index of the column to modify, within [0, GetColumnCount(DocumentId) -1]. System.String inTitle New forced title. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. GetColumnCount(DocumentId) Gets the number of columns of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] int GetColumnCount(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. Returns Type Description System.Int32 Number of columns. Remarks This method is available since v7.12. GetColumnPropertyDefinition(DocumentId, Int32) Gets the property definition of a column of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] PropertyDefinition GetColumnPropertyDefinition(DocumentId inDocumentId, int inColumnIx) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. System.Int32 inColumnIx Index of the column to analyze, within [0, GetColumnCount(DocumentId) -1]. Returns Type Description PropertyDefinition Property definition of the column. Remarks This method is available since v7.12. GetColumnTitle(DocumentId, Int32) Gets the title of a column of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] string GetColumnTitle(DocumentId inDocumentId, int inColumnIx) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. System.Int32 inColumnIx Index of the column to analyze, within [0, GetColumnCount(DocumentId) -1]. Returns Type Description System.String Title of the column. Remarks This method is available since v7.12. GetForcedCells(DocumentId, out List<Int32>, out List<Int32>) Gets the cells of a BOM which property value has been forced. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void GetForcedCells(DocumentId inDocumentId, out List<int> inRowIds, out List<int> inColumnIxs) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. System.Collections.Generic.List < System.Int32 > inRowIds Row identifiers of cells. System.Collections.Generic.List < System.Int32 > inColumnIxs Column indexes of cells. Remarks If there is not any forced cell, the returned lists are empty. This method is available since v7.12. GetPropertyDefinitions() Gets the available property definitions that may be used in a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] List<PropertyDefinition> GetPropertyDefinitions() Returns Type Description System.Collections.Generic.List < PropertyDefinition > Property definitions that may be used in a BOM document. Remarks The special BOM property definitions defined in BomPropertyDefinitions are not included in the returned list. This method is available since v7.12. GetRootRow(DocumentId) Gets the identifier of the root row of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] int GetRootRow(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. Returns Type Description System.Int32 Identifier of the root row, or 0 if the BOM is empty. Remarks This method is available since v7.12. GetRowChildrenRows(DocumentId, Int32) Gets the children rows of a row of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] List<int> GetRowChildrenRows(DocumentId inDocumentId, int inRowId) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. System.Int32 inRowId Identifier of the row to analyze. Returns Type Description System.Collections.Generic.List < System.Int32 > Identifiers of the children rows, or empty if none. Remarks This method is available since v7.12. GetRowContents(DocumentId, Int32, out List<Property>, out List<String>) Gets the contents of a row of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void GetRowContents(DocumentId inDocumentId, int inRowId, out List<Property> outProperties, out List<string> outTexts) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. System.Int32 inRowId Identifier of the row to analyze. System.Collections.Generic.List < Property > outProperties Properties corresponding to the columns. System.Collections.Generic.List < System.String > outTexts Texts displayed in the columns. Remarks Both returned lists contain GetColumnCount(DocumentId) objects. Properties that are not specified (empty cells), or not convertible to Automation properties, are returned as null in the list. This method is available since v7.12. GetRowCountedEntities(DocumentId, Int32) Gets the entities that are counted in a row of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] List<ElementId> GetRowCountedEntities(DocumentId inDocumentId, int inRowId) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. System.Int32 inRowId Identifier of the row to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Counted entities. Remarks This method is available since v7.12. GetSourceRepresentation(DocumentId) Gets the source representation of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] ElementId GetSourceRepresentation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. Returns Type Description ElementId Identifier of the representation of the source assembly document, or Empty if none. Remarks This method is available since v7.12. GetSourceSets(DocumentId) Gets the source sets of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] List<ElementId> GetSourceSets(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Identifiers of the sets of the source assembly document, or empty if none. Remarks This method is available since v7.12. IsBom(DocumentId) Tells whether a document is a BOM document. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] bool IsBom(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is a BOM document. Remarks This method is available since v7.12. IsCellForced(DocumentId, Int32, Int32) Tells whether the property value of a cell of a BOM has been forced. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] bool IsCellForced(DocumentId inDocumentId, int inRowId, int inColumnIx) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. System.Int32 inRowId Identifier of the row of the cell to analyze. System.Int32 inColumnIx Index of the column of the cell to analyze, within [0, GetColumnCount(DocumentId) -1]. Returns Type Description System.Boolean Whether the property value of the cell has been forced. Remarks This method is available since v7.12. IsColumnTitleForced(DocumentId, Int32) Tells whether the title of a column of a BOM is forced. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] bool IsColumnTitleForced(DocumentId inDocumentId, int inColumnIx) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. System.Int32 inColumnIx Index of the column to analyze, within [0, GetColumnCount(DocumentId) -1]. Returns Type Description System.Boolean Whether the title of the column is forced. Remarks This method is available since v7.12. IsColumnVisible(DocumentId, Int32) Tells whether a column of a BOM is visible. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] bool IsColumnVisible(DocumentId inDocumentId, int inColumnIx) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. System.Int32 inColumnIx Index of the column to analyze, within [0, GetColumnCount(DocumentId) -1]. Returns Type Description System.Boolean Whether the column is visible. Remarks This method is available since v7.12. IsRowActive(DocumentId, Int32) Tells whether a row of a BOM is active. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] bool IsRowActive(DocumentId inDocumentId, int inRowId) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to analyze. System.Int32 inRowId Identifier of the row to analyze. Returns Type Description System.Boolean Whether the row is active. Remarks This method is available since v7.12. SetSourceRepresentation(DocumentId, ElementId) Sets the source representation of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void SetSourceRepresentation(DocumentId inDocumentId, ElementId inRepresentationId) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to modify. ElementId inRepresentationId Identifier of the representation of the source assembly document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. SetSourceSets(DocumentId, List<ElementId>) Sets the source sets of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void SetSourceSets(DocumentId inDocumentId, List<ElementId> inSetIds) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to modify. System.Collections.Generic.List < ElementId > inSetIds Identifiers of the sets of the source assembly document, or empty if none. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. UnforceCell(DocumentId, Int32, Int32) Unforces the property value of a cell of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void UnforceCell(DocumentId inDocumentId, int inRowId, int inColumnIx) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to modify. System.Int32 inRowId Identifier of the row of the cell to modify. System.Int32 inColumnIx Index of the column of the cell to modify, within [0, GetColumnCount(DocumentId) -1]. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. UnforceColumnTitle(DocumentId, Int32) Unforces the title of a column of a BOM. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void UnforceColumnTitle(DocumentId inDocumentId, int inColumnIx) Parameters Type Name Description DocumentId inDocumentId Identifier of the BOM document to modify. System.Int32 inColumnIx Index of the column to modify, within [0, GetColumnCount(DocumentId) -1]. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12."
  },
  "api/cad/TopSolid.Cad.Design.Automating.ICoatings.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.ICoatings.html",
    "title": "Interface ICoatings | TopSolid Automation website",
    "keywords": "Interface ICoatings Gives access to methods to read or write in a coating document. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 16, 0, 0)] public interface ICoatings Remarks This interface is available since v7.16. Methods GetAlbedoColor(DocumentId) Gets the Albado color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] Color GetAlbedoColor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description Color Remarks This method is available since v7.16. GetAlbedoTextureDocument(DocumentId) Gets the Albado texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetAlbedoTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetAmbientOcclusionFactor(DocumentId) Gets the Ambient Occlusion factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetAmbientOcclusionFactor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetAmbientOcclusionTextureDocument(DocumentId) Gets the Ambient Occlusion texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetAmbientOcclusionTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetCategory(DocumentId) Gets the coating category of a coating document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] CoatingCategoryType GetCategory(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description CoatingCategoryType The coating category. Remarks This method is available since v7.16. GetCoatingApperanceInfo(DocumentId, out Boolean, out Boolean, out Boolean, out Boolean) Gets the coating apperance information. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] void GetCoatingApperanceInfo(DocumentId inDocumentId, out bool outReceiveShadows, out bool outCastShadows, out bool outFresnelReflection, out bool outTransparentReflection) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.Boolean outReceiveShadows Tells wether the coating receive shadows. System.Boolean outCastShadows Tells wether the coating cast shadows. System.Boolean outFresnelReflection Tells wether the coating has a frenesl reflection. System.Boolean outTransparentReflection Tells wether the coating has transparent reflection. Remarks This method is available since v7.16. GetDensity(DocumentId) Gets the coating density. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetDensity(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetMetalnessFactor(DocumentId) Gets the Metalness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetMetalnessFactor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetMetalnessTextureDocument(DocumentId) Gets the Metalness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetMetalnessTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetNormalFactor(DocumentId) Gets the Normal factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetNormalFactor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetNormalTextureDocument(DocumentId) Gets the Normal texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetNormalTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetOpacityColor(DocumentId) Gets the Opacity color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] Color GetOpacityColor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description Color Remarks This method is available since v7.16. GetOpacityTextureDocument(DocumentId) Gets the Opacity texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetOpacityTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetRefractiveIndex(DocumentId) Gets the refractive index. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetRefractiveIndex(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetRotation(DocumentId) Gets the rotation. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetRotation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetRoughnessFactor(DocumentId) Gets the Roughness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetRoughnessFactor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetRoughnessTextureDocument(DocumentId) Gets the Roughness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetRoughnessTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetScale(DocumentId) Gets the scale. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetScale(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetTransmissionGlossinessFactor(DocumentId) Gets the Transmission Glossiness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetTransmissionGlossinessFactor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetTransmissionGlossinessTextureDocument(DocumentId) Gets the Transmission Glossiness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetTransmissionGlossinessTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetTransmissionScatteringColor(DocumentId) Gets the Transmission Scattering color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] Color GetTransmissionScatteringColor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description Color Remarks This method is available since v7.16. GetTransmissionScatteringLength(DocumentId) Gets the Transmission Scattering length. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetTransmissionScatteringLength(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. SetAlbedoColor(DocumentId, Color) Sets the Albado color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetAlbedoColor(DocumentId inDocumentId, Color inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Color inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetAlbedoTextureDocument(DocumentId, DocumentId) Sets the Albado texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetAlbedoTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetAmbientOcclusionFactor(DocumentId, Double) Sets the Ambient Occlusion factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetAmbientOcclusionFactor(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetAmbientOcclusionTextureDocument(DocumentId, DocumentId) Sets the Ambient Occlusion texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetAmbientOcclusionTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetCategory(DocumentId, CoatingCategoryType) Sets the coating category of a coating document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetCategory(DocumentId inDocumentId, CoatingCategoryType inCoatingCategoryType) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. CoatingCategoryType inCoatingCategoryType The coating category. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetCoatingApperanceInfo(DocumentId, Boolean, Boolean, Boolean, Boolean) Sets the coating apperance information. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetCoatingApperanceInfo(DocumentId inDocumentId, bool inReceiveShadows, bool inCastShadows, bool inFresnelReflection, bool inTransparentReflection) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Boolean inReceiveShadows Tells wether the coating receive shadows. System.Boolean inCastShadows Tells wether the coating cast shadows. System.Boolean inFresnelReflection Tells wether the coating has a frenesl reflection. System.Boolean inTransparentReflection Tells wether the coating has transparent reflection. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetDensity(DocumentId, Double) Sets the coating density. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetDensity(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetMetalnessFactor(DocumentId, Double) Sets the Metalness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetMetalnessFactor(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetMetalnessTextureDocument(DocumentId, DocumentId) Sets the Metalness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetMetalnessTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetNormalFactor(DocumentId, Double) Sets the Normal factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetNormalFactor(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetNormalTextureDocument(DocumentId, DocumentId) Sets the Normal texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetNormalTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetOpacityColor(DocumentId, Color) Sets the Opacity color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetOpacityColor(DocumentId inDocumentId, Color inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Color inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetOpacityTextureDocument(DocumentId, DocumentId) Sets the Opacity texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetOpacityTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRefractiveIndex(DocumentId, Double) Sets the refractive index. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetRefractiveIndex(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRotation(DocumentId, Double) Sets the rotation. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetRotation(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRoughnessFactor(DocumentId, Double) Sets the Roughness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetRoughnessFactor(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRoughnessTextureDocument(DocumentId, DocumentId) Sets the Roughness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetRoughnessTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetScale(DocumentId, Double) Sets the scale. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetScale(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetTransmissionGlossinessFactor(DocumentId, Double) Sets the Transmission Glossiness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetTransmissionGlossinessFactor(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetTransmissionGlossinessTextureDocument(DocumentId, DocumentId) Sets the Transmission Glossiness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetTransmissionGlossinessTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetTransmissionScatteringColor(DocumentId, Color) Sets the Transmission Scattering color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetTransmissionScatteringColor(DocumentId inDocumentId, Color inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Color inValue Wanted color. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetTransmissionScatteringLength(DocumentId, Double) Sets the Transmission Scattering length. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetTransmissionScatteringLength(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16."
  },
  "api/cad/TopSolid.Cad.Design.Automating.IFeatures.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.IFeatures.html",
    "title": "Interface IFeatures | TopSolid Automation website",
    "keywords": "Interface IFeatures Gives access to feature entities. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 14, 0, 0)] public interface IFeatures Remarks This interface is available since v7.14. Methods GetDrillingCounterSinkingPrimitive(ElementId, Int32, out Real, out Real, out Real, out Boolean, out Real) Get a drilling counter sinking primitive information. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] void GetDrillingCounterSinkingPrimitive(ElementId inFeatureId, int inIndex, out Real angle, out Real coneLength, out Real diameter, out bool isOpposed, out Real position) Parameters Type Name Description ElementId inFeatureId Identifiers of the element of the primitive to analyse. System.Int32 inIndex Idex of the primitive to analyse. Real angle Angle of the counter sinking primitive. Real coneLength Cone length of the counter sinking primitive. Real diameter Diameter of the counter sinking primitive. System.Boolean isOpposed Tells wether the counter sinking primitive is opposed. Real position Position of the counter sinking primitive. Remarks This method is available since v7.14. GetDrillingHolePrimitive(ElementId, Int32, out DrillingHolePrimitiveBottomType, out Real, out Real, out Real, out Boolean, out Boolean, out Boolean, out Real) Get a drilling hole primitive information. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] void GetDrillingHolePrimitive(ElementId inFeatureId, int inIndex, out DrillingHolePrimitiveBottomType bottomType, out Real bottomAngle, out Real depth, out Real diameter, out bool isTapered, out bool isThrough, out bool isToleranced, out Real taperAngle) Parameters Type Name Description ElementId inFeatureId Identifiers of the element of the primitive to analyse. System.Int32 inIndex Idex of the primitive to analyse. DrillingHolePrimitiveBottomType bottomType Type of the drilling primitive, or None if the primitive is not a drilling hole primitive. Real bottomAngle Bottom angle of the hole primitive. Real depth Detph of the hole primitive. Real diameter Diameter of the hole primitive. System.Boolean isTapered Tells wether the hole primitive is tapered. System.Boolean isThrough Tells wether the hole primitive is through. System.Boolean isToleranced Tells wether the hole primitive is toleranced. Real taperAngle Taper angle of the hole primitive. Remarks This method is available since v7.14. GetDrillingPrimitiveCount(ElementId) Gets the number of primitives of a drilling feature entity. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] int GetDrillingPrimitiveCount(ElementId inFeatureId) Parameters Type Name Description ElementId inFeatureId Identifier of the feature to analyze. Returns Type Description System.Int32 Count of drilling primitives found. Remarks This method is available since v7.14. GetDrillingPrimitiveType(ElementId, Int32) Gets the type of a drilling feature entity. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] DrillingPrimitiveType GetDrillingPrimitiveType(ElementId inFeatureId, int inIndex) Parameters Type Name Description ElementId inFeatureId Identifier of the element of the primitive to analyse. System.Int32 inIndex Idex of the primitive to analyse. Returns Type Description DrillingPrimitiveType Type of the drilling feature, or None if the primitive is not a drilling primitive. Remarks This method is available since v7.14. GetDrillingSpotFacingPrimitive(ElementId, Int32, out Real, out Real, out Boolean, out Real) Get a drilling spot facing primitive information. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] void GetDrillingSpotFacingPrimitive(ElementId inFeatureId, int inIndex, out Real depth, out Real diameter, out bool isOpposed, out Real position) Parameters Type Name Description ElementId inFeatureId Identifiers of the element of the primitive to analyse. System.Int32 inIndex Idex of the primitive to analyse. Real depth Detph of the spot facing primitive. Real diameter Diameter of the spot facing primitive. System.Boolean isOpposed Tells wether the spot facing primitive is opposed. Real position Position of the spot facing primitive. Remarks This method is available since v7.14. GetDrillingTappedHolePrimitive(ElementId, Int32, out DrillingHolePrimitiveBottomType, out Real, out Real, out Real, out Real, out Real, out Boolean, out Boolean, out Boolean, out Real, out Real, out Real, out DrillingTappedHolePrimitiveThreadType) Get a drilling tapped hole primitive information. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] void GetDrillingTappedHolePrimitive(ElementId inFeatureId, int inIndex, out DrillingHolePrimitiveBottomType bottomType, out Real bottomAngle, out Real depth, out Real gaugeLength, out Real holeDepth, out Real holeDiameter, out bool isLeftHand, out bool isTaperedThread, out bool isThrough, out Real nominalDiameter, out Real pitch, out Real taperAngle, out DrillingTappedHolePrimitiveThreadType threadType) Parameters Type Name Description ElementId inFeatureId Identifiers of the element of the primitive to analyse. System.Int32 inIndex Idex of the primitive to analyse. DrillingHolePrimitiveBottomType bottomType Type of the drilling primitive, or None if the primitive is not a drilling hole primitive. Real bottomAngle Bottom angle of the tapped hole primitive. Real depth Detph of the tapped hole primitive. Real gaugeLength Gauge length of the tapped hole primitive. Real holeDepth Hole depth of the tapped hole primitive. Real holeDiameter Hole diameter of the tapped hole primitive. System.Boolean isLeftHand Tells wether the tapped hole primitive is left hand. System.Boolean isTaperedThread Tells wether the tapped hole primitive is tapered thread. System.Boolean isThrough Tells wether the tapped hole primitive is through. Real nominalDiameter Nominal diameter of the tapped hole primitive. Real pitch Pitch of the tapped hole primitive. Real taperAngle Taper angle of the tapped hole primitive. DrillingTappedHolePrimitiveThreadType threadType Type of the thread, or None if the primitive is not a drilling tapped hole primitive. Remarks This method is available since v7.14. GetFeatures(DocumentId) Gets the features entities that are in the features folder of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] List<ElementId> GetFeatures(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Features entities found. Remarks This method is available since v7.14. GetFeaturesFolder(DocumentId) Gets the features folder entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] ElementId GetFeaturesFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the features folder entity found. Remarks This method is available since v7.14. GetFeatureType(ElementId) Gets the type of a feature entity. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] FeatureType GetFeatureType(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description FeatureType Type of the feature, or None if the element is not a feature entity. Remarks This method is available since v7.14. IsFeaturesCreationOn(DocumentId) Tells wether the feature creation mode is on. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] bool IsFeaturesCreationOn(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document handle features. Remarks This method is available since v7.14. SetFeaturesCreationMode(DocumentId, Boolean) Sets the features creation mode of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] void SetFeaturesCreationMode(DocumentId inDocumentId, bool isOn) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to set the feature creation mode. System.Boolean isOn Tells wether the feature creation mode is on. Remarks This method is available since v7.14."
  },
  "api/cad/TopSolid.Cad.Design.Automating.IMaterials.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.IMaterials.html",
    "title": "Interface IMaterials | TopSolid Automation website",
    "keywords": "Interface IMaterials Gives access to methods to read or write in a material document. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 16, 0, 0)] public interface IMaterials Remarks This interface is available since v7.16. Methods GetAlbedoColor(DocumentId) Gets the Albado color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] Color GetAlbedoColor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description Color Remarks This method is available since v7.16. GetAlbedoTextureDocument(DocumentId) Gets the Albado texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetAlbedoTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetAmbientOcclusionFactor(DocumentId) Gets the Ambient Occlusion factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetAmbientOcclusionFactor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetAmbientOcclusionTextureDocument(DocumentId) Gets the Ambient Occlusion texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetAmbientOcclusionTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetCategory(DocumentId) Gets the material category of a material document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] MaterialCategoryType GetCategory(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description MaterialCategoryType The material category. Remarks This method is available since v7.16. GetDensity(DocumentId) Gets the material density. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetDensity(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetHatchingDocument(DocumentId) Gets the hatching document to a material document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetHatchingDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetMaterialApperanceInfo(DocumentId, Boolean, Boolean, Boolean, Boolean) Gets the material apperance information. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] void GetMaterialApperanceInfo(DocumentId inDocumentId, bool outReceiveShadows, bool outCastShadows, bool outFresnelReflection, bool outTransparentReflection) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.Boolean outReceiveShadows Tells wether the material receive shadows. System.Boolean outCastShadows Tells wether the material cast shadows. System.Boolean outFresnelReflection Tells wether the material has a frenesl reflection. System.Boolean outTransparentReflection Tells wether the material has transparent reflection. Remarks This method is available since v7.16. GetMaterialModel(DocumentId) Gets the material model of a material document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] MaterialModelType GetMaterialModel(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description MaterialModelType The material model. Remarks This method is available since v7.16. GetMetalnessFactor(DocumentId) Gets the Metalness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetMetalnessFactor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetMetalnessTextureDocument(DocumentId) Gets the Metalness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetMetalnessTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetNormalFactor(DocumentId) Gets the Normal factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetNormalFactor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetNormalTextureDocument(DocumentId) Gets the Normal texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetNormalTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetOpacityColor(DocumentId) Gets the Opacity color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] Color GetOpacityColor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description Color Remarks This method is available since v7.16. GetOpacityTextureDocument(DocumentId) Gets the Opacity texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetOpacityTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetRefractiveIndex(DocumentId) Gets the refractive index. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetRefractiveIndex(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetRotation(DocumentId) Gets the rotation. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetRotation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetRoughnessFactor(DocumentId) Gets the Roughness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetRoughnessFactor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetRoughnessTextureDocument(DocumentId) Gets the Roughness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetRoughnessTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetScale(DocumentId) Gets the scale. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetScale(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetTransmissionGlossinessFactor(DocumentId) Gets the Transmission Glossiness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetTransmissionGlossinessFactor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. GetTransmissionGlossinessTextureDocument(DocumentId) Gets the Transmission Glossiness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] DocumentId GetTransmissionGlossinessTextureDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description DocumentId Remarks This method is available since v7.16. GetTransmissionScatteringColor(DocumentId) Gets the Transmission Scattering color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] Color GetTransmissionScatteringColor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description Color Remarks This method is available since v7.16. GetTransmissionScatteringLength(DocumentId) Gets the Transmission Scattering length. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 100)] double GetTransmissionScatteringLength(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Double Remarks This method is available since v7.16. SetAlbedoColor(DocumentId, Color) Sets the Albado color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetAlbedoColor(DocumentId inDocumentId, Color inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Color inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetAlbedoTextureDocument(DocumentId, DocumentId) Sets the Albado texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetAlbedoTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetAmbientOcclusionFactor(DocumentId, Double) Sets the Ambient Occlusion factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetAmbientOcclusionFactor(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetAmbientOcclusionTextureDocument(DocumentId, DocumentId) Sets the Ambient Occlusion texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetAmbientOcclusionTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetCategory(DocumentId, MaterialCategoryType) Sets the material category of a material document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetCategory(DocumentId inDocumentId, MaterialCategoryType inMaterialCategoryType) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. MaterialCategoryType inMaterialCategoryType The material category. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetDensity(DocumentId, Double) Sets the material density. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetDensity(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetHatchingDocument(DocumentId, DocumentId) Sets the hatching document to a material document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetHatchingDocument(DocumentId inDocumentId, DocumentId inHatchingDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inHatchingDocumentId The hatching document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetMaterialApperanceInfo(DocumentId, Boolean, Boolean, Boolean, Boolean) Sets the material apperance information. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetMaterialApperanceInfo(DocumentId inDocumentId, bool inReceiveShadows, bool inCastShadows, bool inFresnelReflection, bool inTransparentReflection) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Boolean inReceiveShadows Tells wether the material receive shadows. System.Boolean inCastShadows Tells wether the material cast shadows. System.Boolean inFresnelReflection Tells wether the material has a frenesl reflection. System.Boolean inTransparentReflection Tells wether the material has transparent reflection. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetMetalnessFactor(DocumentId, Double) Sets the Metalness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetMetalnessFactor(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetMetalnessTextureDocument(DocumentId, DocumentId) Sets the Metalness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetMetalnessTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetNormalFactor(DocumentId, Double) Sets the Normal factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetNormalFactor(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetNormalTextureDocument(DocumentId, DocumentId) Sets the Normal texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetNormalTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetOpacityColor(DocumentId, Color) Sets the Opacity color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetOpacityColor(DocumentId inDocumentId, Color inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Color inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetOpacityTextureDocument(DocumentId, DocumentId) Sets the Opacity texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetOpacityTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRefractiveIndex(DocumentId, Double) Sets the refractive index. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetRefractiveIndex(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRotation(DocumentId, Double) Sets the rotation. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetRotation(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRoughnessFactor(DocumentId, Double) Sets the Roughness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetRoughnessFactor(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRoughnessTextureDocument(DocumentId, DocumentId) Sets the Roughness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetRoughnessTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetScale(DocumentId, Double) Sets the scale. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetScale(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetTransmissionGlossinessFactor(DocumentId, Double) Sets the Transmission Glossiness factor. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetTransmissionGlossinessFactor(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetTransmissionGlossinessTextureDocument(DocumentId, DocumentId) Sets the Transmission Glossiness texture document. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetTransmissionGlossinessTextureDocument(DocumentId inDocumentId, DocumentId inTextureDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inTextureDocumentId Texture document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetTransmissionScatteringColor(DocumentId, Color) Sets the Transmission Scattering color. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetTransmissionScatteringColor(DocumentId inDocumentId, Color inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Color inValue Wanted color. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetTransmissionScatteringLength(DocumentId, Double) Sets the Transmission Scattering length. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] void SetTransmissionScatteringLength(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16."
  },
  "api/cad/TopSolid.Cad.Design.Automating.IMechanisms.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.IMechanisms.html",
    "title": "Interface IMechanisms | TopSolid Automation website",
    "keywords": "Interface IMechanisms Gives access to mechanisms. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 6, 0, 0)] public interface IMechanisms Remarks This interface is available since v7.6. Methods AddRigidGroupConstituent(ElementId, ElementId) Adds a constituent to a rigid group entity. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] void AddRigidGroupConstituent(ElementId inElementId, ElementId inConstituentId) Parameters Type Name Description ElementId inElementId Identifier of the rigid group entity to modify. ElementId inConstituentId Identifier of the entity to add to the rigid group. Remarks If the entity to add was already in another rigid group, it is automatically removed from it. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. CreateCylindricalJoint(DocumentId, ElementId, ElementId, SmartAxis3D, SmartReal, SmartReal, SmartReal) Creates a cylindrical joint. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] ElementId CreateCylindricalJoint(DocumentId inDocumentId, ElementId inFirstRigidGroupId, ElementId inSecondRigidGroupId, SmartAxis3D inAxis, SmartReal inInitialDistance, SmartReal inMinimumDistance, SmartReal inMaximumDistance) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. ElementId inFirstRigidGroupId Identifier of first rigid group. ElementId inSecondRigidGroupId Identifier of second rigid group. SmartAxis3D inAxis Rotation and translation axis. SmartReal inInitialDistance Initial distance. SmartReal inMinimumDistance Minimum distance, or null if no limits. SmartReal inMaximumDistance Maximum distance, or null if no limits. Returns Type Description ElementId Identifier of the created joint entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. CreatePrismaticJoint(DocumentId, ElementId, ElementId, SmartDirection3D, SmartReal, SmartReal, SmartReal) Creates a prismatic joint. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] ElementId CreatePrismaticJoint(DocumentId inDocumentId, ElementId inFirstRigidGroupId, ElementId inSecondRigidGroupId, SmartDirection3D inTranslationDirection, SmartReal inInitialDistance, SmartReal inMinimumDistance, SmartReal inMaximumDistance) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. ElementId inFirstRigidGroupId Identifier of first rigid group. ElementId inSecondRigidGroupId Identifier of second rigid group. SmartDirection3D inTranslationDirection Translation direction. SmartReal inInitialDistance Initial distance. SmartReal inMinimumDistance Minimum distance, or null if no limits. SmartReal inMaximumDistance Maximum distance, or null if no limits. Returns Type Description ElementId Identifier of the created joint entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. CreateRevoluteJoint(DocumentId, ElementId, ElementId, SmartAxis3D, SmartPoint3D, Boolean, SmartReal, SmartReal, SmartReal) Creates a revolute joint. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] ElementId CreateRevoluteJoint(DocumentId inDocumentId, ElementId inFirstRigidGroupId, ElementId inSecondRigidGroupId, SmartAxis3D inRotationAxis, SmartPoint3D inCenterPoint, bool inIsMultiTurns, SmartReal inInitialAngle, SmartReal inMinimumAngle, SmartReal inMaximumAngle) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. ElementId inFirstRigidGroupId Identifier of first rigid group. ElementId inSecondRigidGroupId Identifier of second rigid group. SmartAxis3D inRotationAxis Rotation axis. SmartPoint3D inCenterPoint Center point, or null if none. System.Boolean inIsMultiTurns Whether the joint angle is multi-turns. SmartReal inInitialAngle Initial angle. SmartReal inMinimumAngle Minimum angle, or null if no limits. SmartReal inMaximumAngle Maximum angle, or null if no limits. Returns Type Description ElementId Identifier of the created joint entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. CreateRigidGroup(DocumentId, List<ElementId>, Boolean) Creates a rigid group entity in a specified document. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] ElementId CreateRigidGroup(DocumentId inDocumentId, List<ElementId> inConstituentIds, bool inIsInvalidWhenEmpty) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Collections.Generic.List < ElementId > inConstituentIds Identifiers of the rigid group constituent entities. System.Boolean inIsInvalidWhenEmpty Whether the rigid group is invalid when it is empty. Returns Type Description ElementId Identifier of the created rigid group entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. CreateSphericalJoint(DocumentId, ElementId, ElementId, SmartPoint3D, SmartDirection3D, SmartDirection3D, SmartReal) Creates a spherical joint. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] ElementId CreateSphericalJoint(DocumentId inDocumentId, ElementId inFirstRigidGroupId, ElementId inSecondRigidGroupId, SmartPoint3D inCenterPoint, SmartDirection3D inFirstDirection, SmartDirection3D inSecondDirection, SmartReal inMaximumAngle) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. ElementId inFirstRigidGroupId Identifier of first rigid group. ElementId inSecondRigidGroupId Identifier of second rigid group. SmartPoint3D inCenterPoint Center point. SmartDirection3D inFirstDirection First rigid group rotation axis direction, or null if no limits. SmartDirection3D inSecondDirection Second rigid group rotation axis direction, or null if no limits. SmartReal inMaximumAngle Maximum tilt angle between directions, or null if no limits. Returns Type Description ElementId Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. GetConfigurations(DocumentId) Gets the configuration entities that are in the configurations folder of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetConfigurations(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Configuration entities found. Remarks This method is available since v7.6. GetCylindricalJoint(ElementId, out ElementId, out ElementId, out SmartAxis3D, out SmartReal, out SmartReal, out SmartReal) Gets a cylindrical joint. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void GetCylindricalJoint(ElementId inElementId, out ElementId outFirstRigidGroupId, out ElementId outSecondRigidGroupId, out SmartAxis3D outAxis, out SmartReal outInitialDistance, out SmartReal outMinimumDistance, out SmartReal outMaximumDistance) Parameters Type Name Description ElementId inElementId Identifier of the joint to analyze. ElementId outFirstRigidGroupId Identifier of first rigid group. ElementId outSecondRigidGroupId Identifier of second rigid group. SmartAxis3D outAxis Rotation and translation axis. SmartReal outInitialDistance Initial distance. SmartReal outMinimumDistance Minimum distance, or null if no limits. SmartReal outMaximumDistance Maximum distance, or null if no limits. Remarks This method is available since v7.6. GetDesignConfiguration(DocumentId) Gets the design configuration entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetDesignConfiguration(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the design configuration entity found. Remarks This method is available since v7.6. GetForces(DocumentId) Gets the forces entities that are in the forces folder of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] List<ElementId> GetForces(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Forces entities found. Remarks This method is available since v7.10. GetForcesFolder(DocumentId) Gets the forces folder entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetForcesFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the forces folder entity found. Remarks This method is available since v7.10. GetGroundRigidGroup(DocumentId) Gets the ground rigid group entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetGroundRigidGroup(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the ground rigid group entity found. Remarks This method is available since v7.6. GetJointRigidGroups(ElementId) Gets the rigid groups involved in a joint. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetJointRigidGroups(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the joint to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Identifiers of joint rigid group entities. Remarks This method is available since v7.6. GetJoints(DocumentId) Gets the joint entities that are in the joints folder of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetJoints(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Joints entities found. Remarks This method is available since v7.6. GetJointsFolder(DocumentId) Gets the joints folder entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetJointsFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the joints folder entity found. Remarks This method is available since v7.10. GetJointType(ElementId) Gets the type of a joint entity. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] JointType GetJointType(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description JointType Type of the joint, or None if the element is not a joint entity. Remarks This method is available since v7.6. GetMechanismStage(DocumentId) Gets the mechanism stage operation of an assembly document. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] ElementId GetMechanismStage(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the mechanism stage operation found, or Empty if the assembly is not a mechanism. Remarks This method is available since v7.8. GetPrismaticJoint(ElementId, out ElementId, out ElementId, out SmartDirection3D, out SmartReal, out SmartReal, out SmartReal) Gets a prismatic joint. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void GetPrismaticJoint(ElementId inElementId, out ElementId outFirstRigidGroupId, out ElementId outSecondRigidGroupId, out SmartDirection3D outTranslationDirection, out SmartReal outInitialDistance, out SmartReal outMinimumDistance, out SmartReal outMaximumDistance) Parameters Type Name Description ElementId inElementId Identifier of the joint to analyze. ElementId outFirstRigidGroupId Identifier of first rigid group. ElementId outSecondRigidGroupId Identifier of second rigid group. SmartDirection3D outTranslationDirection Translation direction. SmartReal outInitialDistance Initial distance. SmartReal outMinimumDistance Minimum distance, or null if no limits. SmartReal outMaximumDistance Maximum distance, or null if no limits. Remarks This method is available since v7.6. GetRevoluteJoint(ElementId, out ElementId, out ElementId, out SmartAxis3D, out SmartPoint3D, out Boolean, out SmartReal, out SmartReal, out SmartReal) Gets a revolute joint. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void GetRevoluteJoint(ElementId inElementId, out ElementId outFirstRigidGroupId, out ElementId outSecondRigidGroupId, out SmartAxis3D outRotationAxis, out SmartPoint3D outCenterPoint, out bool outIsMultiTurns, out SmartReal outInitialAngle, out SmartReal outMinimumAngle, out SmartReal outMaximumAngle) Parameters Type Name Description ElementId inElementId Identifier of the joint to analyze. ElementId outFirstRigidGroupId Identifier of first rigid group. ElementId outSecondRigidGroupId Identifier of second rigid group. SmartAxis3D outRotationAxis Rotation axis. SmartPoint3D outCenterPoint Center point, or null if none. System.Boolean outIsMultiTurns Whether the joint angle is multi-turns. SmartReal outInitialAngle Initial angle. SmartReal outMinimumAngle Minimum angle, or null if no limits. SmartReal outMaximumAngle Maximum angle, or null if no limits. Remarks This method is available since v7.6. GetRigidGroupConstituents(ElementId) Gets the constituents of a rigid group entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] [OperationContract] List<ElementId> GetRigidGroupConstituents(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the rigid group entity to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Contituent elements found. Remarks This method is available since v7.8. GetRigidGroups(DocumentId) Gets the rigid group entities that are in the rigid groups folder of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetRigidGroups(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Rigid group entities found. Remarks This method is available since v7.6. GetSphericalJoint(ElementId, out ElementId, out ElementId, out SmartPoint3D, out SmartDirection3D, out SmartDirection3D, out SmartReal) Gets a spherical joint. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] void GetSphericalJoint(ElementId inElementId, out ElementId outFirstRigidGroupId, out ElementId outSecondRigidGroupId, out SmartPoint3D outCenterPoint, out SmartDirection3D outFirstDirection, out SmartDirection3D outSecondDirection, out SmartReal outMaximumAngle) Parameters Type Name Description ElementId inElementId Identifier of the joint to analyze. ElementId outFirstRigidGroupId Identifier of first rigid group. ElementId outSecondRigidGroupId Identifier of second rigid group. SmartPoint3D outCenterPoint Center point. SmartDirection3D outFirstDirection First rigid group rotation axis direction, or null if no limits. SmartDirection3D outSecondDirection Second rigid group rotation axis direction, or null if no limits. SmartReal outMaximumAngle Maximum tilt angle between directions, or null if no limits. Remarks This method is available since v7.8. IsMechanism(DocumentId) Tells whether an assembly document is a mechanism. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] bool IsMechanism(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The assembly document is a mechanism. Remarks This method is available since v7.6. MakeMechanism(DocumentId, Boolean, Boolean, Boolean) Converts a rigid assembly document into an articulated assembly document. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] void MakeMechanism(DocumentId inDocumentId, bool inInheritsRigidGroups, bool inInheritsJoints, bool inInheritsForces) Parameters Type Name Description DocumentId inDocumentId Identifier of the assembly document to modify. System.Boolean inInheritsRigidGroups Inherits rigid groups. System.Boolean inInheritsJoints Inherits joints. System.Boolean inInheritsForces Inherits forces. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. RemoveRigidGroupConstituent(ElementId, ElementId) Removes a constituent from a rigid group entity. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] void RemoveRigidGroupConstituent(ElementId inElementId, ElementId inConstituentId) Parameters Type Name Description ElementId inElementId Identifier of the rigid group entity to modify. ElementId inConstituentId Identifier of the entity to removre from the rigid group. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. UnmakeMechanism(DocumentId) Converts an articulated assembly document into a rigid assembly document. Declaration [OperationContract] [AvailableSinceVersion(7, 8, 0, 0)] void UnmakeMechanism(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the assembly document to modify. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8."
  },
  "api/cad/TopSolid.Cad.Design.Automating.IParts.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.IParts.html",
    "title": "Interface IParts | TopSolid Automation website",
    "keywords": "Interface IParts Gives access to parts. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 6, 0, 0)] public interface IParts Remarks This interface is available since v7.6. Methods CreateDrillingOperation(DocumentId, SmartShape, SmartFrame3D, List<DrillingPrimitive>, Boolean) Creates a drilling operation in a document. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 0, 0)] void CreateDrillingOperation(DocumentId inDocumentId, SmartShape inShape, SmartFrame3D inFrame, List<DrillingPrimitive> inDrillingPrimitives, bool inIsInoperative) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartShape inShape Identifier of the shape to drill. SmartFrame3D inFrame Frame of the drilling. System.Collections.Generic.List < DrillingPrimitive > inDrillingPrimitives Primitives of the drilling. System.Boolean inIsInoperative Tells wether the operation is Inoperative Remarks This method is available since v7.14.000.00. CreateDrillingOperationWithProcess(DocumentId, SmartShape, SmartFrame3D, List<DrillingPrimitive>, Boolean, PdmObjectId, Int32) Creates a drilling operation using a process in a document. Declaration [OperationContract] [AvailableSinceVersion(7, 14, 180, 0)] void CreateDrillingOperationWithProcess(DocumentId inDocumentId, SmartShape inShape, SmartFrame3D inFrame, List<DrillingPrimitive> inDrillingPrimitives, bool inIsInoperative, PdmObjectId inProcessObjectId, int inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartShape inShape Identifier of the shape to drill. SmartFrame3D inFrame Frame of the drilling. System.Collections.Generic.List < DrillingPrimitive > inDrillingPrimitives Primitives of the drilling. System.Boolean inIsInoperative Tells wether the operation is Inoperative PdmObjectId inProcessObjectId PDM object identifier of the machining process definition document of the face. System.Int32 inValue Machining process enumeration value, if the face has a machining process. Remarks This method is available since v7.14.180.00. CreateMachiningProcessOperation(PdmObjectId, Int32, List<ElementItemId>) Sets the faces machining process. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 0, 0)] ElementId CreateMachiningProcessOperation(PdmObjectId inObjectId, int inValue, List<ElementItemId> inFaceIds) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier of the machining process definition document of the face. System.Int32 inValue Machining process enumeration value, if the face has a machining process. System.Collections.Generic.List < ElementItemId > inFaceIds Identifier of the face to set attribute. Returns Type Description ElementId Remarks This method is available since v7.13. GetCenterOfMassPropertyManagement(DocumentId, out Boolean, out SmartPoint3D) Gets the center of mass property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void GetCenterOfMassPropertyManagement(DocumentId inDocumentId, out bool outIsCenterOfMassManaged, out SmartPoint3D outManualCenterOfMass) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean outIsCenterOfMassManaged Whether the center of mass is managed. True for automatic or manual, false for not managed. SmartPoint3D outManualCenterOfMass Manual center of mass, or null if no manual center of mass. Remarks This method is available since v7.13.300.220. GetCoating(DocumentId) Gets the coating of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 301, 40)] DocumentId GetCoating(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part document to analyze. Returns Type Description DocumentId Coating document identifier, or empty if the part does not have a coating. Remarks This method is available since v7.6.301.40. GetEnclosingBoxFrame(DocumentId) Gets the enclosing box frame entity of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetEnclosingBoxFrame(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. Returns Type Description ElementId Identifier of the enclosing box frame entity found, or empty if not managed. Remarks This method is available since v7.10. GetEnclosingBoxManagement(DocumentId, out EnclosingBoxManagementType, out SmartFrame3D, out SmartFrame3D, out SmartReal, out SmartReal, out SmartReal) Gets the enclosing box management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void GetEnclosingBoxManagement(DocumentId inDocumentId, out EnclosingBoxManagementType outType, out SmartFrame3D outAlignmentFrame, out SmartFrame3D outBoxFrame, out SmartReal outBoxXSize, out SmartReal outBoxYSize, out SmartReal outBoxZSize) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. EnclosingBoxManagementType outType Type of management. SmartFrame3D outAlignmentFrame Alignment frame, or null if not of type Aligned . SmartFrame3D outBoxFrame Enclosing box frame, or null if not of type Manual . SmartReal outBoxXSize Enclosing box size in X direction, or null if not of type Manual . SmartReal outBoxYSize Enclosing box size in Y direction, or null if not of type Manual . SmartReal outBoxZSize Enclosing box size in Z direction, or null if not of type Manual . Remarks This method is available since v7.10. GetEnclosingBoxParameters(DocumentId, out ElementId, out ElementId, out ElementId) Gets the enclosing box parameters of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void GetEnclosingBoxParameters(DocumentId inDocumentId, out ElementId outBoxXSize, out ElementId outBoxYSize, out ElementId outBoxZSize) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. ElementId outBoxXSize Enclosing box size in X direction real parameter entity identifier, or empty if not managed. ElementId outBoxYSize Enclosing box size in Y direction real parameter entity identifier, or empty if not managed. ElementId outBoxZSize Enclosing box size in Z direction real parameter entity identifier, or empty if not managed. Remarks This method is available since v7.10. GetEnclosingCylinderAxis(DocumentId) Gets the enclosing cylinder axis entity of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetEnclosingCylinderAxis(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. Returns Type Description ElementId Identifier of the enclosing cylinder axis entity found, or empty if not managed. Remarks This method is available since v7.10. GetEnclosingCylinderCenterPoint(DocumentId) Gets the enclosing cylinder center point entity of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetEnclosingCylinderCenterPoint(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. Returns Type Description ElementId Identifier of the enclosing cylinder center point entity found, or empty if not managed. Remarks This method is available since v7.10. GetEnclosingCylinderManagement(DocumentId, out EnclosingCylinderManagementType, out SmartAxis3D, out SmartPoint3D, out SmartReal, out SmartReal) Gets the enclosing cylinder management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void GetEnclosingCylinderManagement(DocumentId inDocumentId, out EnclosingCylinderManagementType outType, out SmartAxis3D outCylinderAxis, out SmartPoint3D outCenteringPoint, out SmartReal outCylinderDiameter, out SmartReal outCylinderLength) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. EnclosingCylinderManagementType outType Type of management. SmartAxis3D outCylinderAxis Enclosing cylinder axis, or null if not of type Axial or Manual . SmartPoint3D outCenteringPoint Centering point defining the enclosing cylinder center once projected on its axis, or null if not of type Manual . SmartReal outCylinderDiameter Enclosing cylinder diameter, or null if not of type Manual . SmartReal outCylinderLength Enclosing cylinder length, or null if not of type Manual . Remarks This method is available since v7.10. GetEnclosingCylinderParameters(DocumentId, out ElementId, out ElementId) Gets the enclosing cylinder parameters of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void GetEnclosingCylinderParameters(DocumentId inDocumentId, out ElementId outCylinderDiameter, out ElementId outCylinderLength) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. ElementId outCylinderDiameter Enclosing cylinder diameter real parameter entity identifier, or empty if not managed. ElementId outCylinderLength Enclosing cylinder length real parameter entity identifier, or empty if not managed. Remarks This method is available since v7.10. GetFinishing(DocumentId) Gets the finishing of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] DocumentId GetFinishing(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part document to analyze. Returns Type Description DocumentId Finishing document identifier, or empty if the part does not have a finishing. Remarks This method is available since v7.12. GetInertiaPropertyManagement(DocumentId, out Boolean, out SmartFrame3D, out SmartReal, out SmartReal, out SmartReal) Gets the moments of inertia property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void GetInertiaPropertyManagement(DocumentId inDocumentId, out bool outIsInertiaManaged, out SmartFrame3D outManualFrame, out SmartReal outManualXMoment, out SmartReal outManualYMoment, out SmartReal outManualZMoment) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean outIsInertiaManaged Whether the moments of inertia is managed. True for automatic or manual, false for not managed. SmartFrame3D outManualFrame Manual frame of moments of inertia, or null if no manual frame of moments of inertia. SmartReal outManualXMoment Manual X moment of inertia, or null if no manual X moment of inertia. SmartReal outManualYMoment Manual Y moment of inertia, or null if no manual Y moment of inertia. SmartReal outManualZMoment Manual Z moment of inertia, or null if no manual Z moment of inertia. Remarks This method is available since v7.13.300.220. GetMassPropertyManagement(DocumentId, out Boolean, out SmartReal) Gets the mass property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void GetMassPropertyManagement(DocumentId inDocumentId, out bool outIsMassManaged, out SmartReal outManualMass) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean outIsMassManaged Whether the mass is managed. True for automatic or manual, false for not managed. SmartReal outManualMass Manual mass, or null if no manual mass. Remarks This method is available since v7.13.300.220. GetMaterial(DocumentId) Gets the material of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 301, 40)] DocumentId GetMaterial(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part document to analyze. Returns Type Description DocumentId Material document identifier, or empty if the material of the part is not defined. Remarks This method is available since v7.6.301.40. GetSurfaceAreaPropertyManagement(DocumentId, out Boolean, out SmartReal) Gets the surface area property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void GetSurfaceAreaPropertyManagement(DocumentId inDocumentId, out bool outIsSurfaceManaged, out SmartReal outManualSurfaceArea) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean outIsSurfaceManaged Whether the surface area is managed. True for automatic or manual, false for not managed. SmartReal outManualSurfaceArea Manual surface area, or null if no manual surface area. Remarks This method is available since v7.13.300.220. GetVolumePropertyManagement(DocumentId, out Boolean, out SmartReal) Gets the volume property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void GetVolumePropertyManagement(DocumentId inDocumentId, out bool outIsVolumeManaged, out SmartReal outManualVolume) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean outIsVolumeManaged Whether the volume is managed. True for automatic or manual, false for not managed. SmartReal outManualVolume Manual volume, or null if no manual volume. Remarks This method is available since v7.13.300.220. IsCoatingDerived(DocumentId) Tells whether the coating of a derived part is derived from the base part. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 301, 40)] bool IsCoatingDerived(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part document to analyze. Returns Type Description System.Boolean The coating of the derived part is derived from the base part. Remarks This method is available since v7.6.301.40. IsDerivedPart(DocumentId) Tells whether a document is a derived part document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 301, 40)] bool IsDerivedPart(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is a derived part document. Remarks This method is available since v7.6.301.40. IsFinishingDerived(DocumentId) Tells whether the finishing of a derived part is derived from the base part. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] bool IsFinishingDerived(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part document to analyze. Returns Type Description System.Boolean The finishing of the derived part is derived from the base part. Remarks This method is available since v7.12. IsMaterialDerived(DocumentId) Tells whether the material of a derived part is derived from the base part. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 301, 40)] bool IsMaterialDerived(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part document to analyze. Returns Type Description System.Boolean The material of the derived part is derived from the base part. Remarks This method is available since v7.6.301.40. IsPart(DocumentId) Tells whether a document is a part document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] bool IsPart(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is a part document. Remarks This method is available since v7.6. IsPhysicalPropertiesManagementRefreshAuto(DocumentId) Tells whether the physical property management of a part is refresh auto. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] bool IsPhysicalPropertiesManagementRefreshAuto(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. Returns Type Description System.Boolean The physical property management is refresh auto. Remarks This method is available since v7.13.300.220. SetCenterOfMassPropertyManagement(DocumentId, Boolean, SmartPoint3D) Sets the center of mass property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetCenterOfMassPropertyManagement(DocumentId inDocumentId, bool inIsCenterOfMassManaged, SmartPoint3D inManualCenterOfMass) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean inIsCenterOfMassManaged Whether the center of mass is managed. True for automatic or manual, false for not managed. SmartPoint3D inManualCenterOfMass Manual center of mass, or null if no manual center of mass. Remarks This method is available since v7.13.300.220. SetCoating(DocumentId, DocumentId) Sets the coating of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 301, 40)] void SetCoating(DocumentId inDocumentId, DocumentId inCoatingDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part document to modify. DocumentId inCoatingDocumentId Coating document identifier, or empty if the part does not have a coating. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6.301.40. SetEnclosingBoxManagement(DocumentId, EnclosingBoxManagementType, SmartFrame3D, SmartFrame3D, SmartReal, SmartReal, SmartReal) Sets the enclosing box management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void SetEnclosingBoxManagement(DocumentId inDocumentId, EnclosingBoxManagementType inType, SmartFrame3D inAlignmentFrame, SmartFrame3D inBoxFrame, SmartReal inBoxXSize, SmartReal inBoxYSize, SmartReal inBoxZSize) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to modify. EnclosingBoxManagementType inType Type of management. SmartFrame3D inAlignmentFrame Alignment frame, or null if not of type Aligned . SmartFrame3D inBoxFrame Enclosing box frame, or null if not of type Manual . SmartReal inBoxXSize Enclosing box size in X direction, or null if not of type Manual . SmartReal inBoxYSize Enclosing box size in Y direction, or null if not of type Manual . SmartReal inBoxZSize Enclosing box size in Z direction, or null if not of type Manual . Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. SetEnclosingCylinderManagement(DocumentId, EnclosingCylinderManagementType, SmartAxis3D, SmartPoint3D, SmartReal, SmartReal) Sets the enclosing cylinder management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void SetEnclosingCylinderManagement(DocumentId inDocumentId, EnclosingCylinderManagementType inType, SmartAxis3D inCylinderAxis, SmartPoint3D inCenteringPoint, SmartReal inCylinderDiameter, SmartReal inCylinderLength) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to modify. EnclosingCylinderManagementType inType Type of management. SmartAxis3D inCylinderAxis Enclosing cylinder axis, or null if not of type Axial or Manual . SmartPoint3D inCenteringPoint Centering point defining the enclosing cylinder center once projected on its axis, or null if not of type Manual . SmartReal inCylinderDiameter Enclosing cylinder diameter, or null if not of type Manual . SmartReal inCylinderLength Enclosing cylinder length, or null if not of type Manual . Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. SetFinishing(DocumentId, DocumentId) Sets the finishing of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 12, 0, 0)] void SetFinishing(DocumentId inDocumentId, DocumentId inFinishingDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part document to modify. DocumentId inFinishingDocumentId Finishing document identifier, or empty if the part does not have a finishing. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. SetInertiaPropertyManagement(DocumentId, Boolean, SmartFrame3D, SmartReal, SmartReal, SmartReal) Sets the moments of inertia property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetInertiaPropertyManagement(DocumentId inDocumentId, bool inIsInertiaManaged, SmartFrame3D inManualFrame, SmartReal inManualXMoment, SmartReal inManualYMoment, SmartReal inManualZMoment) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean inIsInertiaManaged Whether the moments of inertia is managed. True for automatic or manual, false for not managed. SmartFrame3D inManualFrame Manual frame of moments of inertia, or null if no manual frame of moments of inertia. SmartReal inManualXMoment Manual X moment of inertia, or null if no manual X moment of inertia. SmartReal inManualYMoment Manual Y moment of inertia, or null if no manual Y moment of inertia. SmartReal inManualZMoment Manual Z moment of inertia, or null if no manual Z moment of inertia. Remarks This method is available since v7.13.300.220. SetMassPropertyManagement(DocumentId, Boolean, SmartReal) Sets the mass property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetMassPropertyManagement(DocumentId inDocumentId, bool inIsMassManaged, SmartReal inManualMass) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean inIsMassManaged Whether the mass is managed. True for automatic or manual, false for not managed. SmartReal inManualMass Manual mass, or null if no manual mass. Remarks This method is available since v7.13.300.220. SetMaterial(DocumentId, DocumentId) Sets the material of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 301, 40)] void SetMaterial(DocumentId inDocumentId, DocumentId inMaterialDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part document to modify. DocumentId inMaterialDocumentId Material document identifier, or empty if the material of the part is not defined. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6.301.40. SetPhysicalPropertiesManagementRefreshAuto(DocumentId, Boolean) Sets the refresh auto of the physical property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetPhysicalPropertiesManagementRefreshAuto(DocumentId inDocumentId, bool inIsRefreshAuto) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean inIsRefreshAuto Tells whether the physical property management of a part is refresh auto. Remarks This method is available since v7.13.300.220. SetSurfaceAreaPropertyManagement(DocumentId, Boolean, SmartReal) Sets the surface area property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetSurfaceAreaPropertyManagement(DocumentId inDocumentId, bool inIsSurfaceManaged, SmartReal inManualSurfaceArea) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean inIsSurfaceManaged Whether the surface area is managed. True for automatic or manual, false for not managed. SmartReal inManualSurfaceArea Manual surface area, or null if no manual surface area. Remarks This method is available since v7.13.300.220. SetVolumePropertyManagement(DocumentId, Boolean, SmartReal) Sets the volume property management of a part. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 300, 220)] void SetVolumePropertyManagement(DocumentId inDocumentId, bool inIsVolumeManaged, SmartReal inManualVolume) Parameters Type Name Description DocumentId inDocumentId Identifier of part document to analyze. System.Boolean inIsVolumeManaged Whether the volume is managed. True for automatic or manual, false for not managed. SmartReal inManualVolume Manual volume, or null if no manual volume. Remarks This method is available since v7.13.300.220."
  },
  "api/cad/TopSolid.Cad.Design.Automating.IRepresentations.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.IRepresentations.html",
    "title": "Interface IRepresentations | TopSolid Automation website",
    "keywords": "Interface IRepresentations Gives access to representations. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 7, 201, 100)] public interface IRepresentations Remarks This interface is available since v7.7.201.100. Methods AddRepresentationConstituent(ElementId, ElementId) Adds a constituent to a representation entity. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] void AddRepresentationConstituent(ElementId inElementId, ElementId inConstituentId) Parameters Type Name Description ElementId inElementId Identifier of the representation entity to modify. ElementId inConstituentId Identifier of the entity to add to the representation. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. CreateRepresentation(DocumentId) Creates a representation entity in a specified document. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 300, 120)] ElementId CreateRepresentation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Returns Type Description ElementId Identifier of the created representation entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10.300.120. CreateSimplifiedRepresentation(DocumentId) Creates the simplified representation entity in a specified document. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] ElementId CreateSimplifiedRepresentation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Returns Type Description ElementId Identifier of the created simplified representation entity. Remarks If the document already has a simplified representation, its identifier is returned and no new representation is created. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. GetCurrentRepresentation(DocumentId) Gets the current representation entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] ElementId GetCurrentRepresentation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the current representation entity found. Remarks This method is available since v7.7.201.100. GetDesignRepresentation(DocumentId) Gets the design representation entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] ElementId GetDesignRepresentation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the design representation entity found. Remarks This method is available since v7.7.201.100. GetDetailedRepresentation(DocumentId) Gets the detailed representation entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] ElementId GetDetailedRepresentation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the detailed representation entity found. Remarks This method is available since v7.7.201.100. GetRepresentationConstituents(ElementId) Gets the constituents of a representation entity. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] List<ElementId> GetRepresentationConstituents(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the representation entity to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Constituent elements found. Remarks This method is available since v7.7.201.100. GetRepresentations(DocumentId) Gets the representations entities that are in the representations folder of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] List<ElementId> GetRepresentations(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Representations entities found. Remarks This method is available since v7.7.201.100. GetSimplifiedRepresentation(DocumentId) Gets the simplified representation entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] ElementId GetSimplifiedRepresentation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the simplified representation entity found, or Empty if not found. Remarks This method is available since v7.7.201.100. RemoveRepresentationConstituent(ElementId, ElementId) Removes a constituent from a representation entity. Declaration [OperationContract] [AvailableSinceVersion(7, 7, 201, 100)] void RemoveRepresentationConstituent(ElementId inElementId, ElementId inConstituentId) Parameters Type Name Description ElementId inElementId Identifier of the representation entity to modify. ElementId inConstituentId Identifier of the entity to remove from the representation. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. SetCurrentRepresentation(ElementId) Sets the current representation entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void SetCurrentRepresentation(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the representation entity to become current. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10."
  },
  "api/cad/TopSolid.Cad.Design.Automating.ISimulations.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.ISimulations.html",
    "title": "Interface ISimulations | TopSolid Automation website",
    "keywords": "Interface ISimulations Gives access to simulations. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 6, 0, 0)] public interface ISimulations Remarks This interface is available since v7.6. Methods CreateForcesDrivingTask(DocumentId, ForceDrivingInterpolationType, List<SmartReal>, List<ElementId>, List<List<SmartReal>>) Creates a forces driving task in a specified document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateForcesDrivingTask(DocumentId inDocumentId, ForceDrivingInterpolationType inInterpolationType, List<SmartReal> inTimes, List<ElementId> inForceIds, List<List<SmartReal>> inValues) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. ForceDrivingInterpolationType inInterpolationType Interpolation type. System.Collections.Generic.List < SmartReal > inTimes Times. System.Collections.Generic.List < ElementId > inForceIds Identifiers of forces to drive. System.Collections.Generic.List < System.Collections.Generic.List < SmartReal >> inValues Forces driving values. Returns Type Description ElementId Identifier of the created task. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateGripChangeTask(DocumentId, Boolean, ElementId, List<ElementId>) Creates a grip change task in a specified document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateGripChangeTask(DocumentId inDocumentId, bool inIsGripping, ElementId inGrippingRigidGroupId, List<ElementId> inRigidGroupIds) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Boolean inIsGripping Whether the task is gripping, or otherwise dropping. ElementId inGrippingRigidGroupId Identifier of gripping rigid group. System.Collections.Generic.List < ElementId > inRigidGroupIds Identifiers of rigid groups that are gripped or dropped. Returns Type Description ElementId Identifier of the created task. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateJointsDrivingTask(DocumentId, JointDrivingType, JointDrivingInterpolationType, List<SmartReal>, List<ElementId>, List<List<SmartReal>>) Creates a joints driving task in a specified document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateJointsDrivingTask(DocumentId inDocumentId, JointDrivingType inType, JointDrivingInterpolationType inInterpolationType, List<SmartReal> inTimes, List<ElementId> inJointIds, List<List<SmartReal>> inValues) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. JointDrivingType inType Driving type. JointDrivingInterpolationType inInterpolationType Interpolation type. System.Collections.Generic.List < SmartReal > inTimes Times. System.Collections.Generic.List < ElementId > inJointIds Identifiers of joints to drive. System.Collections.Generic.List < System.Collections.Generic.List < SmartReal >> inValues Joints driving values. Returns Type Description ElementId Identifier of the created task. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateKinematicsSimulation(DocumentId, ElementId, ElementId, SmartInteger, SmartInteger, Boolean) Creates a kinematics simutation operation in a specified document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateKinematicsSimulation(DocumentId inDocumentId, ElementId inStartConfigurationId, ElementId inScenarioId, SmartInteger inPositionsPerSecond, SmartInteger inStepsPerPosition, bool inIsRefreshAuto) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. ElementId inStartConfigurationId Identifier of start configuration. ElementId inScenarioId Identifier of scenario. SmartInteger inPositionsPerSecond Number of positions per second. SmartInteger inStepsPerPosition Number of computed steps per position. System.Boolean inIsRefreshAuto Whether refresh is automatic. Returns Type Description ElementId Identifier of the created simulation entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateRigidGroupDrivingTask(DocumentId, RigidGroupDrivingType, ElementId, SmartFrame3D, List<SmartReal>, List<SmartReal>, List<SmartReal>, List<SmartReal>, List<SmartReal>, List<SmartReal>, List<SmartReal>, List<Boolean>) Creates a rigid group driving task in a specified document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateRigidGroupDrivingTask(DocumentId inDocumentId, RigidGroupDrivingType inType, ElementId inRigidGroupId, SmartFrame3D inDrivingFrame, List<SmartReal> inTimes, List<SmartReal> inRotationsX, List<SmartReal> inRotationsY, List<SmartReal> inRotationsZ, List<SmartReal> inTranslationsX, List<SmartReal> inTranslationsY, List<SmartReal> inTranslationsZ, List<bool> inIsCirculars) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. RigidGroupDrivingType inType Driving type. ElementId inRigidGroupId Identifier of definition of rigid group to drive. SmartFrame3D inDrivingFrame Driving frame. System.Collections.Generic.List < SmartReal > inTimes Times. System.Collections.Generic.List < SmartReal > inRotationsX Rotations X component. System.Collections.Generic.List < SmartReal > inRotationsY Rotations Y component. System.Collections.Generic.List < SmartReal > inRotationsZ Rotations Z component. System.Collections.Generic.List < SmartReal > inTranslationsX Translations X component. System.Collections.Generic.List < SmartReal > inTranslationsY Translations Y component. System.Collections.Generic.List < SmartReal > inTranslationsZ Translations Z component. System.Collections.Generic.List < System.Boolean > inIsCirculars Whether to use circular interpolation. Returns Type Description ElementId Identifier of the created task. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateScenario(DocumentId, List<Byte>, List<String>, List<ElementId>, List<Boolean>, List<SmartReal>, List<Byte>) Creates a scenario in a specified document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateScenario(DocumentId inDocumentId, List<byte> inTrackIds, List<string> inTrackNames, List<ElementId> inTaskIds, List<bool> inTaskIsActives, List<SmartReal> inTaskStartTimes, List<byte> inTaskTrackIds) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Collections.Generic.List < System.Byte > inTrackIds Tracks identifiers. System.Collections.Generic.List < System.String > inTrackNames Tracks names. System.Collections.Generic.List < ElementId > inTaskIds Tasks identifiers. System.Collections.Generic.List < System.Boolean > inTaskIsActives Whether the tasks are active. System.Collections.Generic.List < SmartReal > inTaskStartTimes Tasks start times. System.Collections.Generic.List < System.Byte > inTaskTrackIds Tasks tracks identifiers. Returns Type Description ElementId Identifier of the created scenario. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateVisibilityChangeTask(DocumentId, Boolean, List<ElementId>) Creates a visibility change task in a specified document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateVisibilityChangeTask(DocumentId inDocumentId, bool inIsHiding, List<ElementId> inRigidGroupIds) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Boolean inIsHiding Whether the task is hiding, or otherwise showing. System.Collections.Generic.List < ElementId > inRigidGroupIds Identifiers of rigid groups that are changing. Returns Type Description ElementId Identifier of the created task. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. GetCurrentSimulation(DocumentId) Gets the current simulation entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetCurrentSimulation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the current simulation entity found, or Empty for none. Remarks This method is available since v7.6. GetForcesDrivingTask(ElementId, out ForceDrivingInterpolationType, out List<SmartReal>, out List<ElementId>, out List<List<SmartReal>>) Gets a forces driving task. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void GetForcesDrivingTask(ElementId inElementId, out ForceDrivingInterpolationType outInterpolationType, out List<SmartReal> outTimes, out List<ElementId> outForceIds, out List<List<SmartReal>> outValues) Parameters Type Name Description ElementId inElementId Identifier of the task to analyze. ForceDrivingInterpolationType outInterpolationType Interpolation type. System.Collections.Generic.List < SmartReal > outTimes Times. System.Collections.Generic.List < ElementId > outForceIds Identifiers of forces to drive. System.Collections.Generic.List < System.Collections.Generic.List < SmartReal >> outValues Forces driving values. Remarks This method is available since v7.6. GetGripChangeTask(ElementId, out Boolean, out ElementId, out List<ElementId>) Gets a grip change task. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void GetGripChangeTask(ElementId inElementId, out bool outIsGripping, out ElementId outGrippingRigidGroupId, out List<ElementId> outRigidGroupIds) Parameters Type Name Description ElementId inElementId Identifier of the task to analyze. System.Boolean outIsGripping Whether the task is gripping, or otherwise dropping. ElementId outGrippingRigidGroupId Identifier of gripping rigid group. System.Collections.Generic.List < ElementId > outRigidGroupIds Identifiers of rigid groups that are gripped or dropped. Remarks This method is available since v7.6. GetJointsDrivingTask(ElementId, out JointDrivingType, out JointDrivingInterpolationType, out List<SmartReal>, out List<ElementId>, out List<List<SmartReal>>) Gets a joints driving task. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void GetJointsDrivingTask(ElementId inElementId, out JointDrivingType outType, out JointDrivingInterpolationType outInterpolationType, out List<SmartReal> outTimes, out List<ElementId> outJointIds, out List<List<SmartReal>> outValues) Parameters Type Name Description ElementId inElementId Identifier of the task to analyze. JointDrivingType outType Driving type. JointDrivingInterpolationType outInterpolationType Interpolation type. System.Collections.Generic.List < SmartReal > outTimes Times. System.Collections.Generic.List < ElementId > outJointIds Identifiers of joints to drive. System.Collections.Generic.List < System.Collections.Generic.List < SmartReal >> outValues Joints driving values. Remarks This method is available since v7.6. GetRigidGroupDrivingTask(ElementId, out RigidGroupDrivingType, out ElementId, out SmartFrame3D, out List<SmartReal>, out List<SmartReal>, out List<SmartReal>, out List<SmartReal>, out List<SmartReal>, out List<SmartReal>, out List<SmartReal>, out List<Boolean>) Gets a rigid group driving task. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void GetRigidGroupDrivingTask(ElementId inElementId, out RigidGroupDrivingType outType, out ElementId outRigidGroupId, out SmartFrame3D outDrivingFrame, out List<SmartReal> outTimes, out List<SmartReal> outRotationsX, out List<SmartReal> outRotationsY, out List<SmartReal> outRotationsZ, out List<SmartReal> outTranslationsX, out List<SmartReal> outTranslationsY, out List<SmartReal> outTranslationsZ, out List<bool> outIsCirculars) Parameters Type Name Description ElementId inElementId Identifier of the task to analyze. RigidGroupDrivingType outType Driving type. ElementId outRigidGroupId Identifier of definition of rigid group to drive. SmartFrame3D outDrivingFrame Driving frame. System.Collections.Generic.List < SmartReal > outTimes Times. System.Collections.Generic.List < SmartReal > outRotationsX Rotations X component. System.Collections.Generic.List < SmartReal > outRotationsY Rotations Y component. System.Collections.Generic.List < SmartReal > outRotationsZ Rotations Z component. System.Collections.Generic.List < SmartReal > outTranslationsX Translations X component. System.Collections.Generic.List < SmartReal > outTranslationsY Translations Y component. System.Collections.Generic.List < SmartReal > outTranslationsZ Translations Z component. System.Collections.Generic.List < System.Boolean > outIsCirculars Whether to use circular interpolation. Remarks This method is available since v7.6. GetScenario(ElementId, out List<Byte>, out List<String>, out List<ElementId>, out List<Boolean>, out List<SmartReal>, out List<Byte>) Gets a scenario. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void GetScenario(ElementId inElementId, out List<byte> outTrackIds, out List<string> outTrackNames, out List<ElementId> outTaskIds, out List<bool> outTaskIsActives, out List<SmartReal> outTaskStartTimes, out List<byte> outTaskTrackIds) Parameters Type Name Description ElementId inElementId Identifier of the scenario to analyze. System.Collections.Generic.List < System.Byte > outTrackIds Tracks identifiers. System.Collections.Generic.List < System.String > outTrackNames Tracks names, or null for automatic. System.Collections.Generic.List < ElementId > outTaskIds Tasks identifiers. System.Collections.Generic.List < System.Boolean > outTaskIsActives Whether the tasks are active. System.Collections.Generic.List < SmartReal > outTaskStartTimes Tasks start times. System.Collections.Generic.List < System.Byte > outTaskTrackIds Tasks tracks identifiers. Remarks This method is available since v7.6. GetScenarios(DocumentId) Gets the scenarios entities that are in the scenarios folder of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetScenarios(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Scenarios entities found. Remarks This method is available since v7.6. GetSimulations(DocumentId) Gets the simulation entities that are in the simulations folder of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetSimulations(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Simulation entities found. Remarks This method is available since v7.6. GetTasks(DocumentId) Gets the tasks entities that are in the tasks folder of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetTasks(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Tasks entities found. Remarks This method is available since v7.6. GetTaskType(ElementId) Gets the type of a task entity. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] TaskType GetTaskType(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description TaskType Type of the task, or None if the element is not a task entity. Remarks This method is available since v7.6. GetVisibilityChangeTask(ElementId, out Boolean, out List<ElementId>) Gets a visibility change task. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void GetVisibilityChangeTask(ElementId inElementId, out bool outIsHiding, out List<ElementId> outRigidGroupIds) Parameters Type Name Description ElementId inElementId Identifier of the task to analyze. System.Boolean outIsHiding Whether the task is hiding, or otherwise showing. System.Collections.Generic.List < ElementId > outRigidGroupIds Identifiers of rigid groups that are changing. Remarks This method is available since v7.6. SetCurrentSimulation(DocumentId, ElementId) Sets the current simulation entity of a document. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void SetCurrentSimulation(DocumentId inDocumentId, ElementId inSimulationId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. ElementId inSimulationId Identifier of the new current simulation entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetForcesDrivingTask(ElementId, ForceDrivingInterpolationType, List<SmartReal>, List<ElementId>, List<List<SmartReal>>) Sets a forces driving task. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void SetForcesDrivingTask(ElementId inElementId, ForceDrivingInterpolationType inInterpolationType, List<SmartReal> inTimes, List<ElementId> inForceIds, List<List<SmartReal>> inValues) Parameters Type Name Description ElementId inElementId Identifier of the task to modify. ForceDrivingInterpolationType inInterpolationType Interpolation type. System.Collections.Generic.List < SmartReal > inTimes Times. System.Collections.Generic.List < ElementId > inForceIds Identifiers of forces to drive. System.Collections.Generic.List < System.Collections.Generic.List < SmartReal >> inValues Forces driving values. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetGripChangeTask(ElementId, Boolean, ElementId, List<ElementId>) Sets a grip change task. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void SetGripChangeTask(ElementId inElementId, bool inIsGripping, ElementId inGrippingRigidGroupId, List<ElementId> inRigidGroupIds) Parameters Type Name Description ElementId inElementId Identifier of the task to modify. System.Boolean inIsGripping Whether the task is gripping, or otherwise dropping. ElementId inGrippingRigidGroupId Identifier of gripping rigid group. System.Collections.Generic.List < ElementId > inRigidGroupIds Identifiers of rigid groups that are gripped or dropped. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetJointsDrivingTask(ElementId, JointDrivingType, JointDrivingInterpolationType, List<SmartReal>, List<ElementId>, List<List<SmartReal>>) Sets a joints driving task. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void SetJointsDrivingTask(ElementId inElementId, JointDrivingType inType, JointDrivingInterpolationType inInterpolationType, List<SmartReal> inTimes, List<ElementId> inJointIds, List<List<SmartReal>> inValues) Parameters Type Name Description ElementId inElementId Identifier of the task to modify. JointDrivingType inType Driving type. JointDrivingInterpolationType inInterpolationType Interpolation type. System.Collections.Generic.List < SmartReal > inTimes Times. System.Collections.Generic.List < ElementId > inJointIds Identifiers of joints to drive. System.Collections.Generic.List < System.Collections.Generic.List < SmartReal >> inValues Joints driving values. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetRigidGroupDrivingTask(ElementId, RigidGroupDrivingType, ElementId, SmartFrame3D, List<SmartReal>, List<SmartReal>, List<SmartReal>, List<SmartReal>, List<SmartReal>, List<SmartReal>, List<SmartReal>, List<Boolean>) Sets a rigid group driving task. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void SetRigidGroupDrivingTask(ElementId inElementId, RigidGroupDrivingType inType, ElementId inRigidGroupId, SmartFrame3D inDrivingFrame, List<SmartReal> inTimes, List<SmartReal> inRotationsX, List<SmartReal> inRotationsY, List<SmartReal> inRotationsZ, List<SmartReal> inTranslationsX, List<SmartReal> inTranslationsY, List<SmartReal> inTranslationsZ, List<bool> inIsCirculars) Parameters Type Name Description ElementId inElementId Identifier of the task to modify. RigidGroupDrivingType inType Driving type. ElementId inRigidGroupId Identifier of definition of rigid group to drive. SmartFrame3D inDrivingFrame Driving frame. System.Collections.Generic.List < SmartReal > inTimes Times. System.Collections.Generic.List < SmartReal > inRotationsX Rotations X component. System.Collections.Generic.List < SmartReal > inRotationsY Rotations Y component. System.Collections.Generic.List < SmartReal > inRotationsZ Rotations Z component. System.Collections.Generic.List < SmartReal > inTranslationsX Translations X component. System.Collections.Generic.List < SmartReal > inTranslationsY Translations Y component. System.Collections.Generic.List < SmartReal > inTranslationsZ Translations Z component. System.Collections.Generic.List < System.Boolean > inIsCirculars Whether to use circular interpolation. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetVisibilityChangeTask(ElementId, Boolean, List<ElementId>) Sets a visibility change task. Declaration [OperationContract] [AvailableSinceVersion(7, 6, 0, 0)] void SetVisibilityChangeTask(ElementId inElementId, bool inIsHiding, List<ElementId> inRigidGroupIds) Parameters Type Name Description ElementId inElementId Identifier of the task to modify. System.Boolean inIsHiding Whether the task is hiding, or otherwise showing. System.Collections.Generic.List < ElementId > inRigidGroupIds Identifiers of rigid groups that are changing. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6."
  },
  "api/cad/TopSolid.Cad.Design.Automating.ITools.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.ITools.html",
    "title": "Interface ITools | TopSolid Automation website",
    "keywords": "Interface ITools Gives access to various tools. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 10, 0, 0)] public interface ITools Remarks This interface is available since v7.10. Methods CreateAuxiliairyElement(DocumentId, List<ElementId>) Creates an auxiliairy element in a document. Declaration [OperationContract] [AvailableSinceVersion(7, 13, 0, 0)] ElementId CreateAuxiliairyElement(DocumentId inDocumentId, List<ElementId> inConstituents) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Collections.Generic.List < ElementId > inConstituents Identifiers of constituents of the auxiliairy element. Returns Type Description ElementId Identifier of the created auxiliairy entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.13.300.128. CreateDerivedDocument(PdmObjectId, DocumentId, Boolean) Creates a new derived part or assembly of a specified part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] DocumentId CreateDerivedDocument(PdmObjectId inOwnerId, DocumentId inDocumentId, bool inUseDefaultTemplate) Parameters Type Name Description PdmObjectId inOwnerId Identifier of owner. DocumentId inDocumentId Identifier of the part or assembly document to derive. System.Boolean inUseDefaultTemplate Tells whether to use the default template if present. Returns Type Description DocumentId Derived part or assembly document identifier. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.10. CreateMirrorDocument(PdmObjectId, DocumentId, Boolean) Creates the derived mirror part or assembly of a specified part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] DocumentId CreateMirrorDocument(PdmObjectId inOwnerId, DocumentId inDocumentId, bool inUseDefaultTemplate) Parameters Type Name Description PdmObjectId inOwnerId Identifier of owner. DocumentId inDocumentId Identifier of the part or assembly document to derive. System.Boolean inUseDefaultTemplate Tells whether to use the default template if present. Returns Type Description DocumentId Derived mirror part or assembly document identifier. Remarks If the specified part or assembly already has a symmetrical document (i.e. the method SearchSymmetricalDocument(DocumentId) does not return Empty ), it is not allowed to create a derived mirror document, and this method throws an exception. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.10. CreatePlaneSymmetry(DocumentId, SmartPlane3D) Creates a plane symmetry. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] ElementId CreatePlaneSymmetry(DocumentId inDocumentId, SmartPlane3D inPlane) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartPlane3D inPlane Symmetry plane. Returns Type Description ElementId Identifier of the created symmetry entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. CreateRevolutionSymmetry(DocumentId, SmartAxis3D) Creates a revolution symmetry. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] ElementId CreateRevolutionSymmetry(DocumentId inDocumentId, SmartAxis3D inAxis) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartAxis3D inAxis Rotation and translation axis. Returns Type Description ElementId Identifier of the created symmetry entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. GetBaseDocument(DocumentId) Gets the base part or assembly of a derived part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] DocumentId GetBaseDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the derived part or assembly document to analyze. Returns Type Description DocumentId Base part or assembly document identifier, or empty if the part or assembly is not derived. Remarks This method is available since v7.10. GetDerivationInheritances(DocumentId, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out List<ElementId>, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean, out Boolean) Gets the derivation inheritances of a derived part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void GetDerivationInheritances(DocumentId inDocumentId, out bool outName, out bool outDescription, out bool outCode, out bool outPartNumber, out bool outComplementaryPartNumber, out bool outManufacturer, out bool outManufacturerPartNumber, out bool outComment, out List<ElementId> outOtherSystemParameters, out bool outNonSystemParameters, out bool outPoints, out bool outAxes, out bool outPlanes, out bool outFrames, out bool outSketches, out bool outShapes, out bool outPublishings, out bool outFunctions, out bool outSymmetries, out bool outUnsectionabilities, out bool outRepresentations, out bool outSets, out bool outCameras) Parameters Type Name Description DocumentId inDocumentId Identifier of derived part or assembly document to analyze. System.Boolean outName Inherits name from base. System.Boolean outDescription Inherits description from base. System.Boolean outCode Inherits code from base. System.Boolean outPartNumber Inherits part number from base. System.Boolean outComplementaryPartNumber Inherits complementary part number from base. System.Boolean outManufacturer Inherits complementary manufacturer from base. System.Boolean outManufacturerPartNumber Inherits manufacturer part number from base. System.Boolean outComment Inherits comment from base. System.Collections.Generic.List < ElementId > outOtherSystemParameters Identifiers of other base document system parameters to inherit. System.Boolean outNonSystemParameters Inherits non-system parameters from base. System.Boolean outPoints Inherits points from base. System.Boolean outAxes Inherits axes from base. System.Boolean outPlanes Inherits planes from base. System.Boolean outFrames Inherits frames from base. System.Boolean outSketches Inherits sketches from base. System.Boolean outShapes Inherits shapes from base. System.Boolean outPublishings Inherits publishings from base. System.Boolean outFunctions Inherits functions from base. System.Boolean outSymmetries Inherits symmetries from base. System.Boolean outUnsectionabilities Inherits unsectionabilities from base. System.Boolean outRepresentations Inherits representations from base. System.Boolean outSets Inherits sets from base. System.Boolean outCameras Inherits cameras from base. Remarks This method is available since v7.10. GetInstanceFamilyDocument(DocumentId) Gets the family document of an instance. Declaration [OperationContract] [AvailableSinceVersion(7, 17, 0, 0)] DocumentId GetInstanceFamilyDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the instance document. Returns Type Description DocumentId The family document, return Empty if there is no family document or if inDOcument is not an instance. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17. GetPlaneSymmetry(ElementId, out SmartPlane3D) Gets a plane symmetry. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void GetPlaneSymmetry(ElementId inElementId, out SmartPlane3D outPlane) Parameters Type Name Description ElementId inElementId Identifier of the symmetry to analyze. SmartPlane3D outPlane Symmetry plane. Remarks This method is available since v7.10. GetRevolutionSymmetry(ElementId, out SmartAxis3D) Gets a revolution symmetry. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void GetRevolutionSymmetry(ElementId inElementId, out SmartAxis3D outAxis) Parameters Type Name Description ElementId inElementId Identifier of the symmetry to analyze. SmartAxis3D outAxis Symmetry axis. Remarks This method is available since v7.10. GetStockManagement(DocumentId, out StockManagementType, out DocumentId, out ElementId, out SmartText, out SmartText, out SmartText, out SmartText) Superseeded by GetStockManagement2(DocumentId, out StockManagementType, out DocumentId, out ElementId, out SmartText, out SmartText, out SmartText, out SmartText, out SmartText) . Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void GetStockManagement(DocumentId inDocumentId, out StockManagementType outType, out DocumentId outStockDocumentId, out ElementId outStockOccurrenceId, out SmartText outStockName, out SmartText outStockDescription, out SmartText outStockPartNumber, out SmartText outStockMajorRevision) Parameters Type Name Description DocumentId inDocumentId Identifier of part or assembly document to analyze. StockManagementType outType Type of management. DocumentId outStockDocumentId Stock document identifier, or empty if not of type Document . ElementId outStockOccurrenceId Stock occurrence identifier, or empty if not of type Occurrence . SmartText outStockName Stock name, or null if not of type Manual . SmartText outStockDescription Stock description, or null if not of type Manual . SmartText outStockPartNumber Stock part number, or null if not of type Manual . SmartText outStockMajorRevision Stock major revision, or null if not of type Manual . Remarks This method is available since v7.10. GetStockManagement2(DocumentId, out StockManagementType, out DocumentId, out ElementId, out SmartText, out SmartText, out SmartText, out SmartText, out SmartText) Gets the stock management of a part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 11, 0, 0)] void GetStockManagement2(DocumentId inDocumentId, out StockManagementType outType, out DocumentId outStockDocumentId, out ElementId outStockOccurrenceId, out SmartText outStockName, out SmartText outStockDescription, out SmartText outStockPartNumber, out SmartText outStockMajorRevision, out SmartText outStockDimensions) Parameters Type Name Description DocumentId inDocumentId Identifier of part or assembly document to analyze. StockManagementType outType Type of management. DocumentId outStockDocumentId Stock document identifier, or empty if not of type Document . ElementId outStockOccurrenceId Stock occurrence identifier, or empty if not of type Occurrence . SmartText outStockName Stock name, or null if not of type Manual . SmartText outStockDescription Stock description, or null if not of type Manual . SmartText outStockPartNumber Stock part number, or null if not of type Manual . SmartText outStockMajorRevision Stock major revision, or null if not of type Manual . SmartText outStockDimensions Stock dimensions, or null if not of type Manual . Remarks This method is available since v7.11. GetStockParameters(DocumentId, out ElementId, out ElementId, out ElementId, out ElementId) Superseeded by GetStockParameters2(DocumentId, out ElementId, out ElementId, out ElementId, out ElementId, out ElementId) . Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void GetStockParameters(DocumentId inDocumentId, out ElementId outStockName, out ElementId outStockDescription, out ElementId outStockPartNumber, out ElementId outStockMajorRevision) Parameters Type Name Description DocumentId inDocumentId Identifier of part or assembly document to analyze. ElementId outStockName Stock name text parameter entity identifier, or empty if not managed. ElementId outStockDescription Stock description text parameter entity identifier, or empty if not managed. ElementId outStockPartNumber Stock part number text parameter entity identifier, or empty if not managed. ElementId outStockMajorRevision Stock major revision text parameter entity identifier, or empty if not managed. Remarks This method is available since v7.10. GetStockParameters2(DocumentId, out ElementId, out ElementId, out ElementId, out ElementId, out ElementId) Gets the stock parameters of a part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 11, 0, 0)] void GetStockParameters2(DocumentId inDocumentId, out ElementId outStockName, out ElementId outStockDescription, out ElementId outStockPartNumber, out ElementId outStockMajorRevision, out ElementId outStockDimensions) Parameters Type Name Description DocumentId inDocumentId Identifier of part or assembly document to analyze. ElementId outStockName Stock name text parameter entity identifier, or empty if not managed. ElementId outStockDescription Stock description text parameter entity identifier, or empty if not managed. ElementId outStockPartNumber Stock part number text parameter entity identifier, or empty if not managed. ElementId outStockMajorRevision Stock major revision text parameter entity identifier, or empty if not managed. ElementId outStockDimensions Stock dimensions text parameter entity identifier, or empty if not managed. Remarks This method is available since v7.11. GetSymmetries(DocumentId) Gets the symmetry entities that are in the symmetries folder of a part or assembly document. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] List<ElementId> GetSymmetries(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Collections.Generic.List < ElementId > Symmetries entities found. Remarks This method is available since v7.10. GetSymmetryType(ElementId) Gets the type of a symmetry entity. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] SymmetryType GetSymmetryType(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description SymmetryType Type of the symmetry, or None if the element is not a symmetry entity. Remarks This method is available since v7.10. InheritDetailingsElements(ElementId, EntityCopyNameMode, String) Inherits the detailings elements of a node enttiy. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 0, 0)] ElementId InheritDetailingsElements(ElementId inElementToInheritDetailings, EntityCopyNameMode inEntityCopyNameMode, string inPrefixName) Parameters Type Name Description ElementId inElementToInheritDetailings Identifier of the element to inherit. EntityCopyNameMode inEntityCopyNameMode The entity copy name mode. System.String inPrefixName Prefix of the name of the created entity (only in PrefixedByCustomPrefix mode). Returns Type Description ElementId Identifier of the created detailing elements inheriting operation. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. IsDerived(DocumentId) Tells whether part or assembly is a derived part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] bool IsDerived(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part or assembly document to analyze. Returns Type Description System.Boolean The part or assembly is a derived part or assembly. Remarks This method is available since v7.10. IsMirror(DocumentId) Tells whether part or assembly is a derived mirror. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] bool IsMirror(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part or assembly document to analyze. Returns Type Description System.Boolean The part or assembly is a derived mirror. Remarks This method is available since v7.10. IsSymmetrical(DocumentId) Tells whether part or assembly is symmetrical. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] bool IsSymmetrical(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part or assembly document to analyze. Returns Type Description System.Boolean The part or assembly is symmetrical. Remarks A part or assembly is symmetrical if it contains at least one symmetry entity. Symmetrical parts and assemblies are not replaced by mirror parts or assemblies when making a mirror assembly of an assembly in which they are included. This method is available since v7.10. SearchMirrorDocument(DocumentId) Searches for the derived mirror part or assembly of a specified part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] DocumentId SearchMirrorDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part or assembly document to analyze. Returns Type Description DocumentId Derived mirror part or assembly found, or Empty if not found. Remarks This method is available since v7.10. SearchSymmetricalDocument(DocumentId) Searches for the symmetrical part or assembly of a specified part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] DocumentId SearchSymmetricalDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the part or assembly document to analyze. Returns Type Description DocumentId Symmetrical part or assembly found, or Empty if not found. Remarks If the specified part or assembly is symmetrical (i.e. IsSymmetrical(DocumentId) returns true ), this method returns the specified part or assembly. Otherwise, if the specified part or assembly is a derived mirror, this method returns the base part or assembly. Otherwise, if the specified part or assembly is the base part of a derived mirror part or assembly, this method returns the derived part or assembly. Otherwise, this method returns Empty . If there is no symmetrical part or assembly found, it will not be possible to make a mirror assembly of an assembly containing the specified part or assembly. This method is available since v7.10. SetDerivationInheritances(DocumentId, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, List<ElementId>, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) Sets the derivation inheritances of a derived part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void SetDerivationInheritances(DocumentId inDocumentId, bool inName, bool inDescription, bool inCode, bool inPartNumber, bool inComplementaryPartNumber, bool inManufacturer, bool inManufacturerPartNumber, bool inComment, List<ElementId> inOtherSystemParameters, bool inNonSystemParameters, bool inPoints, bool inAxes, bool inPlanes, bool inFrames, bool inSketches, bool inShapes, bool inPublishings, bool inFunctions, bool inSymmetries, bool inUnsectionabilities, bool inRepresentations, bool inSets, bool inCameras) Parameters Type Name Description DocumentId inDocumentId Identifier of derived part or assembly document to modify. System.Boolean inName Inherits name from base. System.Boolean inDescription Inherits description from base. System.Boolean inCode Inherits code from base. System.Boolean inPartNumber Inherits part number from base. System.Boolean inComplementaryPartNumber Inherits complementary part number from base. System.Boolean inManufacturer Inherits complementary manufacturer from base. System.Boolean inManufacturerPartNumber Inherits manufacturer part number from base. System.Boolean inComment Inherits comment from base. System.Collections.Generic.List < ElementId > inOtherSystemParameters Identifiers of other base document system parameters to inherit. System.Boolean inNonSystemParameters Inherits non-system parameters from base. System.Boolean inPoints Inherits points from base. System.Boolean inAxes Inherits axes from base. System.Boolean inPlanes Inherits planes from base. System.Boolean inFrames Inherits frames from base. System.Boolean inSketches Inherits sketches from base. System.Boolean inShapes Inherits shapes from base. System.Boolean inPublishings Inherits publishings from base. System.Boolean inFunctions Inherits functions from base. System.Boolean inSymmetries Inherits symmetries from base. System.Boolean inUnsectionabilities Inherits unsectionabilities from base. System.Boolean inRepresentations Inherits representations from base. System.Boolean inSets Inherits sets from base. System.Boolean inCameras Inherits cameras from base. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. SetPlaneSymmetry(ElementId, SmartPlane3D) Sets a plane symmetry. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void SetPlaneSymmetry(ElementId inElementId, SmartPlane3D inPlane) Parameters Type Name Description ElementId inElementId Identifier of the symmetry to modify. SmartPlane3D inPlane Symmetry plane. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. SetRevolutionSymmetry(ElementId, SmartAxis3D) Sets a revolution symmetry. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void SetRevolutionSymmetry(ElementId inElementId, SmartAxis3D inAxis) Parameters Type Name Description ElementId inElementId Identifier of the symmetry to modify. SmartAxis3D inAxis Symmetry axis. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. SetStockManagement(DocumentId, StockManagementType, DocumentId, ElementId, SmartText, SmartText, SmartText, SmartText) Superseeded by SetStockManagement2(DocumentId, StockManagementType, DocumentId, ElementId, SmartText, SmartText, SmartText, SmartText, SmartText) . Declaration [OperationContract] [AvailableSinceVersion(7, 10, 0, 0)] void SetStockManagement(DocumentId inDocumentId, StockManagementType inType, DocumentId inStockDocumentId, ElementId inStockOccurrenceId, SmartText inStockName, SmartText inStockDescription, SmartText inStockPartNumber, SmartText inStockMajorRevision) Parameters Type Name Description DocumentId inDocumentId Identifier of part or assembly document to modify. StockManagementType inType Type of management. DocumentId inStockDocumentId Stock document identifier, or empty if not of type Document . ElementId inStockOccurrenceId Stock occurrence identifier, or empty if not of type Occurrence . SmartText inStockName Stock name, or null if not of type Manual . SmartText inStockDescription Stock description, or null if not of type Manual . SmartText inStockPartNumber Stock part number, or null if not of type Manual . SmartText inStockMajorRevision Stock major revision, or null if not of type Manual . Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. SetStockManagement2(DocumentId, StockManagementType, DocumentId, ElementId, SmartText, SmartText, SmartText, SmartText, SmartText) Sets the stock management of a part or assembly. Declaration [OperationContract] [AvailableSinceVersion(7, 11, 0, 0)] void SetStockManagement2(DocumentId inDocumentId, StockManagementType inType, DocumentId inStockDocumentId, ElementId inStockOccurrenceId, SmartText inStockName, SmartText inStockDescription, SmartText inStockPartNumber, SmartText inStockMajorRevision, SmartText inStockDimensions) Parameters Type Name Description DocumentId inDocumentId Identifier of part or assembly document to modify. StockManagementType inType Type of management. DocumentId inStockDocumentId Stock document identifier, or empty if not of type Document . ElementId inStockOccurrenceId Stock occurrence identifier, or empty if not of type Occurrence . SmartText inStockName Stock name, or null if not of type Manual . SmartText inStockDescription Stock description, or null if not of type Manual . SmartText inStockPartNumber Stock part number, or null if not of type Manual . SmartText inStockMajorRevision Stock major revision, or null if not of type Manual . SmartText inStockDimensions Stock dimensions, or null if not of type Manual . Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.11."
  },
  "api/cad/TopSolid.Cad.Design.Automating.IUnfoldings.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.IUnfoldings.html",
    "title": "Interface IUnfoldings | TopSolid Automation website",
    "keywords": "Interface IUnfoldings Gives access to unfoldings. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [ServiceContract] [AvailableSinceVersion(7, 10, 300, 60)] public interface IUnfoldings Remarks This interface is available since v7.10.300.60 Methods GetBendFeatures(DocumentId, out List<BendFeature>) Gets the bend features. Declaration [OperationContract] [AvailableSinceVersion(7, 16, 400, 160)] void GetBendFeatures(DocumentId inDocumentId, out List<BendFeature> outBendFeatures) Parameters Type Name Description DocumentId inDocumentId Identifier of the unfolding document to analyze. List < BendFeature > outBendFeatures List of bend features. Remarks This method is available since v7.16.400.160. GetPartToUnfold(DocumentId, out DocumentId, out ElementId, out ElementId) Gets the part to unfold. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 300, 60)] void GetPartToUnfold(DocumentId inDocumentId, out DocumentId outPartDocumentId, out ElementId outRepresentationId, out ElementId outShapeId) Parameters Type Name Description DocumentId inDocumentId Identifier of the unfolding document to analyze. DocumentId outPartDocumentId Identifier of the part document that contains the unfolded part. ElementId outRepresentationId Identifier of the representation that contains the unfolded shape. ElementId outShapeId Unfolded shape. Remarks This method is available since v7.10.300.60. IsUnfolding(DocumentId) Tells whether a document is an unfolding document. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 300, 60)] bool IsUnfolding(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is an unfolding document. Remarks This method is available since v7.10.300.60. SetPartToUnfold(DocumentId, ElementId, ElementId) Sets the part to unfold. Declaration [OperationContract] [AvailableSinceVersion(7, 10, 300, 60)] void SetPartToUnfold(DocumentId inDocumentId, ElementId inRepresentationId, ElementId inShapeId) Parameters Type Name Description DocumentId inDocumentId Identifier of the unfolding document to modify. ElementId inRepresentationId Identifier of the representation to consider into the part document to include. ElementId inShapeId Identifier of the shape entity to unfold, or empty for first shape entity of the representation. Remarks This method is available since v7.10.300.60."
  },
  "api/cad/TopSolid.Cad.Design.Automating.JointDrivingInterpolationType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.JointDrivingInterpolationType.html",
    "title": "Enum JointDrivingInterpolationType | TopSolid Automation website",
    "keywords": "Enum JointDrivingInterpolationType Defines the various types of interpolation for joint driving. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 6, 0, 0)] public enum JointDrivingInterpolationType Remarks This enum is available since v7.6. Fields Name Description ConstantAcceleration Constant acceleration. ConstantVelocity Constant velocity. None No interpolation. VariableAcceleration Variable acceleration."
  },
  "api/cad/TopSolid.Cad.Design.Automating.JointDrivingType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.JointDrivingType.html",
    "title": "Enum JointDrivingType | TopSolid Automation website",
    "keywords": "Enum JointDrivingType Defines the various types of joint drivings. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 6, 0, 0)] public enum JointDrivingType Remarks This enum is available since v7.6. Fields Name Description None No driving. Position Position driving. Velocity Velocity driving."
  },
  "api/cad/TopSolid.Cad.Design.Automating.JointType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.JointType.html",
    "title": "Enum JointType | TopSolid Automation website",
    "keywords": "Enum JointType Defines the various types of joints entities. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 6, 0, 0)] public enum JointType Remarks This enum is available since v7.6. Fields Name Description Cylindrical Cylindrical joint. None Not a joint. Prismatic Prismatic joint. Revolute Revolute joint. Spherical Spherical joint. Unclassified Unclassified type."
  },
  "api/cad/TopSolid.Cad.Design.Automating.MaterialCategoryType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.MaterialCategoryType.html",
    "title": "Enum MaterialCategoryType | TopSolid Automation website",
    "keywords": "Enum MaterialCategoryType Defines the various types of material categories. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 16, 0, 0)] public enum MaterialCategoryType Remarks This enum is available since v7.16. Fields Name Description AluminiumAlloy Aluminium alloy. CarbonSteel Carbon steel. CastIron Cast iron. Ceramic Ceramic. Composite Composite material. Concrete Concrete. CopperAlloy Copper alloy. Elastomer Elastomer. Gas Gas. Glass Glass. Graphite Graphite. HighAlloySteel High alloy steel. LeadAlloy Lead alloy. Liquid Liquid. LowAlloySteel Low alloy steel. MagnesiumAlloy Magnesium alloy. Mineral Mineral. NickelAlloy Nickel alloy. None No material category defined. PreciousAlloy Precious metal alloy. PureElement Pure element. ReinforcedConcrete Reinforced concrete. StainlessSteel Stainless steel. ThermalInsulator Thermal insulator. ThermoplasticPolymer Thermoplastic polymer. ThermosetPolymer Thermoset polymer. Tightness Tightness material. TinAlloy Tin alloy. TitaniumAlloy Titanium alloy. Unclassified Unclassified material category. UnclassifiedAlloy Unclassified metallic alloy. Wood Wood. ZincAlloy Zinc alloy."
  },
  "api/cad/TopSolid.Cad.Design.Automating.MaterialModelType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.MaterialModelType.html",
    "title": "Enum MaterialModelType | TopSolid Automation website",
    "keywords": "Enum MaterialModelType Defines the various types of material. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 16, 0, 0)] public enum MaterialModelType Remarks This enum is available since v7.16. Fields Name Description None No material model defined. PBRMetallic PBR metalness/roughness. PBRSpecular PBR specular/gloss. RedWay RedWay. Unclassified Unclassified material model."
  },
  "api/cad/TopSolid.Cad.Design.Automating.RigidGroupDrivingType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.RigidGroupDrivingType.html",
    "title": "Enum RigidGroupDrivingType | TopSolid Automation website",
    "keywords": "Enum RigidGroupDrivingType Defines the various types of rigid group driving. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 6, 0, 0)] public enum RigidGroupDrivingType Remarks This enum is available since v7.6. Fields Name Description Absolute Absolute displacement driving. Incremental Incremental displacement driving. None No driving. Relative Relative displacement driving."
  },
  "api/cad/TopSolid.Cad.Design.Automating.SmartCoating.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.SmartCoating.html",
    "title": "Class SmartCoating | TopSolid Automation website",
    "keywords": "Class SmartCoating Represents a smart coating. Inheritance System.Object SmartDesignObject SmartDocument SmartCoating Inherited Members SmartDocument.Type SmartDocument.Document SmartDocument.ElementId SmartDocument.ReferenceType System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 17, 0, 0)] public class SmartCoating : SmartDocument Remarks This class is available since v7.17. Constructors SmartCoating(DocumentId) Initializes a new instance of the SmartCoating class of type Basic Declaration public SmartCoating(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. SmartCoating(DocumentId, DocumentReferenceType) Initializes a new instance of the SmartCoating class of type Basic Declaration public SmartCoating(DocumentId inDocumentId, DocumentReferenceType inReferenceType) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. DocumentReferenceType inReferenceType Document reference type of the SmartDocument. SmartCoating(ElementId) Initializes a new instance of the SmartCoating class of type Element . Declaration public SmartCoating(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartCoating(ElementId, DocumentReferenceType) Initializes a new instance of the SmartCoating class of type Element . Declaration public SmartCoating(ElementId inElementId, DocumentReferenceType inReferenceType) Parameters Type Name Description ElementId inElementId Identifier of providing element. DocumentReferenceType inReferenceType Document reference type of the SmartDocument."
  },
  "api/cad/TopSolid.Cad.Design.Automating.SmartDesignObject.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.SmartDesignObject.html",
    "title": "Class SmartDesignObject | TopSolid Automation website",
    "keywords": "Class SmartDesignObject Represents a general design smart object. Inheritance System.Object SmartDesignObject SmartDocument Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 17, 0, 0)] [KnownType(typeof(SmartDocument))] public abstract class SmartDesignObject Remarks This class is available since v7.17."
  },
  "api/cad/TopSolid.Cad.Design.Automating.SmartDocument.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.SmartDocument.html",
    "title": "Class SmartDocument | TopSolid Automation website",
    "keywords": "Class SmartDocument Represents a smart design document value. Inheritance System.Object SmartDesignObject SmartDocument SmartCoating SmartFinishing SmartMaterial Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 17, 0, 0)] [KnownType(typeof(SmartCoating))] [KnownType(typeof(SmartFinishing))] [KnownType(typeof(SmartMaterial))] public abstract class SmartDocument : SmartDesignObject Remarks This class is available since v7.17. Constructors SmartDocument(DocumentId) Initializes a new instance of the SmartDocument class of type Basic Declaration public SmartDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. SmartDocument(DocumentId, DocumentReferenceType) Initializes a new instance of the SmartDocument class of type Basic Declaration public SmartDocument(DocumentId inDocumentId, DocumentReferenceType inReferenceType) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. DocumentReferenceType inReferenceType Document reference type of the SmartDocument. SmartDocument(ElementId) Initializes a new instance of the SmartDocument class of type Element . Declaration public SmartDocument(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartDocument(ElementId, DocumentReferenceType) Initializes a new instance of the SmartDocument class of type Element . Declaration public SmartDocument(ElementId inElementId, DocumentReferenceType inReferenceType) Parameters Type Name Description ElementId inElementId Identifier of providing element. DocumentReferenceType inReferenceType Document reference type of the SmartDocument. Fields Document Document of the smart object. Declaration [DataMember] public DocumentId Document Field Value Type Description DocumentId ElementId Providing element identifier, or empty if none. Declaration [DataMember] public ElementId ElementId Field Value Type Description ElementId ReferenceType Providing element item label, or empty if none. Declaration [DataMember] public DocumentReferenceType ReferenceType Field Value Type Description DocumentReferenceType Type Type of smart document. Declaration [DataMember] public SmartDocumentType Type Field Value Type Description SmartDocumentType"
  },
  "api/cad/TopSolid.Cad.Design.Automating.SmartFinishing.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.SmartFinishing.html",
    "title": "Class SmartFinishing | TopSolid Automation website",
    "keywords": "Class SmartFinishing Represents a smart finishing. Inheritance System.Object SmartDesignObject SmartDocument SmartFinishing Inherited Members SmartDocument.Type SmartDocument.Document SmartDocument.ElementId SmartDocument.ReferenceType System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 17, 0, 0)] public class SmartFinishing : SmartDocument Remarks This class is available since v7.17. Constructors SmartFinishing(DocumentId) Initializes a new instance of the SmartFinishing class of type Basic Declaration public SmartFinishing(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. SmartFinishing(DocumentId, DocumentReferenceType) Initializes a new instance of the SmartFinishing class of type Basic Declaration public SmartFinishing(DocumentId inDocumentId, DocumentReferenceType inReferenceType) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. DocumentReferenceType inReferenceType Document reference type of the SmartDocument. SmartFinishing(ElementId) Initializes a new instance of the SmartFinishing class of type Element . Declaration public SmartFinishing(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartFinishing(ElementId, DocumentReferenceType) Initializes a new instance of the SmartFinishing class of type Element . Declaration public SmartFinishing(ElementId inElementId, DocumentReferenceType inReferenceType) Parameters Type Name Description ElementId inElementId Identifier of providing element. DocumentReferenceType inReferenceType Document reference type of the SmartDocument."
  },
  "api/cad/TopSolid.Cad.Design.Automating.SmartMaterial.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.SmartMaterial.html",
    "title": "Class SmartMaterial | TopSolid Automation website",
    "keywords": "Class SmartMaterial Represents a smart material. Inheritance System.Object SmartDesignObject SmartDocument SmartMaterial Inherited Members SmartDocument.Type SmartDocument.Document SmartDocument.ElementId SmartDocument.ReferenceType System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 17, 0, 0)] public class SmartMaterial : SmartDocument Remarks This class is available since v7.17. Constructors SmartMaterial(DocumentId) Initializes a new instance of the SmartMaterial class of type Basic Declaration public SmartMaterial(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. SmartMaterial(DocumentId, DocumentReferenceType) Initializes a new instance of the SmartMaterial class of type Basic Declaration public SmartMaterial(DocumentId inDocumentId, DocumentReferenceType inReferenceType) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. DocumentReferenceType inReferenceType Document reference type of the SmartDocument. SmartMaterial(ElementId) Initializes a new instance of the SmartMaterial class of type Element . Declaration public SmartMaterial(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartMaterial(ElementId, DocumentReferenceType) Initializes a new instance of the SmartMaterial class of type Element . Declaration public SmartMaterial(ElementId inElementId, DocumentReferenceType inReferenceType) Parameters Type Name Description ElementId inElementId Identifier of providing element. DocumentReferenceType inReferenceType Document reference type of the SmartDocument."
  },
  "api/cad/TopSolid.Cad.Design.Automating.StockManagementType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.StockManagementType.html",
    "title": "Enum StockManagementType | TopSolid Automation website",
    "keywords": "Enum StockManagementType Defines the various types of stock managements. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 8, 0, 0)] public enum StockManagementType Remarks This enum is available since v7.8. Fields Name Description DerivationBase Stock is the derivation base document. Document Specified stock document. Manual Specified stock parameters. None No stock management. Occurrence Specified stock occurrence. SameThanDerivationBase Stock is the same than the stock of the derivation base document."
  },
  "api/cad/TopSolid.Cad.Design.Automating.SymmetryType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.SymmetryType.html",
    "title": "Enum SymmetryType | TopSolid Automation website",
    "keywords": "Enum SymmetryType Defines the various types of symmetries entities. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 10, 0, 0)] public enum SymmetryType Remarks This enum is available since v7.10. Fields Name Description None Not a symmetry. Plane Plane symmetry. Revolution Revolution symmetry. Unclassified Unclassified type."
  },
  "api/cad/TopSolid.Cad.Design.Automating.TaskType.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.TaskType.html",
    "title": "Enum TaskType | TopSolid Automation website",
    "keywords": "Enum TaskType Defines the various types of tasks entities. Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [DataContract] [AvailableSinceVersion(7, 6, 0, 0)] public enum TaskType Remarks This enum is available since v7.6. Fields Name Description ForcesDriving Forces driving task. GripChange Grip change task. JointsDriving Joints driving task. None Not a task. RigidGroupDriving Rigid group driving task. Unclassified Unclassified type. VisibilityChange Visibility change task."
  },
  "api/cad/TopSolid.Cad.Design.Automating.TopSolidDesignHost.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.TopSolidDesignHost.html",
    "title": "Class TopSolidDesignHost | TopSolid Automation website",
    "keywords": "Class TopSolidDesignHost Represents TopSolid'Design host providing WCF services for automating. Inheritance System.Object TopSolidDesignHost Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public static class TopSolidDesignHost Remarks This class is available since v7.6. Properties Assemblies Gets access to assemblies, or null if not connected. Declaration public static IAssemblies Assemblies { get; } Property Value Type Description IAssemblies Boms Gets access to bill of materials (BOMs), or null if not connected. Declaration public static IBoms Boms { get; } Property Value Type Description IBoms Coatings Gets access to materials, or null if not connected. Declaration public static ICoatings Coatings { get; } Property Value Type Description ICoatings Features Gets access to features, or null if not connected. Declaration public static IFeatures Features { get; } Property Value Type Description IFeatures HostInstance Gets the host instance. Declaration public static TopSolidDesignHostInstance HostInstance { get; } Property Value Type Description TopSolidDesignHostInstance IsConnected Tells whether TopSolid is connected. Declaration public static bool IsConnected { get; } Property Value Type Description System.Boolean Materials Gets access to materials, or null if not connected. Declaration public static IMaterials Materials { get; } Property Value Type Description IMaterials Mechanisms Gets access to mechanisms, or null if not connected. Declaration public static IMechanisms Mechanisms { get; } Property Value Type Description IMechanisms Parts Gets access to parts, or null if not connected. Declaration public static IParts Parts { get; } Property Value Type Description IParts Representations Gets access to representations, or null if not connected. Declaration public static IRepresentations Representations { get; } Property Value Type Description IRepresentations Simulations Gets access to simulations, or null if not connected. Declaration public static ISimulations Simulations { get; } Property Value Type Description ISimulations Tools Gets access to tools, or null if not connected. Declaration public static ITools Tools { get; } Property Value Type Description ITools Unfoldings Gets access to unfoldings, or null if not connected. Declaration public static IUnfoldings Unfoldings { get; } Property Value Type Description IUnfoldings Methods Connect() Connects to TopSolid application. Declaration public static void Connect() Disconnect() Disconnect from TopSolid application. Declaration public static void Disconnect()"
  },
  "api/cad/TopSolid.Cad.Design.Automating.TopSolidDesignHostInstance.html": {
    "href": "api/cad/TopSolid.Cad.Design.Automating.TopSolidDesignHostInstance.html",
    "title": "Class TopSolidDesignHostInstance | TopSolid Automation website",
    "keywords": "Class TopSolidDesignHostInstance Represents a TopSolid'Design host instance providing WCF services for automating. Inheritance System.Object TopSolidDesignHostInstance Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Cad.Design.Automating Assembly : TopSolid.Cad.Design.Automating.dll Syntax [AvailableSinceVersion(7, 10, 0, 0)] public class TopSolidDesignHostInstance Remarks When automating several instances of TopSolid at the same time one must make and use several instances of this class (one per TopSolid instance), otherwise if only one instance of TopSolid is to be automated, it is possible to simply use the TopSolidDesignHost static class. This class is available since v7.10. Constructors TopSolidDesignHostInstance(TopSolidHostInstance) Initializes a new instance of the TopSolidDesignHostInstance class. Declaration public TopSolidDesignHostInstance(TopSolidHostInstance inTopSolidHostInstance) Parameters Type Name Description TopSolidHostInstance inTopSolidHostInstance TopSolid host instance. Properties Assemblies Gets access to assemblies, or null if not connected. Declaration public IAssemblies Assemblies { get; } Property Value Type Description IAssemblies Boms Gets access to bill of materials (BOMs), or null if not connected. Declaration public IBoms Boms { get; } Property Value Type Description IBoms Coatings Gets access to coatings, or null if not connected. Declaration public ICoatings Coatings { get; } Property Value Type Description ICoatings Features Gets access to features, or null if not connected. Declaration public IFeatures Features { get; } Property Value Type Description IFeatures IsConnected Tells whether TopSolid is connected. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean Materials Gets access to materials, or null if not connected. Declaration public IMaterials Materials { get; } Property Value Type Description IMaterials Mechanisms Gets access to mechanisms, or null if not connected. Declaration public IMechanisms Mechanisms { get; } Property Value Type Description IMechanisms Parts Gets access to parts, or null if not connected. Declaration public IParts Parts { get; } Property Value Type Description IParts Representations Gets access to representations, or null if not connected. Declaration public IRepresentations Representations { get; } Property Value Type Description IRepresentations Simulations Gets access to simulations, or null if not connected. Declaration public ISimulations Simulations { get; } Property Value Type Description ISimulations Tools Gets access to tools, or null if not connected. Declaration public ITools Tools { get; } Property Value Type Description ITools Unfoldings Gets access to unfoldings, or null if not connected. Declaration public IUnfoldings Unfoldings { get; } Property Value Type Description IUnfoldings Methods Connect() Connects to TopSolid application. Declaration public void Connect() Disconnect() Disconnect from TopSolid application. Declaration public void Disconnect()"
  },
  "api/kernel/TopSolid.Kernel.Automating.AvailableSinceVersionAttribute.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.AvailableSinceVersionAttribute.html",
    "title": "Class AvailableSinceVersionAttribute | TopSolid Automation website",
    "keywords": "Class AvailableSinceVersionAttribute Gives the version since when an interface, method, ... is available. Inheritance System.Object System.Attribute AvailableSinceVersionAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface)] public class AvailableSinceVersionAttribute : Attribute, _Attribute Constructors AvailableSinceVersionAttribute(Int32, Int32, Int32, Int32) Initializes a new instance of the AvailableSinceVersionAttribute class. Declaration public AvailableSinceVersionAttribute(int inMajor, int inMinor, int inBuild, int inRevision) Parameters Type Name Description System.Int32 inMajor Major number must be within [0,20]. System.Int32 inMinor Minor number must be within [0,99]. System.Int32 inBuild Build number must be within [0,999]. System.Int32 inRevision Revision number must be within [0,999]. Properties Version Gets the version, as ((Major * 100 + Minor) * 1000 + Build) * 1000 + Revision. Declaration public int Version { get; } Property Value Type Description System.Int32 VersionText Gets the version, as \"[Major].[Minor].[Build].[Revision]\". Declaration public string VersionText { get; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/kernel/TopSolid.Kernel.Automating.Axis2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Axis2D.html",
    "title": "Struct Axis2D | TopSolid Automation website",
    "keywords": "Struct Axis2D Represents a geometric 2D axis. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Axis2D Remarks This structure is available since v7.6. Constructors Axis2D(Point2D, Direction2D) Initializes a new instance of the Axis2D structure with a specified origin and direction. Declaration public Axis2D(Point2D inOrigin, Direction2D inDirection) Parameters Type Name Description Point2D inOrigin Axis origin. Direction2D inDirection Axis direction. Fields Direction Axis direction. Declaration public Direction2D Direction Field Value Type Description Direction2D Origin Axis origin. Declaration public Point2D Origin Field Value Type Description Point2D OX (O,+X) absolute axis. Declaration public static readonly Axis2D OX Field Value Type Description Axis2D OY (O,+Y) absolute axis. Declaration public static readonly Axis2D OY Field Value Type Description Axis2D"
  },
  "api/kernel/TopSolid.Kernel.Automating.Axis3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Axis3D.html",
    "title": "Struct Axis3D | TopSolid Automation website",
    "keywords": "Struct Axis3D Represents a geometric 3D axis. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Axis3D Remarks This structure is available since v7.6. Constructors Axis3D(Point3D, Direction3D) Initializes a new instance of the Axis3D structure with a specified origin and direction. Declaration public Axis3D(Point3D inOrigin, Direction3D inDirection) Parameters Type Name Description Point3D inOrigin Axis origin. Direction3D inDirection Axis direction. Fields Direction Axis direction. Declaration public Direction3D Direction Field Value Type Description Direction3D Origin Axis origin. Declaration public Point3D Origin Field Value Type Description Point3D OX (O,+X) absolute axis. Declaration public static readonly Axis3D OX Field Value Type Description Axis3D OY (O,+Y) absolute axis. Declaration public static readonly Axis3D OY Field Value Type Description Axis3D OZ (O,+Z) absolute axis. Declaration public static readonly Axis3D OZ Field Value Type Description Axis3D"
  },
  "api/kernel/TopSolid.Kernel.Automating.BooleanProperty.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.BooleanProperty.html",
    "title": "Class BooleanProperty | TopSolid Automation website",
    "keywords": "Class BooleanProperty Represents a Boolean property. Inheritance System.Object Property BooleanProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 12, 0, 0)] public class BooleanProperty : Property Remarks This class is available since v7.12. Constructors BooleanProperty(Boolean) Initializes a new instance of the BooleanProperty class. Declaration public BooleanProperty(bool inValue) Parameters Type Name Description System.Boolean inValue Value. Fields Value Value. Declaration public bool Value Field Value Type Description System.Boolean Properties Type Gets the property type. Declaration public override PropertyType Type { get; } Property Value Type Description PropertyType Overrides Property.Type"
  },
  "api/kernel/TopSolid.Kernel.Automating.CodeProperty.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.CodeProperty.html",
    "title": "Class CodeProperty | TopSolid Automation website",
    "keywords": "Class CodeProperty Represents a Document property. Inheritance System.Object Property CodeProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public class CodeProperty : Property Remarks This class is available since v7.17. Constructors CodeProperty(String) Initializes a new instance of the DocumentProperty class. Declaration public CodeProperty(string inValue) Parameters Type Name Description System.String inValue Value. Fields Value The value Declaration public string Value Field Value Type Description System.String Properties Type Gets the property type. Declaration public override PropertyType Type { get; } Property Value Type Description PropertyType Overrides Property.Type"
  },
  "api/kernel/TopSolid.Kernel.Automating.Color.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Color.html",
    "title": "Struct Color | TopSolid Automation website",
    "keywords": "Struct Color Represents a graphic color. Implements System.IEquatable < Color > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Color : IEquatable<Color> Remarks This structure is available since v7.6. Constructors Color(Byte, Byte, Byte) Initializes a new instance of the Color structure with its RGB intensities. Declaration public Color(byte inR, byte inG, byte inB) Parameters Type Name Description System.Byte inR Red intensity. System.Byte inG Green intensity. System.Byte inB Blue intensity. Fields Black Black color. Declaration public static readonly Color Black Field Value Type Description Color Blue Blue color. Declaration public static readonly Color Blue Field Value Type Description Color Cyan Cyan color. Declaration public static readonly Color Cyan Field Value Type Description Color DarkBlue Dark blue color. Declaration public static readonly Color DarkBlue Field Value Type Description Color DarkCyan Dark cyan color. Declaration public static readonly Color DarkCyan Field Value Type Description Color DarkGray Dark gray color. Declaration public static readonly Color DarkGray Field Value Type Description Color DarkGreen Dark green color. Declaration public static readonly Color DarkGreen Field Value Type Description Color Empty Empty color. Declaration public static readonly Color Empty Field Value Type Description Color Gray Gray color. Declaration public static readonly Color Gray Field Value Type Description Color Green Green color. Declaration public static readonly Color Green Field Value Type Description Color LightBlue Light blue color. Declaration public static readonly Color LightBlue Field Value Type Description Color LightGray Light gray color. Declaration public static readonly Color LightGray Field Value Type Description Color LightGreen Light green color. Declaration public static readonly Color LightGreen Field Value Type Description Color LightYellow Lights yellow color. Declaration public static readonly Color LightYellow Field Value Type Description Color Magenta Magenta color. Declaration public static readonly Color Magenta Field Value Type Description Color Orange Orange color. Declaration public static readonly Color Orange Field Value Type Description Color Pink Pink color. Declaration public static readonly Color Pink Field Value Type Description Color Red Red color. Declaration public static readonly Color Red Field Value Type Description Color Violet Violet color. Declaration public static readonly Color Violet Field Value Type Description Color White White color. Declaration public static readonly Color White Field Value Type Description Color Yellow Yellow color. Declaration public static readonly Color Yellow Field Value Type Description Color Properties B Gets the color blue intensity. Declaration public readonly byte B { get; } Property Value Type Description System.Byte G Gets the color green intensity. Declaration public readonly byte G { get; } Property Value Type Description System.Byte IsEmpty Tells whether the color is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean R Gets the color red intensity. Declaration public readonly byte R { get; } Property Value Type Description System.Byte Methods Equals(Object) Declaration public override bool Equals(object inObj) Parameters Type Name Description System.Object inObj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(Color) Declaration public bool Equals(Color inOther) Parameters Type Name Description Color inOther Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators Equality(Color, Color) Compares two colors. Declaration public static bool operator ==(Color inC1, Color inC2) Parameters Type Name Description Color inC1 Left hand side color. Color inC2 Right hand side color. Returns Type Description System.Boolean Colors are equal. Inequality(Color, Color) Compares two colors. Declaration public static bool operator !=(Color inC1, Color inC2) Parameters Type Name Description Color inC1 Left hand side color. Color inC2 Right hand side color. Returns Type Description System.Boolean Colors are different. Implements System.IEquatable<T>"
  },
  "api/kernel/TopSolid.Kernel.Automating.CompressionType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.CompressionType.html",
    "title": "Enum CompressionType | TopSolid Automation website",
    "keywords": "Enum CompressionType Defines the various types of compressions. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 12, 300, 160)] public enum CompressionType Remarks This enum is available since v7.12.300.160. Fields Name Description Fast Fast compression. None No compression. Strong Strong compression."
  },
  "api/kernel/TopSolid.Kernel.Automating.CurveParametricApproximationType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.CurveParametricApproximationType.html",
    "title": "Enum CurveParametricApproximationType | TopSolid Automation website",
    "keywords": "Enum CurveParametricApproximationType Defines the various types of curve parametric approximations. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 10, 301, 180)] public enum CurveParametricApproximationType Remarks This enum is available since v7.10.301.180. Fields Name Description ArcLength Parametric approximation sticks to arc length curve parametrization. Free Free parametric approximation. Local Parametric approximation sticks to local curve parametrization. None No approximation."
  },
  "api/kernel/TopSolid.Kernel.Automating.CurveType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.CurveType.html",
    "title": "Enum CurveType | TopSolid Automation website",
    "keywords": "Enum CurveType Defines the various types of curves attached to shape edges or sketch segments. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum CurveType Remarks This enum is available since v7.6. Fields Name Description BSpline B-spline. Circle Circular arc. Ellipse Elliptic arc. Intersection Intersection curve (intersection between two surfaces, available since v7.12). Line Straight line. None No curve attached. Polyline Polyline (available since v7.12). SPCurve Surface parameter curve (defined by a 2D curve in a surface parameter space, available since v7.12). Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.DateTimeProperty.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.DateTimeProperty.html",
    "title": "Class DateTimeProperty | TopSolid Automation website",
    "keywords": "Class DateTimeProperty Represents a date and time property. Inheritance System.Object Property DateTimeProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 12, 0, 0)] public class DateTimeProperty : Property Remarks This class is available since v7.12. Constructors DateTimeProperty(DateTime) Initializes a new instance of the DateTimeProperty class. Declaration public DateTimeProperty(DateTime inValue) Parameters Type Name Description System.DateTime inValue Value. Fields Value Value. Declaration public DateTime Value Field Value Type Description System.DateTime Properties Type Gets the property type. Declaration public override PropertyType Type { get; } Property Value Type Description PropertyType Overrides Property.Type"
  },
  "api/kernel/TopSolid.Kernel.Automating.Direction2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Direction2D.html",
    "title": "Struct Direction2D | TopSolid Automation website",
    "keywords": "Struct Direction2D Represents a geometric 2D direction. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Direction2D Remarks The direction is defined by a unit vector, so (X * X + Y * Y) = 1. This structure is available since v7.6. Constructors Direction2D(Double, Double) Initializes a new instance of the Direction2D structure with its coordinates. Declaration public Direction2D(double inX, double inY) Parameters Type Name Description System.Double inX X component. System.Double inY Y component. Fields DX Positive X direction, i.e. (1,0). Declaration public static readonly Direction2D DX Field Value Type Description Direction2D DY Positive Y direction, i.e. (0,1). Declaration public static readonly Direction2D DY Field Value Type Description Direction2D X X component. Declaration public double X Field Value Type Description System.Double Y Y component. Declaration public double Y Field Value Type Description System.Double Methods IsParallelTo(Direction2D, Boolean) Tells whether this direction is parallel to another direction. Declaration public bool IsParallelTo(Direction2D inDirection, bool inSense) Parameters Type Name Description Direction2D inDirection Direction to compare with. System.Boolean inSense Sense is meaningful. Returns Type Description System.Boolean This direction is parallel to the specified direction. Remarks Two directions are considered parallel if they make an angle of less than AngularPrecision . Operators Division(Direction2D, Double) Divides a direction by a double value. Declaration public static Vector2D operator /(Direction2D inDirection, double inD) Parameters Type Name Description Direction2D inDirection Left hand side direction. System.Double inD Right hand side double. Returns Type Description Vector2D Scaled vector. ExclusiveOr(Direction2D, Direction2D) Computes the cross product of two directions. Declaration public static double operator ^(Direction2D inDirection1, Direction2D inDirection2) Parameters Type Name Description Direction2D inDirection1 Left hand side direction. Direction2D inDirection2 Right hand side direction. Returns Type Description System.Double Directions' cross product \"Z\" component. Implicit(Direction2D to Vector2D) Casts a direction into a vector. Declaration public static implicit operator Vector2D(Direction2D inDirection) Parameters Type Name Description Direction2D inDirection Direction to cast. Returns Type Description Vector2D Multiply(Double, Direction2D) Multiplies a double value with a direction. Declaration public static Vector2D operator *(double inD, Direction2D inDirection) Parameters Type Name Description System.Double inD Left hand side double. Direction2D inDirection Right hand side direction. Returns Type Description Vector2D Scaled vector. Multiply(Direction2D, Double) Multiplies a direction with a double value. Declaration public static Vector2D operator *(Direction2D inDirection, double inD) Parameters Type Name Description Direction2D inDirection Left hand side direction. System.Double inD Right hand side double. Returns Type Description Vector2D Scaled vector. Multiply(Direction2D, Direction2D) Computes the dot product of two directions. Declaration public static double operator *(Direction2D inDirection1, Direction2D inDirection2) Parameters Type Name Description Direction2D inDirection1 Left hand side direction. Direction2D inDirection2 Right hand side direction. Returns Type Description System.Double Vectors' dot product. UnaryNegation(Direction2D) Negates a direction. Declaration public static Direction2D operator -(Direction2D inDirection) Parameters Type Name Description Direction2D inDirection Direction to negate. Returns Type Description Direction2D Negated direction."
  },
  "api/kernel/TopSolid.Kernel.Automating.Direction3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Direction3D.html",
    "title": "Struct Direction3D | TopSolid Automation website",
    "keywords": "Struct Direction3D Represents a geometric 3D direction. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Direction3D Remarks The direction is defined by a unit vector, so (X * X + Y * Y + Z * Z) = 1. This structure is available since v7.6. Constructors Direction3D(Double, Double, Double) Initializes a new instance of the Direction3D structure with its coordinates. Declaration public Direction3D(double inX, double inY, double inZ) Parameters Type Name Description System.Double inX X component. System.Double inY Y component. System.Double inZ Z component. Fields DX Positive X direction, i.e. (1,0,0). Declaration public static readonly Direction3D DX Field Value Type Description Direction3D DY Positive Y direction, i.e. (0,1,0). Declaration public static readonly Direction3D DY Field Value Type Description Direction3D DZ Positive Z direction, i.e. (0,0,1). Declaration public static readonly Direction3D DZ Field Value Type Description Direction3D X X component. Declaration public double X Field Value Type Description System.Double Y Y component. Declaration public double Y Field Value Type Description System.Double Z Z component. Declaration public double Z Field Value Type Description System.Double Methods IsParallelTo(Direction3D, Boolean) Tells whether this direction is parallel to another direction. Declaration public bool IsParallelTo(Direction3D inDirection, bool inSense) Parameters Type Name Description Direction3D inDirection Direction to compare with. System.Boolean inSense Sense is meaningful. Returns Type Description System.Boolean This direction is parallel to the specified direction. Remarks Two directions are considered parallel if they make an angle of less than AngularPrecision . Operators Division(Direction3D, Double) Divides a direction by a double value. Declaration public static Vector3D operator /(Direction3D inDirection, double inD) Parameters Type Name Description Direction3D inDirection Left hand side direction. System.Double inD Right hand side double. Returns Type Description Vector3D Scaled vector. ExclusiveOr(Direction3D, Direction3D) Computes the cross product of two directions. Declaration public static Vector3D operator ^(Direction3D inDirection1, Direction3D inDirection2) Parameters Type Name Description Direction3D inDirection1 Left hand side direction. Direction3D inDirection2 Right hand side direction. Returns Type Description Vector3D Vectors' cross product. Implicit(Direction3D to Vector3D) Casts a direction into a vector. Declaration public static implicit operator Vector3D(Direction3D inDirection) Parameters Type Name Description Direction3D inDirection Direction to cast. Returns Type Description Vector3D Multiply(Double, Direction3D) Multiplies a double value with a direction. Declaration public static Vector3D operator *(double inD, Direction3D inDirection) Parameters Type Name Description System.Double inD Left hand side double. Direction3D inDirection Right hand side direction. Returns Type Description Vector3D Scaled vector. Multiply(Direction3D, Double) Multiplies a direction with a double value. Declaration public static Vector3D operator *(Direction3D inDirection, double inD) Parameters Type Name Description Direction3D inDirection Left hand side direction. System.Double inD Right hand side double. Returns Type Description Vector3D Scaled vector. Multiply(Direction3D, Direction3D) Computes the dot product of two directions. Declaration public static double operator *(Direction3D inDirection1, Direction3D inDirection2) Parameters Type Name Description Direction3D inDirection1 Left hand side direction. Direction3D inDirection2 Right hand side direction. Returns Type Description System.Double Vectors' dot product. UnaryNegation(Direction3D) Negates a direction. Declaration public static Direction3D operator -(Direction3D inDirection) Parameters Type Name Description Direction3D inDirection Direction to negate. Returns Type Description Direction3D Negated direction."
  },
  "api/kernel/TopSolid.Kernel.Automating.DocumentId.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.DocumentId.html",
    "title": "Struct DocumentId | TopSolid Automation website",
    "keywords": "Struct DocumentId Represents a TopSolid document identifier. Implements System.IEquatable < DocumentId > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct DocumentId : IEquatable<DocumentId> Remarks This structure is available since v7.6. Constructors DocumentId(String) Initializes a new instance of the DocumentId structure. Declaration public DocumentId(string inPdmDocumentId) Parameters Type Name Description System.String inPdmDocumentId PDM document identifier, or null if empty. Fields Empty Empty identifier. Declaration public static readonly DocumentId Empty Field Value Type Description DocumentId Properties IsEmpty Tells whether the document identifier is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean PdmDocumentId Gets the PDM document identifier. Declaration public readonly string PdmDocumentId { get; } Property Value Type Description System.String Methods Equals(Object) Declaration public override bool Equals(object inObject) Parameters Type Name Description System.Object inObject Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(DocumentId) Declaration public bool Equals(DocumentId other) Parameters Type Name Description DocumentId other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators Equality(DocumentId, DocumentId) Tells whether two document identifiers are equal. Declaration public static bool operator ==(DocumentId inDocumentId1, DocumentId inDocumentId2) Parameters Type Name Description DocumentId inDocumentId1 First document identifier. DocumentId inDocumentId2 Second document identifier. Returns Type Description System.Boolean Document identifiers are equal. Inequality(DocumentId, DocumentId) Tells whether two document identifiers are different. Declaration public static bool operator !=(DocumentId inDocumentId1, DocumentId inDocumentId2) Parameters Type Name Description DocumentId inDocumentId1 First document identifier. DocumentId inDocumentId2 Second document identifier. Returns Type Description System.Boolean Document identifiers are different. Implements System.IEquatable<T>"
  },
  "api/kernel/TopSolid.Kernel.Automating.DocumentProperty.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.DocumentProperty.html",
    "title": "Class DocumentProperty | TopSolid Automation website",
    "keywords": "Class DocumentProperty Represents a Document property. Inheritance System.Object Property DocumentProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public class DocumentProperty : Property Remarks This class is available since v7.17. Constructors DocumentProperty(DocumentId) Initializes a new instance of the DocumentProperty class. Declaration public DocumentProperty(DocumentId inValue) Parameters Type Name Description DocumentId inValue Value. Fields Value The value Declaration public DocumentId Value Field Value Type Description DocumentId Properties Type Gets the property type. Declaration public override PropertyType Type { get; } Property Value Type Description PropertyType Overrides Property.Type"
  },
  "api/kernel/TopSolid.Kernel.Automating.DocumentReferenceType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.DocumentReferenceType.html",
    "title": "Enum DocumentReferenceType | TopSolid Automation website",
    "keywords": "Enum DocumentReferenceType Defines the various types of document references. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public enum DocumentReferenceType Remarks This enum is available since v7.17.000.000. Fields Name Description DependenceReference Dependence Reference. LogicalReference Logical Reference. TrackingReference Tracking Reference."
  },
  "api/kernel/TopSolid.Kernel.Automating.ElementId.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ElementId.html",
    "title": "Struct ElementId | TopSolid Automation website",
    "keywords": "Struct ElementId Represents an element identifier. Implements System.IEquatable < ElementId > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct ElementId : IEquatable<ElementId> Remarks This structure is available since v7.6. Constructors ElementId(DocumentId, Int32) Initializes a new instance of the ElementId structure. Declaration public ElementId(DocumentId inDocumentId, int inId) Parameters Type Name Description DocumentId inDocumentId Document of the element. System.Int32 inId Identifier of the element within its document, or 0 if empty. Fields Empty Empty identifier. Declaration public static readonly ElementId Empty Field Value Type Description ElementId Properties DocumentId Gets the identifier of the document of the element. Declaration public readonly DocumentId DocumentId { get; } Property Value Type Description DocumentId Id Gets the identifier of the element within its document. Declaration public readonly int Id { get; } Property Value Type Description System.Int32 IsEmpty Tells whether the element identifier is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean Methods Equals(Object) Declaration public override bool Equals(object inObject) Parameters Type Name Description System.Object inObject Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(ElementId) Declaration public bool Equals(ElementId other) Parameters Type Name Description ElementId other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators Equality(ElementId, ElementId) Tells whether two element identifiers are equal. Declaration public static bool operator ==(ElementId inElementId1, ElementId inElementId2) Parameters Type Name Description ElementId inElementId1 First element identifier. ElementId inElementId2 Second element identifier. Returns Type Description System.Boolean Element identifiers are equal. Inequality(ElementId, ElementId) Tells whether two element identifiers are different. Declaration public static bool operator !=(ElementId inElementId1, ElementId inElementId2) Parameters Type Name Description ElementId inElementId1 First element identifier. ElementId inElementId2 Second element identifier. Returns Type Description System.Boolean Element identifiers are different. Implements System.IEquatable<T>"
  },
  "api/kernel/TopSolid.Kernel.Automating.ElementItemId.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ElementItemId.html",
    "title": "Struct ElementItemId | TopSolid Automation website",
    "keywords": "Struct ElementItemId Represents an element item identifier. Implements System.IEquatable < ElementItemId > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public struct ElementItemId : IEquatable<ElementItemId> Remarks An element item identifier uniquely identifies an element item, it is made of an element identifier that uniquely identifies the element, and an item label that uniquely identifies the item within the element. This structure is available since v7.7. Constructors ElementItemId(ElementId, ItemLabel) Initializes a new instance of the ElementItemId structure. Declaration public ElementItemId(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of the element. ItemLabel inItemLabel Label of the item within its element. Fields Empty Empty identifier. Declaration public static readonly ElementItemId Empty Field Value Type Description ElementItemId Properties DocumentId Gets the identifier of the document of the element. Declaration public readonly DocumentId DocumentId { get; } Property Value Type Description DocumentId ElementId Gets the identifier of the element. Declaration public readonly ElementId ElementId { get; } Property Value Type Description ElementId IsEmpty Tells whether the element item identifier is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean ItemLabel Gets the label of the item within the element. Declaration public readonly ItemLabel ItemLabel { get; } Property Value Type Description ItemLabel ItemType Gets the type of the item within the element. Declaration public readonly byte ItemType { get; } Property Value Type Description System.Byte Remarks Some types are defined in the ItemType enum. Methods Equals(Object) Declaration public override bool Equals(object inObject) Parameters Type Name Description System.Object inObject Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(ElementItemId) Declaration public bool Equals(ElementItemId other) Parameters Type Name Description ElementItemId other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators Equality(ElementItemId, ElementItemId) Tells whether two element item identifiers are equal. Declaration public static bool operator ==(ElementItemId inElementItemId1, ElementItemId inElementItemId2) Parameters Type Name Description ElementItemId inElementItemId1 First element item identifier. ElementItemId inElementItemId2 Second element item identifier. Returns Type Description System.Boolean Element item identifiers are equal. Inequality(ElementItemId, ElementItemId) Tells whether two element item identifiers are different. Declaration public static bool operator !=(ElementItemId inElementItemId1, ElementItemId inElementItemId2) Parameters Type Name Description ElementItemId inElementItemId1 First element item identifier. ElementItemId inElementItemId2 Second element item identifier. Returns Type Description System.Boolean Element item identifiers are different. Implements System.IEquatable<T>"
  },
  "api/kernel/TopSolid.Kernel.Automating.EnumerationProperty.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.EnumerationProperty.html",
    "title": "Class EnumerationProperty | TopSolid Automation website",
    "keywords": "Class EnumerationProperty Represents an enumeration property. Inheritance System.Object Property EnumerationProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 12, 0, 0)] public class EnumerationProperty : Property Remarks This class is available since v7.12. Constructors EnumerationProperty(Guid, Int32) Initializes a new instance of the EnumerationProperty class. Declaration public EnumerationProperty(Guid inEnumGuid, int inValue) Parameters Type Name Description System.Guid inEnumGuid GUID of the enumeration class. System.Int32 inValue Value. Fields EnumGuid GUID of the enumeration class. Declaration public Guid EnumGuid Field Value Type Description System.Guid Value Value. Declaration public int Value Field Value Type Description System.Int32 Properties Type Gets the property type. Declaration public override PropertyType Type { get; } Property Value Type Description PropertyType Overrides Property.Type"
  },
  "api/kernel/TopSolid.Kernel.Automating.FacesDivisionType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.FacesDivisionType.html",
    "title": "Enum FacesDivisionType | TopSolid Automation website",
    "keywords": "Enum FacesDivisionType Defines the various types of how faces should divide up a shape passing through profiles. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 10, 301, 180)] public enum FacesDivisionType Remarks This enum is available since v7.10.301.180. Fields Name Description Columns The shape has columns of faces corresponding to the section segments. Grid The shape has a grid of faces corresponding to section segments (as for columns type) and path segments. Minimum The shape has a minimum number of faces. None No division."
  },
  "api/kernel/TopSolid.Kernel.Automating.Frame2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Frame2D.html",
    "title": "Struct Frame2D | TopSolid Automation website",
    "keywords": "Struct Frame2D Represents a geometric 2D frame. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Frame2D Remarks This structure is available since v7.6. Constructors Frame2D(Point2D, Direction2D, Direction2D) Initializes a new instance of the Frame2D structure with a specified origin and directions. Declaration public Frame2D(Point2D inOrigin, Direction2D inXDirection, Direction2D inYDirection) Parameters Type Name Description Point2D inOrigin Frame origin. Direction2D inXDirection Frame X direction. Direction2D inYDirection Frame Y direction, orthogonal to inXDirection . Fields Origin Frame origin. Declaration public Point2D Origin Field Value Type Description Point2D OXY (O,+X,+Y) absolute frame. Declaration public static readonly Frame2D OXY Field Value Type Description Frame2D XDirection Frame X direction. Declaration public Direction2D XDirection Field Value Type Description Direction2D YDirection Frame Y direction, orthogonal to XDirection . Declaration public Direction2D YDirection Field Value Type Description Direction2D Methods ToAbsolute(Axis2D) Converts an axis with coordinates expressed in this frame into the same axis with coordinates expressed in the absolute frame. Declaration public Axis2D ToAbsolute(Axis2D inAxis) Parameters Type Name Description Axis2D inAxis Axis with coordinates expressed in this frame. Returns Type Description Axis2D Axis with coordinates expressed in the absolute frame. ToAbsolute(Direction2D) Converts a direction with coordinates expressed in this frame into the same direction with coordinates expressed in the absolute frame. Declaration public Direction2D ToAbsolute(Direction2D inDirection) Parameters Type Name Description Direction2D inDirection Direction with coordinates expressed in this frame. Returns Type Description Direction2D Direction with coordinates expressed in the absolute frame. ToAbsolute(Frame2D) Converts a frame with coordinates expressed in this frame into the same frame with coordinates expressed in the absolute frame. Declaration public Frame2D ToAbsolute(Frame2D inFrame) Parameters Type Name Description Frame2D inFrame Frame with coordinates expressed in this frame. Returns Type Description Frame2D Frame with coordinates expressed in the absolute frame. ToAbsolute(Point2D) Converts a point with coordinates expressed in this frame into the same point with coordinates expressed in the absolute frame. Declaration public Point2D ToAbsolute(Point2D inPoint) Parameters Type Name Description Point2D inPoint Point with coordinates expressed in this frame. Returns Type Description Point2D Point with coordinates expressed in the absolute frame. ToAbsolute(Vector2D) Converts a vector with coordinates expressed in this frame into the same vector with coordinates expressed in the absolute frame. Declaration public Vector2D ToAbsolute(Vector2D inVector) Parameters Type Name Description Vector2D inVector Vector with coordinates expressed in this frame. Returns Type Description Vector2D Vector with coordinates expressed in the absolute frame. ToRelative(Axis2D) Converts an axis with coordinates expressed in the absolute frame into the same axis with coordinates expressed in this frame. Declaration public Axis2D ToRelative(Axis2D inAxis) Parameters Type Name Description Axis2D inAxis Axis with coordinates expressed in the absolute frame. Returns Type Description Axis2D Axis with coordinates expressed in this frame. ToRelative(Direction2D) Converts a direction with coordinates expressed in the absolute frame into the same direction with coordinates expressed in this frame. Declaration public Direction2D ToRelative(Direction2D inDirection) Parameters Type Name Description Direction2D inDirection Direction with coordinates expressed in the absolute frame. Returns Type Description Direction2D Direction with coordinates expressed in this frame. ToRelative(Frame2D) Converts a frame with coordinates expressed in the absolute frame into the same frame with coordinates expressed in this frame. Declaration public Frame2D ToRelative(Frame2D inFrame) Parameters Type Name Description Frame2D inFrame Frame with coordinates expressed in the absolute frame. Returns Type Description Frame2D Frame with coordinates expressed in this frame. ToRelative(Point2D) Converts a point with coordinates expressed in the absolute frame into the same point with coordinates expressed in this frame. Declaration public Point2D ToRelative(Point2D inPoint) Parameters Type Name Description Point2D inPoint Point with coordinates expressed in the absolute frame. Returns Type Description Point2D Point with coordinates expressed in this frame. ToRelative(Vector2D) Converts a vector with coordinates expressed in the absolute frame into the same vector with coordinates expressed in this frame. Declaration public Vector2D ToRelative(Vector2D inVector) Parameters Type Name Description Vector2D inVector Vector with coordinates expressed in the absolute frame. Returns Type Description Vector2D Vector with coordinates expressed in this frame."
  },
  "api/kernel/TopSolid.Kernel.Automating.Frame3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Frame3D.html",
    "title": "Struct Frame3D | TopSolid Automation website",
    "keywords": "Struct Frame3D Represents a geometric 3D frame. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Frame3D Remarks This structure is available since v7.6. Constructors Frame3D(Point3D, Direction3D, Direction3D, Direction3D) Initializes a new instance of the Frame3D structure with a specified origin and directions. Declaration public Frame3D(Point3D inOrigin, Direction3D inXDirection, Direction3D inYDirection, Direction3D inZDirection) Parameters Type Name Description Point3D inOrigin Frame origin. Direction3D inXDirection Frame X direction. Direction3D inYDirection Frame Y direction, orthogonal to inXDirection . Direction3D inZDirection Frame Z direction, equal to inXDirection ^ inYDirection . Fields Origin Frame origin. Declaration public Point3D Origin Field Value Type Description Point3D OXYZ (O,+X,+Y,+Z) absolute frame. Declaration public static readonly Frame3D OXYZ Field Value Type Description Frame3D XDirection Frame X direction. Declaration public Direction3D XDirection Field Value Type Description Direction3D YDirection Frame Y direction, orthogonal to XDirection . Declaration public Direction3D YDirection Field Value Type Description Direction3D ZDirection Frame Z direction, equal to XDirection ^ YDirection . Declaration public Direction3D ZDirection Field Value Type Description Direction3D Methods ToAbsolute(Axis3D) Converts an axis with coordinates expressed in this frame into the same axis with coordinates expressed in the absolute frame. Declaration public Axis3D ToAbsolute(Axis3D inAxis) Parameters Type Name Description Axis3D inAxis Axis with coordinates expressed in this frame. Returns Type Description Axis3D Axis with coordinates expressed in the absolute frame. ToAbsolute(Direction3D) Converts a direction with coordinates expressed in this frame into the same direction with coordinates expressed in the absolute frame. Declaration public Direction3D ToAbsolute(Direction3D inDirection) Parameters Type Name Description Direction3D inDirection Direction with coordinates expressed in this frame. Returns Type Description Direction3D Direction with coordinates expressed in the absolute frame. ToAbsolute(Frame3D) Converts a frame with coordinates expressed in this frame into the same frame with coordinates expressed in the absolute frame. Declaration public Frame3D ToAbsolute(Frame3D inFrame) Parameters Type Name Description Frame3D inFrame Frame with coordinates expressed in this frame. Returns Type Description Frame3D Frame with coordinates expressed in the absolute frame. ToAbsolute(Plane3D) Converts a plane with coordinates expressed in this frame into the same plane with coordinates expressed in the absolute frame. Declaration public Plane3D ToAbsolute(Plane3D inPlane) Parameters Type Name Description Plane3D inPlane Plane with coordinates expressed in this frame. Returns Type Description Plane3D Plane with coordinates expressed in the absolute frame. ToAbsolute(Point3D) Converts a point with coordinates expressed in this frame into the same point with coordinates expressed in the absolute frame. Declaration public Point3D ToAbsolute(Point3D inPoint) Parameters Type Name Description Point3D inPoint Point with coordinates expressed in this frame. Returns Type Description Point3D Point with coordinates expressed in the absolute frame. ToAbsolute(Vector3D) Converts a vector with coordinates expressed in this frame into the same vector with coordinates expressed in the absolute frame. Declaration public Vector3D ToAbsolute(Vector3D inVector) Parameters Type Name Description Vector3D inVector Vector with coordinates expressed in this frame. Returns Type Description Vector3D Vector with coordinates expressed in the absolute frame. ToRelative(Axis3D) Converts an axis with coordinates expressed in the absolute frame into the same axis with coordinates expressed in this frame. Declaration public Axis3D ToRelative(Axis3D inAxis) Parameters Type Name Description Axis3D inAxis Axis with coordinates expressed in the absolute frame. Returns Type Description Axis3D Axis with coordinates expressed in this frame. ToRelative(Direction3D) Converts a direction with coordinates expressed in the absolute frame into the same direction with coordinates expressed in this frame. Declaration public Direction3D ToRelative(Direction3D inDirection) Parameters Type Name Description Direction3D inDirection Direction with coordinates expressed in the absolute frame. Returns Type Description Direction3D Direction with coordinates expressed in this frame. ToRelative(Frame3D) Converts a frame with coordinates expressed in the absolute frame into the same frame with coordinates expressed in this frame. Declaration public Frame3D ToRelative(Frame3D inFrame) Parameters Type Name Description Frame3D inFrame Frame with coordinates expressed in the absolute frame. Returns Type Description Frame3D Frame with coordinates expressed in this frame. ToRelative(Plane3D) Converts a plane with coordinates expressed in the absolute frame into the same plane with coordinates expressed in this frame. Declaration public Plane3D ToRelative(Plane3D inPlane) Parameters Type Name Description Plane3D inPlane Plane with coordinates expressed in the absolute frame. Returns Type Description Plane3D Plane with coordinates expressed in this frame. ToRelative(Point3D) Converts a point with coordinates expressed in the absolute frame into the same point with coordinates expressed in this frame. Declaration public Point3D ToRelative(Point3D inPoint) Parameters Type Name Description Point3D inPoint Point with coordinates expressed in the absolute frame. Returns Type Description Point3D Point with coordinates expressed in this frame. ToRelative(Vector3D) Converts a vector with coordinates expressed in the absolute frame into the same vector with coordinates expressed in this frame. Declaration public Vector3D ToRelative(Vector3D inVector) Parameters Type Name Description Vector3D inVector Vector with coordinates expressed in the absolute frame. Returns Type Description Vector3D Vector with coordinates expressed in this frame."
  },
  "api/kernel/TopSolid.Kernel.Automating.GeometryType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.GeometryType.html",
    "title": "Enum GeometryType | TopSolid Automation website",
    "keywords": "Enum GeometryType Defines the various types of geometric entities. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum GeometryType Remarks This enum is available since v7.6. Fields Name Description Axis Axis. Deformation Deformation. Frame Frame. None Not a geometric entity. Pattern Pattern. Plane Plane. Point Point. Shape Shape. Sketch Sketch. Transform Transform. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.html",
    "title": "Namespace TopSolid.Kernel.Automating | TopSolid Automation website",
    "keywords": "Namespace TopSolid.Kernel.Automating Classes AvailableSinceVersionAttribute Gives the version since when an interface, method, ... is available. BooleanProperty Represents a Boolean property. CodeProperty Represents a Document property. DateTimeProperty Represents a date and time property. DocumentProperty Represents a Document property. EnumerationProperty Represents an enumeration property. IntegerProperty Represents a integer property. Property Represents a general property. RealProperty Represents a real property. SmartAxis2D Represents a 2D smart axis. SmartAxis3D Represents a 3D smart axis. SmartBoolean Represents a smart Boolean value. SmartCode Represents a smart code. SmartDirection2D Represents a 2D smart direction. SmartDirection3D Represents a 3D smart direction. SmartDocument Represents a smart document value. SmartEnumeration Represents a smart enumeration value. SmartFamily Represents a smart family. SmartFrame2D Represents a 2D smart frame. SmartFrame3D Represents a 3D smart frame. SmartInteger Represents a smart integer value. SmartObject Represents a general smart object. SmartPlane3D Represents a 3D smart plane. SmartPoint2D Represents a 2D smart point. SmartPoint3D Represents a 3D smart point. SmartProfile2D Represents a 2D smart profile. SmartProfile3D Represents a 3D smart profile. SmartReal Represents a smart real value. SmartSection3D Represents a 3D smart section. SmartShape Represents a smart shape. SmartText Represents a smart text value. SmartTexture Represents a smart texture. SmartUserEnumeration Represents a smart user enumeration value. TextProperty Represents a text property. TopSolidHost Represents TopSolid host providing WCF services for automating. TopSolidHostInstance Represents a TopSolid host instance providing WCF services for automating. UserEnumerationProperty Represents a user enumeration property. Structs Axis2D Represents a geometric 2D axis. Axis3D Represents a geometric 3D axis. Color Represents a graphic color. Direction2D Represents a geometric 2D direction. Direction3D Represents a geometric 3D direction. DocumentId Represents a TopSolid document identifier. ElementId Represents an element identifier. ElementItemId Represents an element item identifier. Frame2D Represents a geometric 2D frame. Frame3D Represents a geometric 3D frame. ItemLabel Represents an element item label. KeyValue Represents a key-value string pair. License Represents a license. PdmMajorRevisionId Represents a PDM major revision identifier. PdmMinorRevisionId Represents a PDM minor revision id. PdmObjectId Represents a PDM object identifier. PdmProjectFolderId Represents a PDM project folder identifier. PdmSecurityUserOrGroupPermissions Represents a security user or group list of permissions. Plane3D Represents a geometric 3D plane. Point2D Represents a geometric 2D point. Point3D Represents a geometric 3D point. PropertyDefinition Represents a property definition. Real Represents a real value with units. TextureImage Represents a texture image. Transform2D Represents a 2D transformation. Transform3D Represents a 3D transformation. UserQuestion Represents a question asked to the user. Vector2D Represents a geometric 2D vector. Vector3D Represents a geometric 3D vector. Interfaces IApplication Gives access to the application. IClassifications Gives access to classifications. IDocuments Gives access to documents. IDocumentsEvents Implemented by clients wishing to receive documents events. IElements Gives access to elements. IEntities Gives access to entities. IFamilies Gives access to families. IGeometries2D Gives access to 2D geometric entities. IGeometries3D Gives access to 3D geometric entities. ILicenses Gives access to methods to read and interact with licenses. IMaterials Gives access to methods to read and interact with materials and textures. IOperations Gives access to operations. IOptions Gives access to the options of a document. IParameters Gives access to parameter entities. IPdm Gives access to the PDM. IPdmAdmin Gives access to the PDM administration. IPdmSecurity Gives access to the PDM security. IPdmWorkflow Gives access to the PDM workflow. IShapes Gives access to shape entities. ISketches2D Gives access to 2D sketch entities. ISketches3D Gives access to 3D sketch entities. ITextures Gives access to methods to read or write in a texture document. IUnits Gives access to units. IUser Gives access to the user. IVisualization3D Gives access to 3D visualization. Enums CompressionType Defines the various types of compressions. CurveParametricApproximationType Defines the various types of curve parametric approximations. CurveType Defines the various types of curves attached to shape edges or sketch segments. DocumentReferenceType Defines the various types of document references. FacesDivisionType Defines the various types of how faces should divide up a shape passing through profiles. GeometryType Defines the various types of geometric entities. ItemType Defines various types of element items. LicenseType Defines the various types of licenses. LoopType Defines the various types loops. ModifierType Defines the various types of modifier. ParameterRelayType Defines the various types of parameter relays. ParameterType Defines the various types of parameter entities. PdmLifeCycleMainState Defines the different life cycle main states of an item major revision. PdmObjectState Defines the various states of a PDM object. PdmObjectType Defines the various types of PDM objects. PdmRight Defines the various PDM rights. PdmSecurityPermission Defines the various permissions of a security. PreviewMode Defines the various types of document preview modes. PrintColorMapping Defines the color mapping when printing. PropertyType Defines the various types of properties. RealParameterConstraintsMode Defines the various modes of real parameter constraints. RealParameterDiscretizationMode Defines the various modes of real parameter constraints. RenderMode Defines the various types of graphic views render modes. ScriptType Defines the various types of scripts. ShapeType Defines the various types of shapes. SmartAxis2DType Defines the various types of 2D smart axes. SmartAxis3DType Defines the various types of 3D smart axes. SmartBooleanType Defines the various types of smart Boolean values. SmartCodeType Defines the various types of smart codes. SmartDirection2DType Defines the various types of 2D smart directions. SmartDirection3DType Defines the various types of 3D smart directions. SmartDocumentType Defines the various types of smart document. SmartEnumerationType Defines the various types of smart enumeration values. SmartFrame2DType Defines the various types of 2D smart frames. SmartFrame3DType Defines the various types of 3D smart frames. SmartIntegerType Defines the various types of smart integer values. SmartPlane3DType Defines the various types of 3D smart planes. SmartPoint2DType Defines the various types of 2D smart points. SmartPoint3DType Defines the various types of 3D smart points. SmartProfile2DType Defines the various types of 2D smart profiles. SmartProfile3DType Defines the various types of 3D smart profiles. SmartRealType Defines the various types of smart real values. SmartSection3DType Defines the various types of 3D smart sections. SmartShapeType Defines the various types of smart shapes. SmartTextType Defines the various types of smart text values. SmartUserEnumerationType Defines the various types of smart user enumeration values. SurfaceType Defines the various types of surfaces attached to shape faces. TextureCategoryType Defines the various types of texture categories. TextureMappingType Defines the various types of texture mapping. ToleranceSymbolType Defines the various types of tolerance symbol. ToleranceZoneType Defines the various types of tolerance zone. UnitType Defines the various types of units. UserAnswerType Defines the various types of user answers. UserQuestionFlags Defines the various flags associated to the user question. WorkflowActionState Defines the various workflow action states."
  },
  "api/kernel/TopSolid.Kernel.Automating.IApplication.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IApplication.html",
    "title": "Interface IApplication | TopSolid Automation website",
    "keywords": "Interface IApplication Gives access to the application. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IApplication Remarks This interface is available since v7.6. Properties ActiveCommandFullName Gets the full name of the active command (i.e. \"TopSolid.Kernel.UI.D3.Shapes.Creations.BlockCommand\"). Declaration [AvailableSinceVersion(7, 12, 0, 0)] string ActiveCommandFullName { get; } Property Value Type Description System.String Remarks If there is no active command, null is returned. This property is available since v7.12. ActiveCommandName Gets the localized name of the active command, as it appears to the user in the menu. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string ActiveCommandName { get; } Property Value Type Description System.String Remarks If there is no active command, null is returned. This property is available since v7.6. CurrentPaperFormat Gets or sets the name of the current paper format. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string CurrentPaperFormat { get; set; } Property Value Type Description System.String Remarks This property is available since v7.6. CurrentPaperSource Gets or sets the name of the current paper source. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string CurrentPaperSource { get; set; } Property Value Type Description System.String Remarks This property is available since v7.6. CurrentPrinterName Gets or sets the name of the current printer. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string CurrentPrinterName { get; set; } Property Value Type Description System.String Remarks This property is available since v7.6. CurrentUICultureName Gets the name of the current UI culture of the application. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string CurrentUICultureName { get; } Property Value Type Description System.String Remarks The culture name is in the format \"[languagecode2]-[country/regioncode2]\", where [languagecode2] is a lowercase two-letter code derived from ISO 639-1 and [country/regioncode2] is an uppercase two-letter code derived from ISO 3166. This property is available since v7.7. Examples \"en-US\" for English (United States), \"fr-FR\" for French (France), \"fr-BE\" for French (Belgium), ... ExporterCount Gets the number of available document exporters. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int ExporterCount { get; } Property Value Type Description System.Int32 Remarks This property is available since v7.6. ImporterCount Gets the number of available document importers. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int ImporterCount { get; } Property Value Type Description System.Int32 Remarks This property is available since v7.6. IsWindowMaximized Tells whether the application window is maximized. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsWindowMaximized { get; } Property Value Type Description System.Boolean Remarks This property is available since v7.7. IsWindowMinimized Tells whether the application window is minimized. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsWindowMinimized { get; } Property Value Type Description System.Boolean Remarks This property is available since v7.7. PaperFormats Gets the names of the available paper formats for the current printer. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<string> PaperFormats { get; } Property Value Type Description List < System.String > Remarks This property is available since v7.6. PaperSources Gets the names of the available paper sources for the current printer. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<string> PaperSources { get; } Property Value Type Description List < System.String > Remarks This property is available since v7.6. PrinterNames Gets the names of the available printers. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<string> PrinterNames { get; } Property Value Type Description List < System.String > Remarks This property is available since v7.6. ProcessId Gets the identifier of application process. Declaration [AvailableSinceVersion(7, 10, 0, 0)] int ProcessId { get; } Property Value Type Description System.Int32 Version Gets the version of the application. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int Version { get; } Property Value Type Description System.Int32 Remarks The value returned is defined by: Major * 100000000 + Minor * 1000000 + Build * 1000 + Revision . For example, v7.5.200.100 is returned as: 705200100 . This method returns 0 if the application has just been started and is not ready yet. This property is available since v7.6. Methods BringToFrontWindow() Brings the application window to the front. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void BringToFrontWindow() Remarks This method is available since v7.7. EndJournaling() Ends journaling. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void EndJournaling() Remarks This method is available since v7.8. EndModification(Boolean, Boolean) Ends performing modifications. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void EndModification(bool inIsOk, bool inUpdates) Parameters Type Name Description System.Boolean inIsOk Whether the modifications have been successful. System.Boolean inUpdates Whether to perform an update. Remarks This method must be called after the StartModification(String, Boolean) method has been called and has returned true . If the modifications have not been successful, they are undone when possible. This method is available since v7.6. Examples if (TopSolidHost.Application.StartModification(\"My Modification\", false)) { try { // Perform my modification. TopSolidHost.Application.EndModification(true, true); } catch { TopSolidHost.Application.EndModification(false, false); } } GetCurrentPrinterConfiguration(out Real, out Real, out Real, out Real, out Real, out Real, out Real, out Real, out Real, out Real, out Real) Gets the current printer configuration. Declaration [AvailableSinceVersion(7, 13, 0, 0)] void GetCurrentPrinterConfiguration(out Real outLeftMargin, out Real outRightMargin, out Real outTopMargin, out Real outBottomMargin, out Real outHorizontalOffset, out Real outVerticalOffset, out Real outThinLineWidth, out Real outMediumThinLineWidth, out Real outMediumLineWidth, out Real outThickLineWidth, out Real outExtraThickLineWidth) Parameters Type Name Description Real outLeftMargin The left margin. Real outRightMargin The right margin. Real outTopMargin The top margin. Real outBottomMargin The bottom margin. Real outHorizontalOffset The horizontal offset. Real outVerticalOffset The vertical offset. Real outThinLineWidth Width of the thin line. Real outMediumThinLineWidth Width of the medium thin line. Real outMediumLineWidth Width of the medium line. Real outThickLineWidth Width of the thick line. Real outExtraThickLineWidth Width of the extra thick line. Remarks This method is available since v7.13. GetExporterFileType(Int32, out String, out String[]) Gets the type of files managed by an exporter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void GetExporterFileType(int inExporterIx, out string outFileTypeName, out string[] outFileExtensions) Parameters Type Name Description System.Int32 inExporterIx Index of exporter to analyze, within [0, ExporterCount -1]. System.String outFileTypeName Name of the type of the managed files (ex: \"Parasolid\", for Parasolid files). System.String [] outFileExtensions Extensions of the managed files, with the leading '.' character (ex: { \".x_t\", \".xmt_txt\", \".x_b\", \".xmt_bin\" } for Parasolid files). Remarks This method is available since v7.6. GetExporterOptions(Int32) Gets the options of an exporter. Declaration [AvailableSinceVersion(7, 8, 0, 0)] List<KeyValue> GetExporterOptions(int inExporterIx) Parameters Type Name Description System.Int32 inExporterIx Index of exporter to analyze, within [0, ExporterCount -1]. Returns Type Description List < KeyValue > Exporter options. Remarks This method is available since v7.8. GetImporterFileType(Int32, out String, out String[]) Gets the type of files managed by an importer. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void GetImporterFileType(int inImporterIx, out string outFileTypeName, out string[] outFileExtensions) Parameters Type Name Description System.Int32 inImporterIx Index of importer to analyze, within [0, ImporterCount -1]. System.String outFileTypeName Name of the type of the managed files (ex: \"Parasolid\", for Parasolid files). System.String [] outFileExtensions Extensions of the managed files, with the leading '.' character (ex: { \".x_t\", \".xmt_txt\", \".x_b\", \".xmt_bin\" } for Parasolid files). Remarks This method is available since v7.6. GetImporterOptions(Int32) Gets the options of an importer. Declaration [AvailableSinceVersion(7, 8, 0, 0)] List<KeyValue> GetImporterOptions(int inImporterIx) Parameters Type Name Description System.Int32 inImporterIx Index of importer to analyze, within [0, ImporterCount -1]. Returns Type Description List < KeyValue > Importer options. Remarks This method is available since v7.8. GetMachineIds(out String, out String) Gets the machine identifiers that may be used for fixed licenses. Declaration [AvailableSinceVersion(7, 11, 0, 0)] void GetMachineIds(out string outProtectionKeyId, out string outNetworkAdaptersId) Parameters Type Name Description System.String outProtectionKeyId Identifier based on protection key, or empty string if none detected. System.String outNetworkAdaptersId Identifier based on main network adapters, or empty string if none detected. Remarks This method is available since v7.11. InvokeCommand(String) Invokes a specified menu command. Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool InvokeCommand(string inFullName) Parameters Type Name Description System.String inFullName Full name of the command to invoke (i.e. \"TopSolid.Kernel.UI.D3.Shapes.Creations.BlockCommand\"). Returns Type Description System.Boolean The command has been found and invoked. Remarks This method is available since v7.12. IsExporterValid(Int32) Tells whether a valid license is available for an exporter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsExporterValid(int inExporterIx) Parameters Type Name Description System.Int32 inExporterIx Index of exporter to analyze, within [0, ExporterCount -1]. Returns Type Description System.Boolean Whether a valid license is available for the exporter. Remarks This method is available since v7.6. IsImporterValid(Int32) Tells whether a valid license is available for an importer. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsImporterValid(int inImporterIx) Parameters Type Name Description System.Int32 inImporterIx Index of importer to analyze, within [0, ImporterCount -1]. Returns Type Description System.Boolean Whether a valid license is available for the importer. Remarks This method is available since v7.6. IsLicenseValid(Int32) Tells whether a valid TopSolid license is available. Declaration [AvailableSinceVersion(7, 8, 303, 100)] bool IsLicenseValid(int inModuleId) Parameters Type Name Description System.Int32 inModuleId TopSolid module identifier. Returns Type Description System.Boolean Remarks This method is available since v7.8.303.100. IsProviderLicenseValid(String, String, Int32, Int32, Int32) Tells whether a valid license is available from a specified provider. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsProviderLicenseValid(string inProvider, string inPublicKey, int inVersionMajor, int inVersionMinor, int inModuleId) Parameters Type Name Description System.String inProvider License provider name. System.String inPublicKey License public key. System.Int32 inVersionMajor Version major number within [0,20]. System.Int32 inVersionMinor Version minor number within [0,99]. System.Int32 inModuleId Module identifier. Returns Type Description System.Boolean Remarks This method is available since v7.7. MaximizeWindow() Maximizes the application window. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void MaximizeWindow() Remarks This method is available since v7.7. MinimizeWindow() Minimizes the application window. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void MinimizeWindow() Remarks This method is available since v7.7. Quit(Boolean, Boolean) Terminates the applicaton. Declaration [AvailableSinceVersion(7, 7, 201, 160)] void Quit(bool inAsksUser, bool inSaves) Parameters Type Name Description System.Boolean inAsksUser Whether to ask the user for confirmation if some documents need to be saved. System.Boolean inSaves Whether to automatically save the documents that need it when the user is not asked for confirmation. Remarks This method is available since v7.7.201.160. RestoreWindow() Restores the application window that has been minimized or maximized. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void RestoreWindow() Remarks This method is available since v7.7. SearchEnumerationLocalizedText(EnumerationProperty) Searches for the localized text corresponding to a specified enumeration property. Declaration [AvailableSinceVersion(7, 12, 0, 0)] string SearchEnumerationLocalizedText(EnumerationProperty inProperty) Parameters Type Name Description EnumerationProperty inProperty Property to analyze. Returns Type Description System.String Corresponding localized text, or null if not found. Remarks This method is available since v7.12. SetCurrentPrinterConfiguration(Nullable<Real>, Nullable<Real>, Nullable<Real>, Nullable<Real>, Nullable<Real>, Nullable<Real>, Nullable<Real>, Nullable<Real>, Nullable<Real>, Nullable<Real>, Nullable<Real>) Sets the current printer configuration. Declaration [AvailableSinceVersion(7, 13, 0, 0)] void SetCurrentPrinterConfiguration(Real? inLeftMargin, Real? inRightMargin, Real? inTopMargin, Real? inBottomMargin, Real? inHorizontalOffset, Real? inVerticalOffset, Real? inThinLineWidth, Real? inMediumThinLineWidth, Real? inMediumLineWidth, Real? inThickLineWidth, Real? inExtraThickLineWidth) Parameters Type Name Description System.Nullable < Real > inLeftMargin The left margin. System.Nullable < Real > inRightMargin The right margin. System.Nullable < Real > inTopMargin The top margin. System.Nullable < Real > inBottomMargin The bottom margin. System.Nullable < Real > inHorizontalOffset The horizontal offset. System.Nullable < Real > inVerticalOffset The vertical offset. System.Nullable < Real > inThinLineWidth Width of the thin line. System.Nullable < Real > inMediumThinLineWidth Width of the medium thin line. System.Nullable < Real > inMediumLineWidth Width of the medium line. System.Nullable < Real > inThickLineWidth Width of the thick line. System.Nullable < Real > inExtraThickLineWidth Width of the extra thick line. Remarks This method is available since v7.13. SetJournalingMethodCall(Boolean, Boolean, Boolean) Sets the format of the journaling of method calls. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetJournalingMethodCall(bool inWritesHost, bool inWritesHostMember, bool inWritesArgumentName) Parameters Type Name Description System.Boolean inWritesHost Whether to write the name of the host. System.Boolean inWritesHostMember Whether to write the name of the host member. System.Boolean inWritesArgumentName Whether to write the name of the argument. Remarks The format of a method call is: [Host Name].[Host Member Name].[Method Name]([Argument Name] = value, ...). Example: TopSolidHost.Documents.SetName(inDocumentId = ..., inName = ...). This method is available since v7.8. SetSilentMode(Boolean) Sets the silent mode. Declaration [AvailableSinceVersion(7, 15, 400, 100)] void SetSilentMode(bool inIsSilent) Parameters Type Name Description System.Boolean inIsSilent Tells wether the silent mode is activated. Remarks This method is available since v7.15. StartJournaling(String) Starts journaling. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void StartJournaling(string inFilePath) Parameters Type Name Description System.String inFilePath Full path of the journal file to create without its \".TopAJ\" suffix. Remarks TopSolid can record every call to Automation performing an action in an external file called the journal file. This is a record of each Automation method called, with the arguments supplied to and results returned from those methods. This helps to debug applications that use Automation. The journal is text-based, to make it easy to examine in order to find out where problems are caused. This method is available since v7.8. StartModification(String, Boolean) Starts performing modifications. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool StartModification(string inUndoSequenceName, bool inIsUndoSequenceGhost) Parameters Type Name Description System.String inUndoSequenceName Name of the undo sequence. System.Boolean inIsUndoSequenceGhost Whether the undo sequence is hidden from the user. Returns Type Description System.Boolean Modifications can be performed. Remarks This method must be called before any modification is attempted. This method is available since v7.6. Examples if (TopSolidHost.Application.StartModification(\"My Modification\", false)) { try { // Perform my modification. TopSolidHost.Application.EndModification(true, true); } catch { TopSolidHost.Application.EndModification(false, false); } }"
  },
  "api/kernel/TopSolid.Kernel.Automating.IClassifications.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IClassifications.html",
    "title": "Interface IClassifications | TopSolid Automation website",
    "keywords": "Interface IClassifications Gives access to classifications. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 10, 0, 0)] public interface IClassifications Remarks This interface is available since v7.10. Methods CreateClass(DocumentId, String, String, String) Creates a first level class entity in a classification document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId CreateClass(DocumentId inDocumentId, string inDescription, string inCode, string inComment) Parameters Type Name Description DocumentId inDocumentId Identifier of the classification document to modify. System.String inDescription Class description. System.String inCode Class code, or empty string if none. System.String inComment Class comment, or empty string if none. Returns Type Description ElementId Identifier of the created class entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. The classification document must contain at least one level entity otherwise an exception is thrown. This method is available since v7.10. CreateLevel(DocumentId, String) Creates a level entity in a classification document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId CreateLevel(DocumentId inDocumentId, string inDescription) Parameters Type Name Description DocumentId inDocumentId Identifier of the classification document to modify. System.String inDescription Level description. Returns Type Description ElementId Identifier of the created level entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. CreateSubclass(ElementId, String, String, String) Creates a class entity as a subclass of a higher level class entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId CreateSubclass(ElementId inElementId, string inDescription, string inCode, string inComment) Parameters Type Name Description ElementId inElementId Identifier of the higher level class entity to modify. System.String inDescription Class description. System.String inCode Class code, or empty string if none. System.String inComment Class comment, or empty string if none. Returns Type Description ElementId Identifier of the created class entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. The classification document must contain enough level entities otherwise an exception is thrown. This method is available since v7.10. DeleteLevel(ElementId) Deletes a level entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void DeleteLevel(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the level entity to delete. Remarks Level entities cannot be deleted using the usual Delete(ElementId) method, this method must be used instead. The number of levels must always be at least equal to the classification depth as returned by FindClassificationDepth(DocumentId) . An exception will be thrown when attemting to delete a level entity that would result in breaking that condition. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. FindClassificationDepth(DocumentId) Finds the depth of the classification defined in a specified classification document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] int FindClassificationDepth(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the classification document to analyze. Returns Type Description System.Int32 Depth of the classification defined in a specified classification document, or 0 if there are no classes. Remarks The depth of a classification is defined by the maximum number of classes in a \"class - subclass - ... - subclass\" chain. This method is available since v7.10. GetClassCode(ElementId) Gets the code of a specified class entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] string GetClassCode(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the class entity to analyze. Returns Type Description System.String Class code or empty if none. Remarks This method is available since v7.10. GetClassErpId(ElementId) Gets the ERP identifier of a specified class entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] string GetClassErpId(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the class entity to analyze. Returns Type Description System.String Class ERP identifier or empty if none. Remarks This method is available since v7.10. GetClasses(DocumentId) Gets the first level classes entities that are in the classes folder of a classification document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] List<ElementId> GetClasses(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the classification document to analyze. Returns Type Description List < ElementId > Classes entities found. Remarks This method is available since v7.10. GetLevels(DocumentId) Gets the level entities that are in the levels folder of a classification document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] List<ElementId> GetLevels(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the classification document to analyze. Returns Type Description List < ElementId > Level entities found. Remarks This method is available since v7.10. GetMultipleClassifyingParameter(DocumentId) Gets the multiple classifying parameter entity of a classification document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetMultipleClassifyingParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the classification document to analyze. Returns Type Description ElementId Identifier of the multiple classifying parameter entity found. Remarks The multiple classifying parameter is a Boolean parameter, its value may be obtained and modified using the GetBooleanValue(ElementId) and SetBooleanValue(ElementId, Boolean) methods. This method is available since v7.10. GetSubclasses(ElementId) Gets the classes entities that are subclasses of a specified class entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] List<ElementId> GetSubclasses(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the class entity to analyze. Returns Type Description List < ElementId > Classes entities found as subclasses of the specified class entity. Remarks This method is available since v7.10. IsClassification(DocumentId) Tells whether a document is a classification document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] bool IsClassification(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is a classification document. Remarks This method is available since v7.10. SetClassCode(ElementId, String) Sets the code of a specified class entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void SetClassCode(ElementId inElementId, string inCode) Parameters Type Name Description ElementId inElementId Identifier of the class entity to modify. System.String inCode Class code, or empty string if none. Remarks This method is available since v7.10. SetClassErpId(ElementId, String) Sets the ERP identifier of a specified class entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void SetClassErpId(ElementId inElementId, string inErpId) Parameters Type Name Description ElementId inElementId Identifier of the class entity to modify. System.String inErpId Class ERP identifier, or empty string if none. Remarks This method is available since v7.10."
  },
  "api/kernel/TopSolid.Kernel.Automating.IDocuments.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IDocuments.html",
    "title": "Interface IDocuments | TopSolid Automation website",
    "keywords": "Interface IDocuments Gives access to documents. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IDocuments Remarks This interface is available since v7.6. Properties EditedDocument Gets or sets the document being edited. Declaration [AvailableSinceVersion(7, 6, 0, 0)] DocumentId EditedDocument { get; set; } Property Value Type Description DocumentId Remarks If there is no document being edited, Empty is returned. This property is available since v7.6. EditingContextDocument Gets the context document in which the edited document is being edited. Declaration [AvailableSinceVersion(7, 6, 0, 0)] DocumentId EditingContextDocument { get; } Property Value Type Description DocumentId Remarks If there is no editing context document, Empty is returned. This property is available since v7.6. Methods CanExport(Int32, DocumentId) Tells whether an exporter can export a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool CanExport(int inExporterIx, DocumentId inDocumentId) Parameters Type Name Description System.Int32 inExporterIx Index of exporter to analyze, within [0, ExporterCount -1]. DocumentId inDocumentId Identifier of document to export. Returns Type Description System.Boolean Whether the exporter can export the specified document. Remarks This method is available since v7.6. CanInclude(Int32, DocumentId) Tells whether an importer can include into a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool CanInclude(int inImporterIx, DocumentId inDocumentId) Parameters Type Name Description System.Int32 inImporterIx Index of importer to analyze, within [0, ImporterCount -1]. DocumentId inDocumentId Document where data are to be stored. Returns Type Description System.Boolean Whether the importer can include into the specified document. Remarks This method is available since v7.6. CanPrint(DocumentId) Tells whether a document can be printed. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool CanPrint(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Document to print. Returns Type Description System.Boolean Document can be printed. Remarks This method is available since v7.6. Close(DocumentId, Boolean, Boolean) Closes a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void Close(DocumentId inDocumentId, bool inAsksUser, bool inSaves) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to close. System.Boolean inAsksUser Whether to ask the user for confirmation if the document needs to be saved. System.Boolean inSaves Whether to automatically save the document if it needs it when the user is not asked for confirmation. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. CloseAll(Boolean, Boolean) Closes all documents. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void CloseAll(bool inAsksUser, bool inSaves) Parameters Type Name Description System.Boolean inAsksUser Whether to ask the user for confirmation if some documents need to be saved. System.Boolean inSaves Whether to automatically save the documents that need it when the user is not asked for confirmation. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. Consult(DocumentId) Opens a document in read only. Declaration [AvailableSinceVersion(7, 7, 201, 140)] void Consult(DocumentId ioDocumentId) Parameters Type Name Description DocumentId ioDocumentId Identifier of the document to consult. Remarks This method is available since v7.7.201.140. Drop(DocumentId) Drops a document into the document being edited. Declaration [AvailableSinceVersion(7, 8, 0, 0)] string Drop(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to drop. Returns Type Description System.String Full name of the drag and drop command invoked, or null if none. Remarks Calling this method is equivalent to manually dragging and dropping a document from the project tree into the document being edited. After this method is called, the following steps are directly managed by the user interface. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8. EnsureIsDirty(ref DocumentId) Ensures that a document is dirty before performing modifications. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void EnsureIsDirty(ref DocumentId ioDocumentId) Parameters Type Name Description DocumentId ioDocumentId Identifier of the document to modify (IN) / identifier of the document ready to be modified (OUT). Remarks A new revision of the document may have been created, in which case the returned document is not the same than the initial document. An exception is thrown if the document cannot be modified. This method must be called before any modification is attempted on a document. StartModification(String, Boolean) must be called before calling this method. This method is available since v7.6. Examples DocumentId docId = TopSolidHost.Documents.EditedDocument; if (docId.IsEmpty) return; if (TopSolidHost.Application.StartModification(\"My Modification\", false)) { try { TopSolidHost.Documents.EnsureIsDirty(ref docId); // Perform my modification on document. TopSolidHost.Application.EndModification(true, true); } catch { TopSolidHost.Application.EndModification(false, false); } } Exists(DocumentId) Tells whether a document still exists. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool Exists(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document still exists. Remarks This method is available since v7.6. Export(Int32, DocumentId, String) Exports a document to a file with conversion. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void Export(int inExporterIx, DocumentId inDocumentId, string inFullName) Parameters Type Name Description System.Int32 inExporterIx Index of exporter to use, within [0, ExporterCount -1]. DocumentId inDocumentId Identifier of document to export. System.String inFullName Full name of the file to create. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. ExportWithOptions(Int32, List<KeyValue>, DocumentId, String) Exports a document to a file with conversion using specified options. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void ExportWithOptions(int inExporterIx, List<KeyValue> inOptions, DocumentId inDocumentId, string inFullName) Parameters Type Name Description System.Int32 inExporterIx Index of exporter to use, within [0, ExporterCount -1]. List < KeyValue > inOptions Exporter options to use. DocumentId inDocumentId Identifier of document to export. System.String inFullName Full name of the file to create. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8. Freeze(DocumentId) Freezes a document. Declaration [AvailableSinceVersion(7, 12, 0, 0)] void Freeze(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Remarks An exception will be thrown when trying to freeze a document that is not freezable. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. GetCurrentCulture(DocumentId) Gets the document current culture. Declaration [AvailableSinceVersion(7, 16, 400, 0)] CultureInfo GetCurrentCulture(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document. Returns Type Description System.Globalization.CultureInfo The culture of the document. Remarks This method is available since v7.16. GetDocument(PdmObjectId) Gets the document corresponding to the last minor revision of a document PDM object. Declaration [AvailableSinceVersion(7, 6, 0, 0)] DocumentId GetDocument(PdmObjectId inPdmObjectId) Parameters Type Name Description PdmObjectId inPdmObjectId Identifier of the document PDM object. Returns Type Description DocumentId Identifier of the document corresponding to the last minor revision. Remarks If the PDM object is not a TopSolid document, this method returns Empty . This method is available since v7.6. GetDocuments() Gets all the documents loaded into memory. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<DocumentId> GetDocuments() Returns Type Description List < DocumentId > Documents found. Remarks This method is available since v7.6. GetMinorRevisionDocument(PdmMinorRevisionId) Gets the document corresponding to a PDM minor revision. Declaration [AvailableSinceVersion(7, 6, 0, 0)] DocumentId GetMinorRevisionDocument(PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of the PDM minor revision to analyze. Returns Type Description DocumentId Identifier of the corresponding document. Remarks If the PDM minor revision is not a TopSolid document, this method returns Empty . This method is available since v7.6. GetName(DocumentId) Gets the name of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetName(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.String Name of the document. Remarks This method is available since v7.6. GetOpenDocuments() Gets the open documents. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<DocumentId> GetOpenDocuments() Returns Type Description List < DocumentId > Documents found. Remarks This method is available since v7.6. GetPdmMinorRevision(DocumentId) Gets the PDM minor revision corresponding to a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmMinorRevisionId GetPdmMinorRevision(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description PdmMinorRevisionId Identifier of the corresponding PDM minor revision. Remarks This method is available since v7.6. GetPdmObject(DocumentId) Gets the PDM object corresponding to a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmObjectId GetPdmObject(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description PdmObjectId Identifier of the corresponding PDM object. Remarks This method is available since v7.6. GetProperties(DocumentId) Gets the full names of the properties of a document. Declaration [AvailableSinceVersion(7, 8, 300, 60)] List<string> GetProperties(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < System.String > Full names of the document properties. Remarks This method is available since v7.8.300.60. GetPropertyBooleanValue(DocumentId, String) Gets the value of a document Boolean property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] bool GetPropertyBooleanValue(DocumentId inDocumentId, string inFullName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.String inFullName Full name of the document Boolean property to analyze. Returns Type Description System.Boolean Value of the property. Remarks This method is available since v7.8.300.60. GetPropertyDateTimeValue(DocumentId, String) Gets the value of a document date and time property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] DateTime GetPropertyDateTimeValue(DocumentId inDocumentId, string inFullName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.String inFullName Full name of the document date and time property to analyze. Returns Type Description System.DateTime Value of the property. Remarks This method is available since v7.8.300.60. GetPropertyIntegerValue(DocumentId, String) Gets the value of a document integer property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] int GetPropertyIntegerValue(DocumentId inDocumentId, string inFullName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.String inFullName Full name of the document integer property to analyze. Returns Type Description System.Int32 Value of the property. Remarks This method is available since v7.8.300.60. GetPropertyLocalizedDomainName(DocumentId, String) Gets the localized domain name of a document property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] string GetPropertyLocalizedDomainName(DocumentId inDocumentId, string inFullName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.String inFullName Full name of the document property to analyze. Returns Type Description System.String Localized domain name of the property. Remarks This method is available since v7.8.300.60. GetPropertyLocalizedName(DocumentId, String) Gets the localized name of a document property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] string GetPropertyLocalizedName(DocumentId inDocumentId, string inFullName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.String inFullName Full name of the document property to analyze. Returns Type Description System.String Localized name of the property. Remarks This method is available since v7.8.300.60. GetPropertyRealUnit(DocumentId, String, out UnitType, out String) Gets the unit of a document real property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] void GetPropertyRealUnit(DocumentId inDocumentId, string inFullName, out UnitType outUnitType, out string outUnitSymbol) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.String inFullName Full name of the document real property to analyze. UnitType outUnitType Unit type. System.String outUnitSymbol Unit symbol in English. Remarks This method is available since v7.8.300.60. GetPropertyRealValue(DocumentId, String) Gets the value of a document real property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] double GetPropertyRealValue(DocumentId inDocumentId, string inFullName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.String inFullName Full name of the document real property to analyze. Returns Type Description System.Double Value of the property. Remarks This method is available since v7.8.300.60. GetPropertyTextValue(DocumentId, String) Gets the value of a document text property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] string GetPropertyTextValue(DocumentId inDocumentId, string inFullName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.String inFullName Full name of the document text property to analyze. Returns Type Description System.String Value of the property. Remarks This method is available since v7.8.300.60. GetPropertyType(DocumentId, String) Gets the type of a document property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] PropertyType GetPropertyType(DocumentId inDocumentId, string inFullName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.String inFullName Full name of the document property to analyze. Returns Type Description PropertyType Type of the property, or None if the document does not have the property. Remarks This method is available since v7.8.300.60. GetReferencedDocuments(DocumentId, Boolean) Gets the documents referenced by a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<DocumentId> GetReferencedDocuments(DocumentId inDocumentId, bool inRequiresDependence) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.Boolean inRequiresDependence Whether to only return documents on which the document to analyze depends on, and ignore logical references, like for instance background documents. Returns Type Description List < DocumentId > Referenced documents found. Remarks This method is available since v7.6. GetSynchronizedDocuments(DocumentId) Gets the documents synchronized with a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<DocumentId> GetSynchronizedDocuments(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < DocumentId > Synchronized documents found. Remarks This method is available since v7.6. GetTypeFullName(DocumentId) Gets the full name of the type of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetTypeFullName(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.String Full name of the type of the document. Remarks This method is available since v7.6. GetTypeGuid(DocumentId) Gets the GUID of the type of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Guid GetTypeGuid(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Guid GUID of the type of the document. Remarks This method is available since v7.6. GetUniversalId(DocumentId, out String, out String) Gets the universal identifier of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void GetUniversalId(DocumentId inDocumentId, out string outDomain, out string outName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.String outDomain Universal domain, or null if the document does not have a universal identifier. System.String outName Universal name, or null if the document does not have a universal identifier. Remarks This method is available since v7.8. Import(Int32, String, PdmObjectId, out List<String>, out List<DocumentId>) Imports a file with conversion into a project or one of its folders. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<DocumentId> Import(int inImporterIx, string inFullName, PdmObjectId inOwnerId, out List<string> outLog, out List<DocumentId> outBadDocumentIds) Parameters Type Name Description System.Int32 inImporterIx Index of importer to use, within [0, ImporterCount -1]. System.String inFullName Full name of the file to import. PdmObjectId inOwnerId PDM object identifier of project or folder owner where imported documents are to be stored. List < System.String > outLog List of string describing the result. List < DocumentId > outBadDocumentIds Identifiers of documents containing bad geometry. Returns Type Description List < DocumentId > Imported documents. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. ImportWithOptions(Int32, List<KeyValue>, String, PdmObjectId, out List<String>, out List<DocumentId>) Imports a file with conversion into a project or one of its folders using specified options. Declaration [AvailableSinceVersion(7, 8, 0, 0)] List<DocumentId> ImportWithOptions(int inImporterIx, List<KeyValue> inOptions, string inFullName, PdmObjectId inOwnerId, out List<string> outLog, out List<DocumentId> outBadDocumentIds) Parameters Type Name Description System.Int32 inImporterIx Index of importer to use, within [0, ImporterCount -1]. List < KeyValue > inOptions Importer options to use. System.String inFullName Full name of the file to import. PdmObjectId inOwnerId PDM object identifier of project or folder owner where imported documents are to be stored. List < System.String > outLog List of string describing the result. List < DocumentId > outBadDocumentIds Identifiers of documents containing bad geometry. Returns Type Description List < DocumentId > Imported documents. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8. Include(Int32, String, DocumentId, out List<String>, out List<DocumentId>) Imports a file with conversion into an existing document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<DocumentId> Include(int inImporterIx, string inFullName, DocumentId inDocumentId, out List<string> outLog, out List<DocumentId> outBadDocumentIds) Parameters Type Name Description System.Int32 inImporterIx Index of importer to use, within [0, ImporterCount -1]. System.String inFullName Full name of the file to import. DocumentId inDocumentId Document where data are to be stored. List < System.String > outLog List of string describing the result. List < DocumentId > outBadDocumentIds Identifiers of documents containing bad geometry. Returns Type Description List < DocumentId > Imported documents, including the specified document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. IncludeWithOptions(Int32, List<KeyValue>, String, DocumentId, out List<String>, out List<DocumentId>) Imports a file with conversion into an existing document using specified options. Declaration [AvailableSinceVersion(7, 8, 0, 0)] List<DocumentId> IncludeWithOptions(int inImporterIx, List<KeyValue> inOptions, string inFullName, DocumentId inDocumentId, out List<string> outLog, out List<DocumentId> outBadDocumentIds) Parameters Type Name Description System.Int32 inImporterIx Index of importer to use, within [0, ImporterCount -1]. List < KeyValue > inOptions Importer options to use. System.String inFullName Full name of the file to import. DocumentId inDocumentId Document where data are to be stored. List < System.String > outLog List of string describing the result. List < DocumentId > outBadDocumentIds Identifiers of documents containing bad geometry. Returns Type Description List < DocumentId > Imported documents, including the specified document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. IsDirty(DocumentId) Tells whether a document is dirty. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsDirty(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is dirty. Remarks A document is said dirty when it has been modified since it was last saved. This method is available since v7.6. IsFreezable(DocumentId) Tells whether a document may be frozen. Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool IsFreezable(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document may be frozen. Remarks This method is available since v7.12. IsFrozen(DocumentId) Tells whether a document is frozen. Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool IsFrozen(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is frozen. Remarks This method is available since v7.12. IsInvalid(DocumentId) Tells whether a document is invalid. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsInvalid(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is invalid. Remarks This method is available since v7.6. IsSynchronized(DocumentId) Tells whether a document is synchronized with other documents. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsSynchronized(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is synchronized with other documents. Remarks This method is available since v7.6. IsVirtualDocument(DocumentId) Determines whether the document is virtual. Declaration [AvailableSinceVersion(7, 17, 0, 0)] bool IsVirtualDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description System.Boolean Tells wether the document is virtual. Remarks This method is available since v7.17. NeedsRefreshing(DocumentId) Tells whether a document needs refreshing. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool NeedsRefreshing(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document needs refreshing. Remarks This method is available since v7.6. Open(ref DocumentId) Opens a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void Open(ref DocumentId ioDocumentId) Parameters Type Name Description DocumentId ioDocumentId Identifier of the document to open. Remarks Beware the document can be modified if it is updated during opening process. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. Print(DocumentId, PrintColorMapping, Int32) Prints a document to the active printer. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void Print(DocumentId inDocumentId, PrintColorMapping inColorMapping, int inResolution) Parameters Type Name Description DocumentId inDocumentId Document to print. PrintColorMapping inColorMapping Color conversion mode. System.Int32 inResolution Print resolution in dot-per-inch. Remarks This method is available since v7.6. Rebuild(DocumentId) Rebuilds a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void Rebuild(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to rebuild. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. Refresh(DocumentId) Refreshes a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void Refresh(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to refresh. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. Save(DocumentId) Saves a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void Save(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to save. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. SaveAs(DocumentId, PdmObjectId, String) Saves a document as a new document. Declaration [AvailableSinceVersion(7, 11, 0, 0)] DocumentId SaveAs(DocumentId inDocumentId, PdmObjectId inOwnerId, string inName) Parameters Type Name Description DocumentId inDocumentId Document identifier to save as. PdmObjectId inOwnerId Owner object identifier. System.String inName Name of the created document. Returns Type Description DocumentId Created document identifier. Remarks This method is available since v7.11. SetCurrentCulture(DocumentId, CultureInfo) Sets the document current culture. Declaration [AvailableSinceVersion(7, 16, 400, 0)] void SetCurrentCulture(DocumentId inDocumentId, CultureInfo inWantedCulture) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Globalization.CultureInfo inWantedCulture The wanted culture. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetName(DocumentId, String) Sets the name of a document. Declaration [AvailableSinceVersion(7, 7, 201, 100)] void SetName(DocumentId inDocumentId, string inName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inName Name of the document. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. SetUniversalId(DocumentId, String, String) Sets the universal identifier of a document. Declaration [AvailableSinceVersion(7, 8, 300, 60)] void SetUniversalId(DocumentId inDocumentId, string inDomain, string inName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDomain Universal domain, or null to delete the universal identifier parameter entity. System.String inName Universal name, or null to delete the universal identifier parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8.300.060. SetVirtualDocumentMode(DocumentId, Boolean) Sets the virtual document mode. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetVirtualDocumentMode(DocumentId inDocumentId, bool inIsOn) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Boolean inIsOn Tells wether the document is virtual. Remarks This method is available since v7.17. SubscribeToEvents(Int32, String) Subscribes to documents events. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SubscribeToEvents(int inClientVersion, string inClientName) Parameters Type Name Description System.Int32 inClientVersion Version of TopSolid used to build the client application. System.String inClientName Client name. Remarks The version is defined by: Major * 100000000 + Minor * 1000000 + Build * 1000 + Revision . For example, v7.5.200.100 is represented by: 705200100 . This method is available since v7.8. SubscribeToEventsTcp(Int32, String, String, Int32) Subscribes to documents events using TCP connection. Declaration [AvailableSinceVersion(7, 9, 0, 0)] void SubscribeToEventsTcp(int inClientVersion, string inClientName, string inClientAddress, int inClientPort) Parameters Type Name Description System.Int32 inClientVersion Version of TopSolid used to build the client application. System.String inClientName Client name. System.String inClientAddress Client IP address or \"localhost\" for local machine. System.Int32 inClientPort Client port used. Remarks The version is defined by: Major * 100000000 + Minor * 1000000 + Build * 1000 + Revision . For example, v7.5.200.100 is represented by: 705200100 . This method is available since v7.9. Unfreeze(DocumentId) Unfreezes a document. Declaration [AvailableSinceVersion(7, 12, 0, 0)] void Unfreeze(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. UnsubscribeFromEvents(String) Unsubscribes from documents events. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void UnsubscribeFromEvents(string inClientName) Parameters Type Name Description System.String inClientName Client name. Remarks This method is available since v7.8. UnsubscribeFromEventsTcp(String, String, Int32) Unsubscribes from documents events using TCP connection. Declaration [AvailableSinceVersion(7, 9, 0, 0)] void UnsubscribeFromEventsTcp(string inClientName, string inClientAddress, int inClientPort) Parameters Type Name Description System.String inClientName Client name. System.String inClientAddress Client IP address or \"localhost\" for local machine. System.Int32 inClientPort Client port used. Remarks This method is available since v7.9. Update(DocumentId, Boolean) Updates a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void Update(DocumentId inDocumentId, bool inUpdatesAll) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to update. System.Boolean inUpdatesAll Udpates all the document, even operations in stages after the current stage. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. zExportToTopglTF(DocumentId, String, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Color) Exports the document to TopgltF. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void zExportToTopglTF(DocumentId inDocumentId, string inFolderPath, string inFileName, bool inEmbedsBuffer, bool inExportsLights, bool inExportsCameras, bool inExportsFaces, bool inExportsSets, bool inExportsRepresentations, Color inEdgesColor) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to export. System.String inFolderPath Folder path. System.String inFileName File name. System.Boolean inEmbedsBuffer Tells wether embeds buffer. System.Boolean inExportsLights Tells wether exports lights. System.Boolean inExportsCameras Tells wether exports cameras. System.Boolean inExportsFaces Tells wether exports faces. System.Boolean inExportsSets Tells wether exports sets. System.Boolean inExportsRepresentations Tells wether exports representations. Color inEdgesColor Edges color. Remarks This method is available since v7.17. This method is for internal use of TopSolid. This method is useless for other needs."
  },
  "api/kernel/TopSolid.Kernel.Automating.IDocumentsEvents.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IDocumentsEvents.html",
    "title": "Interface IDocumentsEvents | TopSolid Automation website",
    "keywords": "Interface IDocumentsEvents Implemented by clients wishing to receive documents events. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public interface IDocumentsEvents Remarks This interface is available since v7.8. Methods OnDocumentEditingEnded(DocumentId) Called when the editing of a document has been ended. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void OnDocumentEditingEnded(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document which editing has been ended. Remarks This method is available since v7.8. OnDocumentEditingStarted(DocumentId) Called when the editing of a document has been started. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void OnDocumentEditingStarted(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document which editing has been started. Remarks This method is available since v7.8."
  },
  "api/kernel/TopSolid.Kernel.Automating.IElements.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IElements.html",
    "title": "Interface IElements | TopSolid Automation website",
    "keywords": "Interface IElements Gives access to elements. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IElements Remarks This interface is available since v7.6. Methods Delete(ElementId) Deletes an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void Delete(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to delete. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. DeleteSeveral(List<ElementId>) Deletes several elements. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void DeleteSeveral(List<ElementId> inElementIds) Parameters Type Name Description List < ElementId > inElementIds Identifiers of the elements to delete. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. Exists(ElementId) Tells whether an element still exists. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool Exists(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element still exists. Remarks This method is available since v7.6. GetColor(ElementId) Gets the color of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Color GetColor(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description Color Color of the element, or Empty if the element has no color. Remarks This method is available since v7.6. GetComment(ElementId) Gets the comment of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetComment(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.String Comment of the element, or null if the element has no comment. Remarks This method is available since v7.6. GetConstituents(ElementId) Gets the constituent elements of a composite element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetConstituents(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description List < ElementId > Contituent elements found. Remarks This method is available since v7.6. GetDescription(ElementId) Gets the description of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetDescription(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.String Description of the element, or null if the element has no description. Remarks This method is available since v7.6. GetElements(DocumentId) Gets the elements of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetElements(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Elements found. Remarks This method is available since v7.6. GetFriendlyName(ElementId) Gets the friendly name of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetFriendlyName(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.String Friendly name of the element. Remarks This method is available since v7.6. GetName(ElementId) Gets the name of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetName(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.String Name of the element, or null if the element has no name. Remarks The name may need translation before exposing it to the user if it is a system name (see HasSystemName(ElementId) ). The name displayed to the user is obtained by the GetFriendlyName(ElementId) method. This method is available since v7.6. GetOwner(ElementId) Gets the owner element of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetOwner(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description ElementId Identifier of the owner element, or Empty if the element does not have an owner. Remarks This method is available since v7.6. GetParent(ElementId) Gets the parent operation of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetParent(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description ElementId Identifier of the parent operation, or Empty if the element does not have a parent. Remarks This method is available since v7.6. GetProperties(ElementId) Gets the full names of the properties of an element. Declaration [AvailableSinceVersion(7, 8, 300, 60)] List<string> GetProperties(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description List < System.String > Full names of the element properties. Remarks This method is available since v7.8.300.60. GetPropertyBooleanValue(ElementId, String) Gets the value of an element Boolean property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] bool GetPropertyBooleanValue(ElementId inElementId, string inFullName) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. System.String inFullName Full name of the element Boolean property to analyze. Returns Type Description System.Boolean Value of the property. Remarks This method is available since v7.8.300.60. GetPropertyDateTimeValue(ElementId, String) Gets the value of an element date and time property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] DateTime GetPropertyDateTimeValue(ElementId inElementId, string inFullName) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. System.String inFullName Full name of the element date and time property to analyze. Returns Type Description System.DateTime Value of the property. Remarks This method is available since v7.8.300.60. GetPropertyIntegerValue(ElementId, String) Gets the value of an element integer property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] int GetPropertyIntegerValue(ElementId inElementId, string inFullName) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. System.String inFullName Full name of the element integer property to analyze. Returns Type Description System.Int32 Value of the property. Remarks This method is available since v7.8.300.60. GetPropertyLocalizedDomainName(ElementId, String) Gets the localized domain name of an element property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] string GetPropertyLocalizedDomainName(ElementId inElementId, string inFullName) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. System.String inFullName Full name of the element property to analyze. Returns Type Description System.String Localized domain name of the property. Remarks This method is available since v7.8.300.60. GetPropertyLocalizedName(ElementId, String) Gets the localized name of an element property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] string GetPropertyLocalizedName(ElementId inElementId, string inFullName) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. System.String inFullName Full name of the element property to analyze. Returns Type Description System.String Localized name of the property. Remarks This method is available since v7.8.300.60. GetPropertyRealUnit(ElementId, String, out UnitType, out String) Gets the unit of an element real property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] void GetPropertyRealUnit(ElementId inElementId, string inFullName, out UnitType outUnitType, out string outUnitSymbol) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. System.String inFullName Full name of the element real property to analyze. UnitType outUnitType Unit type. System.String outUnitSymbol Unit symbol in English. Remarks This method is available since v7.8.300.60. GetPropertyRealValue(ElementId, String) Gets the value of an element real property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] double GetPropertyRealValue(ElementId inElementId, string inFullName) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. System.String inFullName Full name of the element real property to analyze. Returns Type Description System.Double Value of the property. Remarks This method is available since v7.8.300.60. GetPropertyTextValue(ElementId, String) Gets the value of an element text property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] string GetPropertyTextValue(ElementId inElementId, string inFullName) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. System.String inFullName Full name of the element text property to analyze. Returns Type Description System.String Value of the property. Remarks This method is available since v7.8.300.60. GetPropertyType(ElementId, String) Gets the type of an element property. Declaration [AvailableSinceVersion(7, 8, 300, 60)] PropertyType GetPropertyType(ElementId inElementId, string inFullName) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. System.String inFullName Full name of the element property to analyze. Returns Type Description PropertyType Type of the property, or None if the element does not have the property. Remarks This method is available since v7.8.300.60. GetTransparency(ElementId) Gets the transparency of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] double GetTransparency(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Double Transparency of the element within [0,1] , or -1 if the element has no transparency. Remarks When the transparency is equal to 0 , the element is fully opaque. When the transparency is equal to 1 , the element is fully transparent. This method is available since v7.6. GetTypeFullName(ElementId) Gets the full name of the type of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetTypeFullName(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.String Full name of the type of the element. Remarks This method is available since v7.6. GetTypeGuid(ElementId) Gets the GUID of the type of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Guid GetTypeGuid(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Guid GUID of the type of the element. Remarks This method is available since v7.6. HasColor(ElementId) Tells whether an element has a color. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool HasColor(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element has a color. Remarks This method is available since v7.6. HasComment(ElementId) Tells whether an element has a comment. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool HasComment(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element has a comment. Remarks This method is available since v7.6. HasDescription(ElementId) Tells whether an element has a description. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool HasDescription(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element has a description. Remarks This method is available since v7.6. HasName(ElementId) Tells whether an element has a name. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool HasName(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element has a name. Remarks This method is available since v7.6. HasSystemName(ElementId) Tells whether an element has a system name. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool HasSystemName(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element has a system name. Remarks System names start with '$' and are translated before being exposed to the user. This method is available since v7.6. HasTransparency(ElementId) Tells whether an element has a transparency. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool HasTransparency(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element has a transparency. Remarks This method is available since v7.6. HasUniqueName(ElementId) Tells whether an element has a name that is unique in its document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool HasUniqueName(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element has a name that is unique in its document. Remarks This method is available since v7.6. Hide(ElementId) Hides an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void Hide(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to hide. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. IsAlive(ElementId) Tells whether an element is alive. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsAlive(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element is alive. Remarks This method is available since v7.6. IsColorModifiable(ElementId) Tells whether the color of an element is modifiable. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsColorModifiable(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The color of the element is modifiable. Remarks This method is available since v7.6. IsDeletable(ElementId) Tells whether an element may be deleted. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsDeletable(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element may be deleted. Remarks This method is available since v7.6. IsInvalid(ElementId) Tells whether an element is invalid. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsInvalid(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element is invalid. Remarks This method is available since v7.6. IsModifiable(ElementId) Tells whether an element is modifiable. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsModifiable(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element is modifiable. Remarks This method is available since v7.6. IsRenamable(ElementId) Tells whether the name of an element may be modified. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsRenamable(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the name of the element may be modified. Remarks This method is available since v7.6. IsTransparencyModifiable(ElementId) Tells whether the transparency of an element is modifiable. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsTransparencyModifiable(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The transparency of the element is modifiable. Remarks This method is available since v7.6. IsVisible(ElementId) Tells whether an element is visible. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsVisible(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean Whether the element is visible. Remarks This method is available since v7.6. SearchByName(DocumentId, String) Searches for an element with a specified name in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId SearchByName(DocumentId inDocument, string inName) Parameters Type Name Description DocumentId inDocument Document to analyze. System.String inName Name of the element to search. Returns Type Description ElementId Element found, or empty if not found. Remarks Only elements with unique name (i.e. HasUniqueName(ElementId) returns true on that element) are found. This method is available since v7.6. SetColor(ElementId, Color) Sets the color of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetColor(ElementId inElementId, Color inColor) Parameters Type Name Description ElementId inElementId Identifier of the element to modify. Color inColor New color of the element. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetComment(ElementId, String) Sets the comment of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetComment(ElementId inElementId, string inComment) Parameters Type Name Description ElementId inElementId Identifier of the element to modify. System.String inComment New comment of the element. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetDescription(ElementId, String) Sets the description of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetDescription(ElementId inElementId, string inDescription) Parameters Type Name Description ElementId inElementId Identifier of the element to modify. System.String inDescription New description of the element. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetName(ElementId, String) Sets the name of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetName(ElementId inElementId, string inName) Parameters Type Name Description ElementId inElementId Identifier of the element to modify. System.String inName New name of the element. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetTransparency(ElementId, Double) Sets the transparency of an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetTransparency(ElementId inElementId, double inTransparency) Parameters Type Name Description ElementId inElementId Identifier of the element to modify. System.Double inTransparency New transparency of the element within [0,1] . Remarks When the transparency is equal to 0 , the element is fully opaque. When the transparency is equal to 1 , the element is fully transparent. The transparency is internally rounded to discrete values, so getting the transparency afterwards will not necessarily return the same value than the one provided when setting it. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. Show(ElementId) Shows an element. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void Show(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to show. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6."
  },
  "api/kernel/TopSolid.Kernel.Automating.IEntities.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IEntities.html",
    "title": "Interface IEntities | TopSolid Automation website",
    "keywords": "Interface IEntities Gives access to entities. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IEntities Remarks This interface is available since v7.6. Methods AddSetTargets(ElementId, List<ElementId>) Add targets to the set definition entity. Declaration [AvailableSinceVersion(7, 14, 300, 140)] void AddSetTargets(ElementId inElementId, List<ElementId> inTargetIds) Parameters Type Name Description ElementId inElementId Identifiers of the set definition entity. List < ElementId > inTargetIds Identifiers of targets to add to the set definition entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.14.300.140. Basify(ElementId) Basifies an entity. Declaration [AvailableSinceVersion(7, 7, 201, 200)] void Basify(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the entity to basify. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.200. BasifySeveral(List<ElementId>) Basifies several entities. Declaration [AvailableSinceVersion(7, 7, 201, 200)] void BasifySeveral(List<ElementId> inElementIds) Parameters Type Name Description List < ElementId > inElementIds Identifiers of the entities to basify. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.200. CreateClassifying(DocumentId, ElementId) Creates a classifying entity in a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId CreateClassifying(DocumentId inDocumentId, ElementId inClassId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. ElementId inClassId Identifier of a class entity in a classification document. Returns Type Description ElementId Classifying entity created identifier. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. CreateFolder(ElementId) Creates a folder entity inside a specified folder entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId CreateFolder(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the folder entity to modify. Returns Type Description ElementId Folder entity created identifier. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. CreateSet(DocumentId, List<ElementId>) Creates a set definition entity in a document. Declaration [AvailableSinceVersion(7, 14, 300, 120)] ElementId CreateSet(DocumentId inDocumentId, List<ElementId> inTargetIds) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. List < ElementId > inTargetIds Identifiers of targets of the set definition entity. Returns Type Description ElementId Identifier of the created set definition entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.14.300.120. GetClassifyingClass(ElementId) Gets the classification class entity of a specified classifying entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetClassifyingClass(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the classifying entity to analyze. Returns Type Description ElementId Identifier of the classifying class definition entity. Remarks This method is available since v7.10. GetClassifyings(DocumentId) Gets the classifying entities that are in the classifyings folder of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] List<ElementId> GetClassifyings(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Classifying entities found. Remarks This method is available since v7.10. GetCurrentSet(DocumentId) Gets the current set definition entity in a document. Declaration [AvailableSinceVersion(7, 14, 300, 140)] ElementId GetCurrentSet(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to get the current set. Returns Type Description ElementId Identifier of the current set definition entity. Remarks This method is available since v7.14.300.140. GetFunctionDefinition(ElementId) Gets the definition of a function entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] DocumentId GetFunctionDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the function entity to analyze. Returns Type Description DocumentId Identifier of the corresponding function definition document. Remarks This method is available since v7.8. GetFunctionOccurrenceName(ElementId) Gets the occurrence name of a function entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] string GetFunctionOccurrenceName(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the function entity to analyze. Returns Type Description System.String Function occurrence name, or null if this type of function cannot be provided several times.. Remarks This method is available since v7.8. GetFunctionPublishings(ElementId) Gets the publishing entities that are in a specified function of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] List<ElementId> GetFunctionPublishings(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the function entity to analyze. Returns Type Description List < ElementId > Publishing entities found. Remarks This method is available since v7.8. GetFunctions(DocumentId) Gets the function entities that are in the functions folder of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] List<ElementId> GetFunctions(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Function entities found. Remarks This method is available since v7.8. GetOccurrenceDefinition(ElementId) Gets the definition entity of an occurrence entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetOccurrenceDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the entity to analyze. Returns Type Description ElementId Identifier of the definition entity of the occurrence. Remarks This method is available since v7.6. GetOccurrenceSource(ElementId) Gets the source entity of an occurrence entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetOccurrenceSource(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the entity to analyze. Returns Type Description ElementId Identifier of the source entity of the occurrence. Remarks This method is available since v7.6. GetPublishings(DocumentId) Gets the publishing entities that are in the publishings folder of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] List<ElementId> GetPublishings(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Publishing entities found. Remarks This method is available since v7.8. GetSets(DocumentId) Gets the set definition entities that are in the sets folder of a document. Declaration [AvailableSinceVersion(7, 12, 0, 0)] List<ElementId> GetSets(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Set definition entities found. Remarks The method GetConstituents(ElementId) may be used to explore the contents of a set definition. Set definition constituents may be other set definition entities or shortcut entities which target entity may be obtained using the GetShortcutTarget(ElementId) method. This method is available since v7.12. GetShortcutTarget(ElementId) Gets the target entity of a shortcut entity. Declaration [AvailableSinceVersion(7, 12, 0, 0)] ElementId GetShortcutTarget(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the shortcut entity to analyze. Returns Type Description ElementId Identifier of the target entity of the shortcut. Remarks This method is available since v7.12. IsBasifiable(ElementId) Tells whether an entity may be basified. Declaration [AvailableSinceVersion(7, 7, 201, 200)] bool IsBasifiable(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the entity to analyze. Returns Type Description System.Boolean Whether the entity may be basified. Remarks This method is available since v7.7.201.200. IsEntity(ElementId) Tells whether an element is an entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsEntity(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element is an entity. Remarks This method is available since v7.6. IsFolder(ElementId) Tells whether an element is a folder entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] bool IsFolder(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element is a folder entity. Remarks This method is available since v7.10. IsOccurrence(ElementId) Tells whether an entity is an occurrence. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsOccurrence(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the entity to analyze. Returns Type Description System.Boolean The entity is an occurrence. Remarks This method is available since v7.6. IsSetDefinition(ElementId) Tells whether an element is a set definition entity. Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool IsSetDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element is a set definition entity. Remarks This method is available since v7.12. IsShortcut(ElementId) Tells whether an entity is a shortcut. Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool IsShortcut(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the entity to analyze. Returns Type Description System.Boolean The entity is a shortcut. Remarks This method is available since v7.12. MoveEntity(ElementId, ElementId, Int32) Moves an entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void MoveEntity(ElementId inElementId, ElementId inOwnerId, int inIndex) Parameters Type Name Description ElementId inElementId Identifier of the entity to move. ElementId inOwnerId Identifier of the new owner folder entity. System.Int32 inIndex Index of the entity in the new owner, or -1 for last. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. ProvideFunction(DocumentId, DocumentId, String) Provides a specified function in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId ProvideFunction(DocumentId inDocumentId, DocumentId inFunctionId, string inOccurrenceName) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inFunctionId Identifier of the function definition document. System.String inOccurrenceName Provided function occurrence name, or null if this type of function cannot be provided several times. Returns Type Description ElementId Function entity created identifier. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. RemoveSetTargets(ElementId, List<ElementId>) Remove targets to the set definition entity. Declaration [AvailableSinceVersion(7, 14, 300, 140)] void RemoveSetTargets(ElementId inElementId, List<ElementId> inTargetIds) Parameters Type Name Description ElementId inElementId Identifiers of the set definition entity. List < ElementId > inTargetIds Identifiers of targets to add to the set definition entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.14.300.140. SetClassifyingClass(ElementId, ElementId) Sets the classification class entity of a specified classifying entity. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void SetClassifyingClass(ElementId inElementId, ElementId inClassId) Parameters Type Name Description ElementId inElementId Identifier of the classifying entity to modify. ElementId inClassId Identifier of the classifying class definition entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. SetCurrentSet(DocumentId, ElementId) Sets the current set definition entity in a document. Declaration [AvailableSinceVersion(7, 14, 300, 140)] void SetCurrentSet(DocumentId inDocumentId, ElementId inElementId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to set the current set. ElementId inElementId Identifiers of the set definition entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.14.300.140. SetFunctionOccurrenceName(ElementId, String) Sets the occurrence name of a function entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetFunctionOccurrenceName(ElementId inElementId, string inOccurrenceName) Parameters Type Name Description ElementId inElementId Identifier of the function entity to modify. System.String inOccurrenceName Occurrence name. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. Transform(ElementId, Transform3D) Creates a transform operation in a document. Declaration [AvailableSinceVersion(7, 13, 300, 0)] ElementId Transform(ElementId inElementId, Transform3D inTransform) Parameters Type Name Description ElementId inElementId Identifier of the entity to modify. Transform3D inTransform Transform to apply. Returns Type Description ElementId Identifier of the transform operation. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.13.300.00."
  },
  "api/kernel/TopSolid.Kernel.Automating.IFamilies.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IFamilies.html",
    "title": "Interface IFamilies | TopSolid Automation website",
    "keywords": "Interface IFamilies Gives access to families. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public interface IFamilies Remarks This interface is available since v7.7. Methods AddCatalogNewRow(DocumentId) Add a new row to the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] ElementId AddCatalogNewRow(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the family document to modify. Returns Type Description ElementId Row identifier. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15. CreateDerivedDocument(PdmObjectId, DocumentId, DocumentId) Creates a new derived family document of a specified family document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] DocumentId CreateDerivedDocument(PdmObjectId inOwnerId, DocumentId inDocumentId, DocumentId inGenericId) Parameters Type Name Description PdmObjectId inOwnerId Identifier of owner. DocumentId inDocumentId Identifier of the family document to derive. DocumentId inGenericId Identifier of the derived generic document, or Empty if not derived. Returns Type Description DocumentId Derived family document identifier. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.10. DeleteCatalogRow(ElementId) Delete the row of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] void DeleteCatalogRow(ElementId inRow) Parameters Type Name Description ElementId inRow Identifier of the row to delete. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15. GetBaseDocument(DocumentId) Gets the base family of a derived family. Declaration [AvailableSinceVersion(7, 10, 0, 0)] DocumentId GetBaseDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the derived family document to analyze. Returns Type Description DocumentId Base family document identifier, or empty if the family is not derived. Remarks This method is available since v7.10. GetCatalogCellBooleanValue(ElementId, ElementId) Gets the boolean value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] bool GetCatalogCellBooleanValue(ElementId inRow, ElementId inParameterId) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. Returns Type Description System.Boolean Value of the cell. Remarks This method is available since v7.15. GetCatalogCellCodeValue(ElementId, ElementId) Gets the code value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] string GetCatalogCellCodeValue(ElementId inRow, ElementId inParameterId) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. Returns Type Description System.String Value of the cell. Remarks This method is available since v7.15. GetCatalogCellEnumerationValue(ElementId, ElementId) Gets the enumeration value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] int GetCatalogCellEnumerationValue(ElementId inRow, ElementId inParameterId) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. Returns Type Description System.Int32 Value of the cell. Remarks This method is available since v7.15. GetCatalogCellFamilyValue(ElementId, ElementId) Gets the family value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] PdmMinorRevisionId GetCatalogCellFamilyValue(ElementId inRow, ElementId inParameterId) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. Returns Type Description PdmMinorRevisionId Value of the cell. Remarks This method is available since v7.15. GetCatalogCellIntegerValue(ElementId, ElementId) Gets the integer value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] int GetCatalogCellIntegerValue(ElementId inRow, ElementId inParameterId) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. Returns Type Description System.Int32 Value of the cell. Remarks This method is available since v7.15. GetCatalogCellRealValue(ElementId, ElementId) Gets the real value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] double GetCatalogCellRealValue(ElementId inRow, ElementId inParameterId) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. Returns Type Description System.Double Value of the cell. Remarks This method is available since v7.15. GetCatalogCellTextValue(ElementId, ElementId) Gets the text value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] string GetCatalogCellTextValue(ElementId inRow, ElementId inParameterId) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. Returns Type Description System.String Value of the cell. Remarks This method is available since v7.15. GetCatalogCellUserEnumerationValue(ElementId, ElementId) Gets the user enumeration value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] int GetCatalogCellUserEnumerationValue(ElementId inRow, ElementId inParameterId) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. Returns Type Description System.Int32 Value of the cell. Remarks This method is available since v7.15. GetCatalogColumnParameters(DocumentId) Gets the catalog column parameters. Declaration [AvailableSinceVersion(7, 15, 0, 60)] List<ElementId> GetCatalogColumnParameters(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the family document to analyze. Returns Type Description List < ElementId > Column parameter identifiers. Remarks This method is available since v7.15. GetCatalogRow(DocumentId, String) Gets the catalog row. Declaration [AvailableSinceVersion(7, 15, 0, 60)] ElementId GetCatalogRow(DocumentId inDocumentId, string inCode) Parameters Type Name Description DocumentId inDocumentId Identifier of the family document to analyze. System.String inCode The row code. Returns Type Description ElementId Row identifier. Remarks This method is available since v7.15. GetCodes(DocumentId) Gets the codes of a family document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<string> GetCodes(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the family document to analyze. Returns Type Description List < System.String > Codes found. Remarks This method is available since v7.7. GetDriversFolderImage(ElementId) Gets the drivers folder image. Declaration [AvailableSinceVersion(7, 17, 0, 0)] Bitmap GetDriversFolderImage(ElementId inDriverFolder) Parameters Type Name Description ElementId inDriverFolder Identifier of the drivers folder. Returns Type Description System.Drawing.Bitmap The driver image. Remarks This method is available since v7.17. GetGenericDocument(DocumentId) Gets the generic document of a family. Declaration [AvailableSinceVersion(7, 10, 0, 0)] DocumentId GetGenericDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the family document to analyze. Returns Type Description DocumentId Generic document identifier. Remarks This method is available since v7.10. IsDerived(DocumentId) Tells whether a family document is a derived family document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] bool IsDerived(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the family document to analyze. Returns Type Description System.Boolean The family is a derived family. Remarks This method is available since v7.10. IsExplicit(DocumentId) Tells whether a family document is an explicit family document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] bool IsExplicit(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the family document to analyze. Returns Type Description System.Boolean The family is an explicit family. Remarks This method is available since v7.10. IsFamily(DocumentId) Tells whether a document is a family document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsFamily(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Boolean The document is a family document. Remarks This method is available since v7.7. SetCatalogCellBooleanValue(ElementId, ElementId, Boolean) Sets the boolean value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] void SetCatalogCellBooleanValue(ElementId inRow, ElementId inParameterId, bool inValue) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. System.Boolean inValue Value of the cell. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15. SetCatalogCellCodeValue(ElementId, ElementId, String) Sets the code value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] void SetCatalogCellCodeValue(ElementId inRow, ElementId inParameterId, string inValue) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. System.String inValue Value of the cell. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15. SetCatalogCellEnumerationValue(ElementId, ElementId, Int32) Sets the enumeration value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] void SetCatalogCellEnumerationValue(ElementId inRow, ElementId inParameterId, int inValue) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. System.Int32 inValue Value of the cell. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15. SetCatalogCellFamilyValue(ElementId, ElementId, PdmMinorRevisionId) Sets the family value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] void SetCatalogCellFamilyValue(ElementId inRow, ElementId inParameterId, PdmMinorRevisionId inValue) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. PdmMinorRevisionId inValue Value of the cell. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15. SetCatalogCellIntegerValue(ElementId, ElementId, Int32) Sets the integer value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] void SetCatalogCellIntegerValue(ElementId inRow, ElementId inParameterId, int inValue) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. System.Int32 inValue Value of the cell. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15. SetCatalogCellRealValue(ElementId, ElementId, Double) Sets the real value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] void SetCatalogCellRealValue(ElementId inRow, ElementId inParameterId, double inValue) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. System.Double inValue Value of the cell. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15. SetCatalogCellTextValue(ElementId, ElementId, String) Sets the text value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] void SetCatalogCellTextValue(ElementId inRow, ElementId inParameterId, string inValue) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. System.String inValue Value of the cell. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15. SetCatalogCellUserEnumerationValue(ElementId, ElementId, Int32) Sets the user enumeration value of the catalog cell. Declaration [AvailableSinceVersion(7, 15, 0, 60)] void SetCatalogCellUserEnumerationValue(ElementId inRow, ElementId inParameterId, int inValue) Parameters Type Name Description ElementId inRow Identifier of the row. ElementId inParameterId Identifier of the parameter of the column. System.Int32 inValue Value of the cell. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15. SetDriversFolderImage(ElementId, String) Sets the drivers folder image. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetDriversFolderImage(ElementId inDriverFolder, string inImagePath) Parameters Type Name Description ElementId inDriverFolder Identifier of the drivers folder. System.String inImagePath Image of the driver. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17. SetInheritedCodes(DocumentId, List<String>) Sets the inherited codes of a derived family. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void SetInheritedCodes(DocumentId inDocumentId, List<string> inCodes) Parameters Type Name Description DocumentId inDocumentId Identifier of the derived family document to modify. List < System.String > inCodes Base family codes to inherit in the derived family. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10."
  },
  "api/kernel/TopSolid.Kernel.Automating.IGeometries2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IGeometries2D.html",
    "title": "Interface IGeometries2D | TopSolid Automation website",
    "keywords": "Interface IGeometries2D Gives access to 2D geometric entities. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IGeometries2D Remarks This interface is available since v7.6. Methods CreateAxis(DocumentId, Axis2D) Creates an axis entity in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateAxis(DocumentId inDocumentId, Axis2D inGeometry) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Axis2D inGeometry Axis geometry. Returns Type Description ElementId Identifier of the created axis entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateAxisWithExtent(DocumentId, Axis2D, Double, Double) Creates an axis entity with specified extent in a document. Declaration [AvailableSinceVersion(7, 7, 201, 100)] ElementId CreateAxisWithExtent(DocumentId inDocumentId, Axis2D inGeometry, double inXMin, double inXMax) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Axis2D inGeometry Axis geometry. System.Double inXMin Minimum X axis coordinate of extent. System.Double inXMax Maximum X axis coordinate of extent. Returns Type Description ElementId Identifier of the created axis entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. CreateFrame(DocumentId, Frame2D) Creates a frame entity in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateFrame(DocumentId inDocumentId, Frame2D inGeometry) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Frame2D inGeometry Frame geometry. Returns Type Description ElementId Identifier of the created frame entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreatePoint(DocumentId, Point2D) Creates a point entity in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreatePoint(DocumentId inDocumentId, Point2D inGeometry) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Point2D inGeometry Point geometry. Returns Type Description ElementId Identifier of the created point entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. GetAbsoluteFrame(DocumentId) Gets the absolute frame entity of a document. Declaration [AvailableSinceVersion(7, 7, 201, 100)] ElementId GetAbsoluteFrame(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute frame entity found. Remarks This method is available since v7.7.201.100. GetAbsoluteOriginPoint(DocumentId) Gets the absolute origin point entity of a document. Declaration [AvailableSinceVersion(7, 7, 201, 100)] ElementId GetAbsoluteOriginPoint(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute origin point entity found. Remarks This method is available since v7.7.201.100. GetAbsoluteXAxis(DocumentId) Gets the absolute X axis entity of a document. Declaration [AvailableSinceVersion(7, 7, 201, 100)] ElementId GetAbsoluteXAxis(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute X axis entity found. Remarks This method is available since v7.7.201.100. GetAbsoluteYAxis(DocumentId) Gets the absolute Y axis entity of a document. Declaration [AvailableSinceVersion(7, 7, 201, 100)] ElementId GetAbsoluteYAxis(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute Y axis entity found. Remarks This method is available since v7.7.201.100. GetAxes(DocumentId) Gets the axes entities that are in the axes folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetAxes(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Axes entities found. Remarks This method is available since v7.6. GetAxesFolder(DocumentId) Gets the axes folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetAxesFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the axes folder entity found. Remarks This method is available since v7.10. GetAxisGeometry(ElementId) Gets the geometry of an axis entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Axis2D GetAxisGeometry(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the axis entity to analyze. Returns Type Description Axis2D Axis geometry. Remarks This method is available since v7.6. GetAxisGeometryWithExtent(ElementId, out Double, out Double) Gets the geometry and the extent of an axis entity. Declaration [AvailableSinceVersion(7, 7, 201, 100)] Axis2D GetAxisGeometryWithExtent(ElementId inElementId, out double outXMin, out double outXMax) Parameters Type Name Description ElementId inElementId Identifier of the axis entity to analyze. System.Double outXMin Minimum X axis coordinate of extent. System.Double outXMax Maximum X axis coordinate of extent. Returns Type Description Axis2D Axis geometry. Remarks This method is available since v7.7.201.100. GetAxisPublishingDefinition(ElementId) Gets the definition of an axis publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartAxis2D GetAxisPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartAxis2D Remarks The geometry of the publishing entity may be obtained with the GetAxisGeometry(ElementId) method. This method is available since v7.8. GetFrameGeometry(ElementId) Gets the geometry of a frame entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Frame2D GetFrameGeometry(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the frame entity to analyze. Returns Type Description Frame2D Frame geometry. Remarks This method is available since v7.6. GetFramePublishingDefinition(ElementId) Gets the definition of a frame publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartFrame2D GetFramePublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartFrame2D Remarks The geometry of the publishing entity may be obtained with the GetFrameGeometry(ElementId) method. This method is available since v7.8. GetFrames(DocumentId) Gets the frames entities that are in the frames folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetFrames(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Frames entities found. Remarks This method is available since v7.6. GetFramesFolder(DocumentId) Gets the frames folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetFramesFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the frames folder entity found. Remarks This method is available since v7.10. GetGeometryType(ElementId) Gets the type of a geometric entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] GeometryType GetGeometryType(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description GeometryType Type of the geometric entity, or None if the element is not a 2D geometric entity. Remarks This method is available since v7.6. GetOccurrenceDefinitionTransform(ElementId) Gets the definition transform of an occurrence entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Transform2D GetOccurrenceDefinitionTransform(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the entity to analyze. Returns Type Description Transform2D Identifier of the definition transform of the occurrence. Remarks This method is available since v7.6. GetOccurrenceSourceTransform(ElementId) Gets the source transform of an occurrence entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Transform2D GetOccurrenceSourceTransform(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the entity to analyze. Returns Type Description Transform2D Identifier of the source transform of the occurrence. Remarks This method is available since v7.6. GetPointGeometry(ElementId) Gets the geometry of a point entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Point2D GetPointGeometry(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the point entity to analyze. Returns Type Description Point2D Point geometry. Remarks This method is available since v7.6. GetPointPublishingDefinition(ElementId) Gets the definition of a point publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartPoint2D GetPointPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartPoint2D Remarks The geometry of the publishing entity may be obtained with the GetPointGeometry(ElementId) method. This method is available since v7.8. GetPoints(DocumentId) Gets the points entities that are in the points folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetPoints(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Points entities found. Remarks This method is available since v7.6. GetPointsFolder(DocumentId) Gets the points folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetPointsFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the points folder entity found. Remarks This method is available since v7.10. PublishAxis(DocumentId, String, SmartAxis2D) Creates an axis publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishAxis(DocumentId inDocumentId, string inDescription, SmartAxis2D inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartAxis2D inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishFrame(DocumentId, String, SmartFrame2D) Creates a frame publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishFrame(DocumentId inDocumentId, string inDescription, SmartFrame2D inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartFrame2D inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishPoint(DocumentId, String, SmartPoint2D) Creates a point publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishPoint(DocumentId inDocumentId, string inDescription, SmartPoint2D inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartPoint2D inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetAxisGeometry(ElementId, Axis2D) Sets the geometry of an axis entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetAxisGeometry(ElementId inElementId, Axis2D inGeometry) Parameters Type Name Description ElementId inElementId Identifier of the axis entity to modify. Axis2D inGeometry New axis geometry. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetAxisGeometryWithExtent(ElementId, Axis2D, Double, Double) Sets the geometry and the extent of an axis entity. Declaration [AvailableSinceVersion(7, 7, 201, 100)] void SetAxisGeometryWithExtent(ElementId inElementId, Axis2D inGeometry, double inXMin, double inXMax) Parameters Type Name Description ElementId inElementId Identifier of the axis entity to modify. Axis2D inGeometry New axis geometry. System.Double inXMin Minimum X axis coordinate of extent. System.Double inXMax Maximum X axis coordinate of extent. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. SetAxisPublishingDefinition(ElementId, SmartAxis2D) Sets the definition of an axis publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetAxisPublishingDefinition(ElementId inElementId, SmartAxis2D inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartAxis2D inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetFrameGeometry(ElementId, Frame2D) Sets the geometry of a frame entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetFrameGeometry(ElementId inElementId, Frame2D inGeometry) Parameters Type Name Description ElementId inElementId Identifier of the frame entity to modify. Frame2D inGeometry New frame geometry. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetFramePublishingDefinition(ElementId, SmartFrame2D) Sets the definition of a frame publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetFramePublishingDefinition(ElementId inElementId, SmartFrame2D inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartFrame2D inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetPointGeometry(ElementId, Point2D) Sets the geometry of a point entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetPointGeometry(ElementId inElementId, Point2D inGeometry) Parameters Type Name Description ElementId inElementId Identifier of the point entity to modify. Point2D inGeometry New point geometry. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetPointPublishingDefinition(ElementId, SmartPoint2D) Sets the definition of a point publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetPointPublishingDefinition(ElementId inElementId, SmartPoint2D inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartPoint2D inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8."
  },
  "api/kernel/TopSolid.Kernel.Automating.IGeometries3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IGeometries3D.html",
    "title": "Interface IGeometries3D | TopSolid Automation website",
    "keywords": "Interface IGeometries3D Gives access to 3D geometric entities. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IGeometries3D Remarks This interface is available since v7.6. Methods CreateAxis(DocumentId, Axis3D) Creates an axis entity in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateAxis(DocumentId inDocumentId, Axis3D inGeometry) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Axis3D inGeometry Axis geometry. Returns Type Description ElementId Identifier of the created axis entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateAxisWithExtent(DocumentId, Axis3D, Double, Double) Creates an axis entity with specified extent in a document. Declaration [AvailableSinceVersion(7, 7, 201, 100)] ElementId CreateAxisWithExtent(DocumentId inDocumentId, Axis3D inGeometry, double inXMin, double inXMax) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Axis3D inGeometry Axis geometry. System.Double inXMin Minimum X axis coordinate of extent. System.Double inXMax Maximum X axis coordinate of extent. Returns Type Description ElementId Identifier of the created axis entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. CreateFrame(DocumentId, Frame3D) Creates a frame entity in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateFrame(DocumentId inDocumentId, Frame3D inGeometry) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Frame3D inGeometry Frame geometry. Returns Type Description ElementId Identifier of the created frame entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateOffsetPoint(DocumentId, SmartPoint3D, SmartDirection3D, SmartReal) Creates an offset point creation operation in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateOffsetPoint(DocumentId inDocumentId, SmartPoint3D inOrigin, SmartDirection3D inDirection, SmartReal inDistance) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartPoint3D inOrigin Origin point. SmartDirection3D inDirection Offset direction. SmartReal inDistance Offset distance. Returns Type Description ElementId Identifier of the created operation child point entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreatePlane(DocumentId, Plane3D) Creates a plane entity in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreatePlane(DocumentId inDocumentId, Plane3D inGeometry) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Plane3D inGeometry Plane geometry. Returns Type Description ElementId Identifier of the created plane entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreatePlaneWithExtent(DocumentId, Plane3D, Double, Double, Double, Double) Creates a plane entity with specified extent in a document. Declaration [AvailableSinceVersion(7, 7, 201, 100)] ElementId CreatePlaneWithExtent(DocumentId inDocumentId, Plane3D inGeometry, double inXMin, double inXMax, double inYMin, double inYMax) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Plane3D inGeometry Plane geometry. System.Double inXMin Minimum X plane coordinate of extent. System.Double inXMax Maximum X plane coordinate of extent. System.Double inYMin Minimum Y plane coordinate of extent. System.Double inYMax Maximum Y plane coordinate of extent. Returns Type Description ElementId Identifier of the created plane entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. CreatePoint(DocumentId, Point3D) Creates a point entity in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreatePoint(DocumentId inDocumentId, Point3D inGeometry) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Point3D inGeometry Point geometry. Returns Type Description ElementId Identifier of the created point entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateSmartFrame(DocumentId, SmartFrame3D) Creates a frame entity with a provided smart frame in a document. Declaration [AvailableSinceVersion(7, 15, 400, 120)] ElementId CreateSmartFrame(DocumentId inDocumentId, SmartFrame3D inProvidedSmartFrame) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartFrame3D inProvidedSmartFrame The provided smart frame. Returns Type Description ElementId Identifier of the created frame entity. Remarks This method allows to create a frame entity associated to an operation. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15.400.120. GetAbsoluteFrame(DocumentId) Gets the absolute frame entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetAbsoluteFrame(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute frame entity found. Remarks This method is available since v7.6. GetAbsoluteOriginPoint(DocumentId) Gets the absolute origin point entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetAbsoluteOriginPoint(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute origin point entity found. Remarks This method is available since v7.6. GetAbsoluteXAxis(DocumentId) Gets the absolute X axis entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetAbsoluteXAxis(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute X axis entity found. Remarks This method is available since v7.6. GetAbsoluteXYPlane(DocumentId) Gets the absolute XY plane entity of a document. Declaration ElementId GetAbsoluteXYPlane(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute XY plane entity found. GetAbsoluteXZPlane(DocumentId) Gets the absolute XZ plane entity of a document. Declaration ElementId GetAbsoluteXZPlane(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute XZ plane entity found. GetAbsoluteYAxis(DocumentId) Gets the absolute Y axis entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetAbsoluteYAxis(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute Y axis entity found. Remarks This method is available since v7.6. GetAbsoluteYZPlane(DocumentId) Gets the absolute YZ plane entity of a document. Declaration ElementId GetAbsoluteYZPlane(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute YZ plane entity found. GetAbsoluteZAxis(DocumentId) Gets the absolute Z axis entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetAbsoluteZAxis(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the absolute Z axis entity found. Remarks This method is available since v7.6. GetAxes(DocumentId) Gets the axes entities that are in the axes folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetAxes(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Axes entities found. Remarks This method is available since v7.6. GetAxesFolder(DocumentId) Gets the axes folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetAxesFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the axes folder entity found. Remarks This method is available since v7.10. GetAxisGeometry(ElementId) Gets the geometry of an axis entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Axis3D GetAxisGeometry(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the axis entity to analyze. Returns Type Description Axis3D Axis geometry. Remarks This method is available since v7.6. GetAxisGeometryWithExtent(ElementId, out Double, out Double) Gets the geometry and the extent of an axis entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Axis3D GetAxisGeometryWithExtent(ElementId inElementId, out double outXMin, out double outXMax) Parameters Type Name Description ElementId inElementId Identifier of the axis entity to analyze. System.Double outXMin Minimum X axis coordinate of extent. System.Double outXMax Maximum X axis coordinate of extent. Returns Type Description Axis3D Axis geometry. Remarks This method is available since v7.6. GetAxisPublishingDefinition(ElementId) Gets the definition of an axis publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartAxis3D GetAxisPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartAxis3D Remarks The geometry of the publishing entity may be obtained with the GetAxisGeometry(ElementId) method. This method is available since v7.8. GetFrameGeometry(ElementId) Gets the geometry of a frame entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Frame3D GetFrameGeometry(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the frame entity to analyze. Returns Type Description Frame3D Frame geometry. Remarks This method is available since v7.6. GetFramePublishingDefinition(ElementId) Gets the definition of a frame publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartFrame3D GetFramePublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartFrame3D Remarks The geometry of the publishing entity may be obtained with the GetFrameGeometry(ElementId) method. This method is available since v7.8. GetFrames(DocumentId) Gets the frames entities that are in the frames folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetFrames(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Frames entities found. Remarks This method is available since v7.6. GetFramesFolder(DocumentId) Gets the frames folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetFramesFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the frames folder entity found. Remarks This method is available since v7.10. GetGeometryType(ElementId) Gets the type of a geometric entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] GeometryType GetGeometryType(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description GeometryType Type of the geometric entity, or None if the element is not a 3D geometric entity. Remarks This method is available since v7.6. GetOccurrenceDefinitionTransform(ElementId) Gets the definition transform of an occurrence entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Transform3D GetOccurrenceDefinitionTransform(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the entity to analyze. Returns Type Description Transform3D Identifier of the definition transform of the occurrence. Remarks This method is available since v7.6. GetOccurrenceSourceTransform(ElementId) Gets the source transform of an occurrence entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Transform3D GetOccurrenceSourceTransform(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the entity to analyze. Returns Type Description Transform3D Identifier of the source transform of the occurrence. Remarks This method is available since v7.6. GetOffsetPointCreation(ElementId, out SmartPoint3D, out SmartDirection3D, out SmartReal) Gets an offset point creation operation. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void GetOffsetPointCreation(ElementId inElementId, out SmartPoint3D outOrigin, out SmartDirection3D outDirection, out SmartReal outDistance) Parameters Type Name Description ElementId inElementId Identifier of the offset point creation operation to analyze. SmartPoint3D outOrigin Origin point. SmartDirection3D outDirection Offset direction. SmartReal outDistance Offset distance. Remarks This method is available since v7.8. GetPlaneGeometry(ElementId) Gets the geometry of a plane entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Plane3D GetPlaneGeometry(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the plane entity to analyze. Returns Type Description Plane3D Plane geometry. Remarks This method is available since v7.6. GetPlaneGeometryWithExtent(ElementId, out Double, out Double, out Double, out Double) Gets the geometry and the extent of a plane entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Plane3D GetPlaneGeometryWithExtent(ElementId inElementId, out double outXMin, out double outXMax, out double outYMin, out double outYMax) Parameters Type Name Description ElementId inElementId Identifier of the plane entity to analyze. System.Double outXMin Minimum X plane coordinate of extent. System.Double outXMax Maximum X plane coordinate of extent. System.Double outYMin Minimum Y plane coordinate of extent. System.Double outYMax Maximum Y plane coordinate of extent. Returns Type Description Plane3D Plane geometry. Remarks This method is available since v7.6. GetPlanePublishingDefinition(ElementId) Gets the definition of a plane publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartPlane3D GetPlanePublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartPlane3D Remarks The geometry of the publishing entity may be obtained with the GetPlaneGeometry(ElementId) method. This method is available since v7.8. GetPlanes(DocumentId) Gets the planes entities that are in the planes folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetPlanes(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Planes entities found. Remarks This method is available since v7.6. GetPlanesFolder(DocumentId) Gets the planes folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetPlanesFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the planes folder entity found. Remarks This method is available since v7.10. GetPointGeometry(ElementId) Gets the geometry of a point entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Point3D GetPointGeometry(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the point entity to analyze. Returns Type Description Point3D Point geometry. Remarks This method is available since v7.6. GetPointPublishingDefinition(ElementId) Gets the definition of a point publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartPoint3D GetPointPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartPoint3D Remarks The geometry of the publishing entity may be obtained with the GetPointGeometry(ElementId) method. This method is available since v7.8. GetPoints(DocumentId) Gets the points entities that are in the points folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetPoints(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Points entities found. Remarks This method is available since v7.6. GetPointsFolder(DocumentId) Gets the points folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetPointsFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the points folder entity found. Remarks This method is available since v7.10. GetSectionPublishingDefinition(ElementId) Gets the definition of a section publishing entity. Declaration [AvailableSinceVersion(7, 8, 302, 80)] SmartSection3D GetSectionPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartSection3D Remarks This method is available since v7.8.302.80. PublishAxis(DocumentId, String, SmartAxis3D) Creates an axis publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishAxis(DocumentId inDocumentId, string inDescription, SmartAxis3D inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartAxis3D inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishFrame(DocumentId, String, SmartFrame3D) Creates a frame publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishFrame(DocumentId inDocumentId, string inDescription, SmartFrame3D inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartFrame3D inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishPlane(DocumentId, String, SmartPlane3D) Creates a plane publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishPlane(DocumentId inDocumentId, string inDescription, SmartPlane3D inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartPlane3D inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishPoint(DocumentId, String, SmartPoint3D) Creates a point publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishPoint(DocumentId inDocumentId, string inDescription, SmartPoint3D inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartPoint3D inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishSection(DocumentId, String, SmartSection3D) Creates a section publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 302, 80)] ElementId PublishSection(DocumentId inDocumentId, string inDescription, SmartSection3D inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartSection3D inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8.302.80. SetAxisGeometry(ElementId, Axis3D) Sets the geometry of an axis entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetAxisGeometry(ElementId inElementId, Axis3D inGeometry) Parameters Type Name Description ElementId inElementId Identifier of the axis entity to modify. Axis3D inGeometry New axis geometry. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetAxisGeometryWithExtent(ElementId, Axis3D, Double, Double) Sets the geometry and the extent of an axis entity. Declaration [AvailableSinceVersion(7, 7, 201, 100)] void SetAxisGeometryWithExtent(ElementId inElementId, Axis3D inGeometry, double inXMin, double inXMax) Parameters Type Name Description ElementId inElementId Identifier of the axis entity to modify. Axis3D inGeometry New axis geometry. System.Double inXMin Minimum X axis coordinate of extent. System.Double inXMax Maximum X axis coordinate of extent. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. SetAxisPublishingDefinition(ElementId, SmartAxis3D) Sets the definition of an axis publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetAxisPublishingDefinition(ElementId inElementId, SmartAxis3D inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartAxis3D inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetFrameGeometry(ElementId, Frame3D) Sets the geometry of a frame entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetFrameGeometry(ElementId inElementId, Frame3D inGeometry) Parameters Type Name Description ElementId inElementId Identifier of the frame entity to modify. Frame3D inGeometry New frame geometry. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetFramePublishingDefinition(ElementId, SmartFrame3D) Sets the definition of a frame publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetFramePublishingDefinition(ElementId inElementId, SmartFrame3D inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartFrame3D inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetOffsetPointCreation(ElementId, SmartPoint3D, SmartDirection3D, SmartReal) Sets an offset point creation operation. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetOffsetPointCreation(ElementId inElementId, SmartPoint3D inOrigin, SmartDirection3D inDirection, SmartReal inDistance) Parameters Type Name Description ElementId inElementId Identifier of the offset point creation operation to modify. SmartPoint3D inOrigin Origin point. SmartDirection3D inDirection Offset direction. SmartReal inDistance Offset distance. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetPlaneGeometry(ElementId, Plane3D) Sets the geometry of a plane entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetPlaneGeometry(ElementId inElementId, Plane3D inGeometry) Parameters Type Name Description ElementId inElementId Identifier of the plane entity to modify. Plane3D inGeometry New plane geometry. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetPlaneGeometryWithExtent(ElementId, Plane3D, Double, Double, Double, Double) Sets the geometry and the extent of a plane entity. Declaration [AvailableSinceVersion(7, 7, 201, 100)] void SetPlaneGeometryWithExtent(ElementId inElementId, Plane3D inGeometry, double inXMin, double inXMax, double inYMin, double inYMax) Parameters Type Name Description ElementId inElementId Identifier of the plane entity to modify. Plane3D inGeometry New plane geometry. System.Double inXMin Minimum X plane coordinate of extent. System.Double inXMax Maximum X plane coordinate of extent. System.Double inYMin Minimum Y plane coordinate of extent. System.Double inYMax Maximum Y plane coordinate of extent. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.100. SetPlanePublishingDefinition(ElementId, SmartPlane3D) Sets the definition of a plane publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetPlanePublishingDefinition(ElementId inElementId, SmartPlane3D inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartPlane3D inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetPointGeometry(ElementId, Point3D) Sets the geometry of a point entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetPointGeometry(ElementId inElementId, Point3D inGeometry) Parameters Type Name Description ElementId inElementId Identifier of the point entity to modify. Point3D inGeometry New point geometry. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetPointPublishingDefinition(ElementId, SmartPoint3D) Sets the definition of a point publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetPointPublishingDefinition(ElementId inElementId, SmartPoint3D inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartPoint3D inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetPointPublishingDefinitionList(ElementId, List<SmartPoint3D>) Sets the definition of a point publishing list entity. Declaration [AvailableSinceVersion(7, 16, 400, 0)] void SetPointPublishingDefinitionList(ElementId inElementId, List<SmartPoint3D> inDefinitions) Parameters Type Name Description ElementId inElementId Identifier of the publishing list entity to modify. List < SmartPoint3D > inDefinitions Publishing new definitions. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16.400. SetSectionPublishingDefinition(ElementId, SmartSection3D) Sets the definition of a section publishing entity. Declaration [AvailableSinceVersion(7, 8, 302, 80)] void SetSectionPublishingDefinition(ElementId inElementId, SmartSection3D inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartSection3D inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8.302.80."
  },
  "api/kernel/TopSolid.Kernel.Automating.ILicenses.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ILicenses.html",
    "title": "Interface ILicenses | TopSolid Automation website",
    "keywords": "Interface ILicenses Gives access to methods to read and interact with licenses. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 16, 400, 20)] public interface ILicenses Remarks This interface is available since v7.16. Methods ActivateLicense(License) Activates a license. Declaration [AvailableSinceVersion(7, 16, 400, 20)] void ActivateLicense(License inLicense) Parameters Type Name Description License inLicense License to activate. Remarks This method is available since v7.16. AddFloatingLicense(License) Adds a floating license. Declaration [AvailableSinceVersion(7, 16, 400, 20)] void AddFloatingLicense(License inLicense) Parameters Type Name Description License inLicense Floating license to add. Remarks This method is available since v7.16. DeactivateLicense(License) Deactivates a license. Declaration [AvailableSinceVersion(7, 16, 400, 20)] void DeactivateLicense(License inLicense) Parameters Type Name Description License inLicense License to activate. Remarks This method is available since v7.16. GetActveLicenses() Gets the active licenses. Declaration [AvailableSinceVersion(7, 16, 400, 20)] List<License> GetActveLicenses() Returns Type Description List < License > Active licenses. Remarks This method is available since v7.16. GetFloatingLicenseServers() Gets the floating license servers. Declaration [AvailableSinceVersion(7, 16, 400, 20)] string GetFloatingLicenseServers() Returns Type Description System.String Floating license servers name or IP address, in string format: \"IPAddress1;IPAddress2;...\". Remarks This method is available since v7.16. GetLicenses() Gets all licenses. Declaration [AvailableSinceVersion(7, 16, 400, 20)] List<License> GetLicenses() Returns Type Description List < License > All licenses. Remarks This method is available since v7.16. GetUsedFloatingLicenses() Gets used floating licenses. Declaration [AvailableSinceVersion(7, 16, 400, 20)] List<License> GetUsedFloatingLicenses() Returns Type Description List < License > Used floating licenses. Remarks This method is available since v7.16. SetFloatingLicenseServer(String) Sets the floating license server. Declaration [AvailableSinceVersion(7, 16, 400, 20)] void SetFloatingLicenseServer(string inIPAddressOrName) Parameters Type Name Description System.String inIPAddressOrName Server IP address or server name. Remarks This method is available since v7.16."
  },
  "api/kernel/TopSolid.Kernel.Automating.IMaterials.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IMaterials.html",
    "title": "Interface IMaterials | TopSolid Automation website",
    "keywords": "Interface IMaterials Gives access to methods to read and interact with materials and textures. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 400, 0)] public interface IMaterials Remarks This interface is available since v7.17. Methods CloseTextureRetrievalSession(Guid) Closes a texture retrieval session. Declaration [AvailableSinceVersion(7, 17, 400, 0)] void CloseTextureRetrievalSession(Guid inSessionId) Parameters Type Name Description System.Guid inSessionId Identifier of the session to close. Remarks This method is available since v7.17. GetTextureImage(Guid, String) Gets the texture image of an image signature. Declaration [AvailableSinceVersion(7, 17, 400, 0)] TextureImage GetTextureImage(Guid inSessionId, string inImageSignature) Parameters Type Name Description System.Guid inSessionId Identifier of the session. System.String inImageSignature Image signature. Returns Type Description TextureImage Material image of the image signature. Remarks This method is available since v7.17. GetTextureSignatures(Guid, Int32, String) Gets texture signatures from all texture documents. Declaration [AvailableSinceVersion(7, 17, 400, 0)] List<string> GetTextureSignatures(Guid inSessionId, int inMaxTextureSize, string inFolderPath) Parameters Type Name Description System.Guid inSessionId Identifier of the session. System.Int32 inMaxTextureSize Maximum size of the textures (width or length, in rectangle format). System.String inFolderPath Folder where the textures files will be saved. Returns Type Description List < System.String > Texture signatures. Remarks The file are saved in PNG format in the specified folder path, named signature.png. This method is available since v7.17. OpenTextureRetrievalSession() Opens a texture retrieval session. Declaration [AvailableSinceVersion(7, 17, 400, 0)] Guid OpenTextureRetrievalSession() Returns Type Description System.Guid Identifier of the opened session. Remarks This method is available since v7.17."
  },
  "api/kernel/TopSolid.Kernel.Automating.IntegerProperty.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IntegerProperty.html",
    "title": "Class IntegerProperty | TopSolid Automation website",
    "keywords": "Class IntegerProperty Represents a integer property. Inheritance System.Object Property IntegerProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 12, 0, 0)] public class IntegerProperty : Property Remarks This class is available since v7.12. Constructors IntegerProperty(Int32) Initializes a new instance of the IntegerProperty class. Declaration public IntegerProperty(int inValue) Parameters Type Name Description System.Int32 inValue Value. Fields Value Value. Declaration public int Value Field Value Type Description System.Int32 Properties Type Gets the property type. Declaration public override PropertyType Type { get; } Property Value Type Description PropertyType Overrides Property.Type"
  },
  "api/kernel/TopSolid.Kernel.Automating.IOperations.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IOperations.html",
    "title": "Interface IOperations | TopSolid Automation website",
    "keywords": "Interface IOperations Gives access to operations. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IOperations Remarks This interface is available since v7.6. Methods Activate(ElementId) Activates an operation. Declaration [AvailableSinceVersion(7, 12, 0, 0)] void Activate(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to modify. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. Deactivate(ElementId) Deactivates an operation. Declaration [AvailableSinceVersion(7, 12, 0, 0)] void Deactivate(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to modify. Remarks An exception will be thrown when trying to deactivate an operation that is not deactivable. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. Freeze(ElementId) Freezes an operation. Declaration [AvailableSinceVersion(7, 12, 0, 0)] void Freeze(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to modify. Remarks An exception will be thrown when trying to freeze an operation that is not freezable. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. GetChild(ElementId) Gets the child element of an operation. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetChild(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to analyze. Returns Type Description ElementId Identifier of the child element found, or Empty if none. Remarks The operation must not have several children, otherwise an exception is thrown. This method is available since v7.6. GetChildren(ElementId) Gets the children elements of a an operation. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetChildren(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to analyze. Returns Type Description List < ElementId > Identifiers of the children elements found. Remarks This method is available since v7.6. GetCondition(ElementId) Gets the condition of an operation. Declaration [AvailableSinceVersion(7, 12, 0, 0)] SmartBoolean GetCondition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to analyze. Returns Type Description SmartBoolean Condition of the operation, or null if none. Remarks This method is available since v7.12. GetDefinitionStage(DocumentId) Gets the definition stage operation of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId GetDefinitionStage(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the definition stage operation found, or Empty if none. Remarks This method is available since v7.8. GetFinalStage(DocumentId) Gets the final stage operation of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId GetFinalStage(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the final stage operation. Remarks This method is available since v7.8. GetInitialStage(DocumentId) Gets the initial stage operation of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId GetInitialStage(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the initial stage operation. Remarks This method is available since v7.8. GetInsertionOperation(DocumentId) Gets the insertion operation of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId GetInsertionOperation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the insertion operation. Remarks New operations are created before the insertion operation. This method is available since v7.8. GetModelingStage(DocumentId) Gets the modeling stage operation of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId GetModelingStage(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the modeling stage operation found, or Empty if none. Remarks This method is available since v7.8. GetModelingTolerances(ElementId, out Double, out Double) Gets the modeling tolerances of an operation. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void GetModelingTolerances(ElementId inElementId, out double outLinearTolerance, out double outAngularTolerance) Parameters Type Name Description ElementId inElementId Identifier of the operation to analyze. System.Double outLinearTolerance Linear tolerance (in meters), or 0 if the operation does not have a linear modeling tolerance. System.Double outAngularTolerance Angular tolerance (in radians), or 0 if the operation does not have an angular modeling tolerance. Remarks This method is available since v7.8. GetOperations(DocumentId) Gets the operations of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetOperations(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Operations found. Remarks The operations are sorted in chronological order (i.e. first operation of the list is executed first). This method is available since v7.6. GetStages(DocumentId) Gets the stage operations of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] List<ElementId> GetStages(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Stage operations found. Remarks The stage operations are sorted in chronological order. This method is available since v7.8. GetWorkingStage(DocumentId) Gets the working stage operation of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId GetWorkingStage(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the working stage operation. Remarks This method is available since v7.8. HasFrozenOwner(ElementId) Tells whether an operation owner is frozen, or the owner of its owner,... Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool HasFrozenOwner(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to analyze. Returns Type Description System.Boolean The operation has a direct or indirect frozen owner. Remarks This method is available since v7.12. HasInactiveOwner(ElementId) Tells whether an operation owner is not active, or the owner of its owner,... Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool HasInactiveOwner(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to analyze. Returns Type Description System.Boolean The operation has a direct or indirect inactive owner. Remarks This method is available since v7.12. IsActive(ElementId) Tells whether an operation is active. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsActive(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to analyze. Returns Type Description System.Boolean The operation is active. Remarks This method is available since v7.6. IsDeactivable(ElementId) Tells whether an operation may be deactivated. Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool IsDeactivable(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to analyze. Returns Type Description System.Boolean The operation may be deactivated. Remarks This method is available since v7.12. IsFreezable(ElementId) Tells whether an operation may be frozen. Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool IsFreezable(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to analyze. Returns Type Description System.Boolean The operation may be frozen. Remarks This method is available since v7.12. IsFrozen(ElementId) Tells whether an operation is frozen. Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool IsFrozen(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to analyze. Returns Type Description System.Boolean The operation is frozen. Remarks This method is available since v7.12. IsOperation(ElementId) Tells whether an element is an operation. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsOperation(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element is an operation. Remarks This method is available since v7.6. MoveOperation(ElementId, ElementId, Int32) Moves an operation. Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MoveOperation(ElementId inElementId, ElementId inOwnerId, int inIndex) Parameters Type Name Description ElementId inElementId Identifier of the operation to move. ElementId inOwnerId Identifier of the new owner operation. System.Int32 inIndex Index of the operation in the new owner. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.80. ResetInsertionOperation(DocumentId) Resets the insertion operation of a document to its natural place. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void ResetInsertionOperation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Remarks New operations are created before the insertion operation. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetCondition(ElementId, SmartBoolean) Sets the condition of an operation. Declaration [AvailableSinceVersion(7, 12, 0, 0)] void SetCondition(ElementId inElementId, SmartBoolean inCondition) Parameters Type Name Description ElementId inElementId Identifier of the operation to modify. SmartBoolean inCondition Condition, or null if none. Remarks An exception will be thrown when trying to set a non-null condition to an operation that is not deactivable. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12. SetInsertionOperation(ElementId) Sets the insertion operation of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetInsertionOperation(ElementId inOperationId) Parameters Type Name Description ElementId inOperationId Identifier of new insertion operation. Remarks New operations are created before the insertion operation. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetModelingTolerances(ElementId, Double, Double) Sets the modeling tolerances of an operation. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetModelingTolerances(ElementId inElementId, double inLinearTolerance, double inAngularTolerance) Parameters Type Name Description ElementId inElementId Identifier of the operation to modify. System.Double inLinearTolerance Linear tolerance (in meters, within [0.0001mm,0.1mm]), or 0 for unchanged. System.Double inAngularTolerance Angular tolerance (in radians, within [0.01°,10°]), or 0 for unchanged. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetWorkingStage(ElementId) Sets the working stage operation of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetWorkingStage(ElementId inOperationId) Parameters Type Name Description ElementId inOperationId Identifier of new working stage operation. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. Unfreeze(ElementId) Unfreezes an operation. Declaration [AvailableSinceVersion(7, 12, 0, 0)] void Unfreeze(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the operation to modify. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12."
  },
  "api/kernel/TopSolid.Kernel.Automating.IOptions.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IOptions.html",
    "title": "Interface IOptions | TopSolid Automation website",
    "keywords": "Interface IOptions Gives access to the options of a document. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public interface IOptions Remarks This interface is available since v7.8. Methods GetFileCompressionType(DocumentId) Gets the compression type of a document file. Declaration [AvailableSinceVersion(7, 12, 300, 160)] CompressionType GetFileCompressionType(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description CompressionType Compression type of the document file. Remarks This method is available since v7.12.300.160. GetModelingTolerances(DocumentId, out Double, out Double) Gets the modeling tolerances of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void GetModelingTolerances(DocumentId inDocumentId, out double outLinearTolerance, out double outAngularTolerance) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.Double outLinearTolerance Linear tolerance (in meters). System.Double outAngularTolerance Angular tolerance (in radians). Remarks This method is available since v7.8. GetUpdateModes(DocumentId, out Boolean, out Boolean) Gets the update modes of a document. Declaration [AvailableSinceVersion(7, 12, 300, 160)] void GetUpdateModes(DocumentId inDocumentId, out bool outIsHealing, out bool outIsTolerant) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.Boolean outIsHealing Whether update automatically heals damaged operations. System.Boolean outIsTolerant Whether update ignores modifications that are less than standard precision. Remarks This method is available since v7.12.300.160. GetVisualizationTolerances(DocumentId, out Double, out Double) Gets the visualization tolerances of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void GetVisualizationTolerances(DocumentId inDocumentId, out double outLinearTolerance, out double outAngularTolerance) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.Double outLinearTolerance Linear tolerance (in meters). System.Double outAngularTolerance Angular tolerance (in radians). Remarks This method is available since v7.8. SetFileCompressionType(DocumentId, CompressionType) Sets the compression type of a document file. Declaration [AvailableSinceVersion(7, 12, 300, 160)] void SetFileCompressionType(DocumentId inDocumentId, CompressionType inCompressionType) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. CompressionType inCompressionType Compression type of the document file. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12.300.160. SetModelingTolerances(DocumentId, Double, Double) Sets the modeling tolerances of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetModelingTolerances(DocumentId inDocumentId, double inLinearTolerance, double inAngularTolerance) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inLinearTolerance Linear tolerance (in meters, within [0.0001mm,0.1mm]). System.Double inAngularTolerance Angular tolerance (in radians, within [0.01°,10°]). Remarks The document modeling tolerances are used as default modeling tolerances for new operations, changing them has no impact on existing operations. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetUpdateModes(DocumentId, Boolean, Boolean) Sets the update modes of a document. Declaration [AvailableSinceVersion(7, 12, 300, 160)] void SetUpdateModes(DocumentId inDocumentId, bool inIsHealing, bool inIsTolerant) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Boolean inIsHealing Whether update automatically heals damaged operations. System.Boolean inIsTolerant Whether update ignores modifications that are less than standard precision. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.12.300.160. SetVisualizationTolerances(DocumentId, Double, Double) Sets the visualization tolerances of a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetVisualizationTolerances(DocumentId inDocumentId, double inLinearTolerance, double inAngularTolerance) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inLinearTolerance Linear tolerance (in meters, within [0.001mm,10mm]). System.Double inAngularTolerance Angular tolerance (in radians, within [1°,90°]). Remarks The document is automatically updated to take into account the new tolerances. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8."
  },
  "api/kernel/TopSolid.Kernel.Automating.IParameters.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IParameters.html",
    "title": "Interface IParameters | TopSolid Automation website",
    "keywords": "Interface IParameters Gives access to parameter entities. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IParameters Remarks This interface is available since v7.6. Methods AreRealParameterPossibleValuesStrict(ElementId) Tells wether the possible values of the real parameter are strict. Declaration [AvailableSinceVersion(7, 17, 0, 0)] bool AreRealParameterPossibleValuesStrict(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description System.Boolean Wether the parameter has strict possible values. Remarks This method is available since v7.17.000.000. ClearValue(ElementId) Clears the value of a parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void ClearValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateBooleanParameter(DocumentId, Boolean) Creates a Boolean parameter entity in a document. Declaration [AvailableSinceVersion(7, 6, 301, 40)] ElementId CreateBooleanParameter(DocumentId inDocumentId, bool inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Boolean inValue Value. Returns Type Description ElementId Identifier of the created parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6.301.40. CreateDateTimeParameter(DocumentId, DateTime) Creates a date time parameter entity in a document. Declaration [AvailableSinceVersion(7, 6, 301, 40)] ElementId CreateDateTimeParameter(DocumentId inDocumentId, DateTime inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.DateTime inValue Value. Returns Type Description ElementId Identifier of the created parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6.301.40. CreateIntegerParameter(DocumentId, Int32) Creates an integer parameter entity in a document. Declaration [AvailableSinceVersion(7, 6, 301, 40)] ElementId CreateIntegerParameter(DocumentId inDocumentId, int inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Int32 inValue Value. Returns Type Description ElementId Identifier of the created parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6.301.40. CreateRealParameter(DocumentId, UnitType, Double) Creates a real parameter entity in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateRealParameter(DocumentId inDocumentId, UnitType inUnitType, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. UnitType inUnitType Type of units. System.Double inValue Value in SI units. Returns Type Description ElementId Identifier of the created parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. CreateSmartBooleanParameter(DocumentId, SmartBoolean) Creates a smart boolean parameter creation operation in a document. Declaration [AvailableSinceVersion(7, 17, 400, 220)] ElementId CreateSmartBooleanParameter(DocumentId inDocumentId, SmartBoolean inSmartBoolean) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartBoolean inSmartBoolean Smart boolean value. Returns Type Description ElementId Identifier of the created operation child parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17. CreateSmartIntegerParameter(DocumentId, SmartInteger) Creates a smart integer parameter creation operation in a document. Declaration [AvailableSinceVersion(7, 17, 400, 220)] ElementId CreateSmartIntegerParameter(DocumentId inDocumentId, SmartInteger inSmartInteger) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartInteger inSmartInteger Smart integer value. Returns Type Description ElementId Identifier of the created operation child parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. The smart real parameter creation operation created is in \"unit auto\" mode set to false , it may be changed using the SetSmartRealParameterCreationUnitAuto(ElementId, Boolean) method. This method is available since v7.17. CreateSmartRealParameter(DocumentId, SmartReal) Creates a smart real parameter creation operation in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateSmartRealParameter(DocumentId inDocumentId, SmartReal inSmartReal) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartReal inSmartReal Smart real value. Returns Type Description ElementId Identifier of the created operation child parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. The smart real parameter creation operation created is in \"unit auto\" mode set to false , it may be changed using the SetSmartRealParameterCreationUnitAuto(ElementId, Boolean) method. This method is available since v7.6. CreateSmartTextParameter(DocumentId, SmartText) Creates a smart text parameter creation operation in a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId CreateSmartTextParameter(DocumentId inDocumentId, SmartText inSmartText) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartText inSmartText Smart text value. Returns Type Description ElementId Identifier of the created operation child parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. Examples How to create a text parameter made by concatenating the values of two existing text parameters named \"t1\" and \"t2\": SmartText smartText = new SmartText(SmartTextType.Formula, null, ElementId.Empty, ItemLabel.Empty, \"t1 & t2\"); ElementId eltId = TopSolidHost.Parameters.CreateSmartTextParameter(docId, smartText); CreateTextParameter(DocumentId, String) Creates a text parameter entity in a document. Declaration [AvailableSinceVersion(7, 6, 301, 40)] ElementId CreateTextParameter(DocumentId inDocumentId, string inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inValue Value. Returns Type Description ElementId Identifier of the created parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6.301.40. CreateToleranceParameter(DocumentId, UnitType, String, Real, Real) Creates a tolerance parameter entity in a document. Declaration [AvailableSinceVersion(7, 14, 0, 0)] ElementId CreateToleranceParameter(DocumentId inDocumentId, UnitType inUnitType, string inName, Real inUpperDeviation, Real inLowerDeviation) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. UnitType inUnitType Unit type. System.String inName Name of the tolerance parameter. Real inUpperDeviation Upper value. Real inLowerDeviation Lower value. Returns Type Description ElementId Identifier of the created parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.14. CreateToleranceParameterFromDocument(DocumentId, DocumentId, String, String) Creates a tolerance parameter entity corresponding to a class in a tolerance document. Declaration [AvailableSinceVersion(7, 14, 0, 0)] ElementId CreateToleranceParameterFromDocument(DocumentId inDocumentId, DocumentId inToleranceDocumentId, string inName, string inClass) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inToleranceDocumentId Identifier of the tolerance document. System.String inName Name of the tolerance parameter. System.String inClass Class tolerance. Returns Type Description ElementId Identifier of the created parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.14. CreateUserPropertyParameter(DocumentId, DocumentId) Creates a parameter entity corresponding to a user property in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId CreateUserPropertyParameter(DocumentId inDocumentId, DocumentId inUserPropertyDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. DocumentId inUserPropertyDocumentId Identifier of the user propserty definition document. Returns Type Description ElementId Identifier of the created parameter entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. GetAuthorParameter(DocumentId) Gets the author name parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetAuthorParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the author name parameter entity found. Remarks The author name parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetBooleanPublishingDefinition(ElementId) Gets the definition of a Boolean publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartBoolean GetBooleanPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartBoolean Remarks The value of the publishing entity may be obtained with the GetBooleanValue(ElementId) method. This method is available since v7.8. GetBooleanValue(ElementId) Gets the value of a Boolean parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool GetBooleanValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.Boolean Value of the parameter. Remarks This method is available since v7.6. GetCodeFamily(ElementId) Gets the family of a code parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] DocumentId GetCodeFamily(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description DocumentId Family of the code parameter, as a family definition document identifier. Remarks This method is available since v7.6. GetCodeParameter(DocumentId) Gets the code parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetCodeParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the code parameter entity found. Remarks The code parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetCodePossibleValues(ElementId) Gets the code parameter possibles values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] List<CodeProperty> GetCodePossibleValues(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description List < CodeProperty > The possibles values. Remarks This method is available since v7.17.000.000. GetCodeValue(ElementId) Gets the value of a code parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetCodeValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.String Value of the parameter. Remarks This method is available since v7.6. GetColorValue(ElementId) Gets the value of a Color parameter. Declaration [AvailableSinceVersion(7, 15, 400, 100)] Color GetColorValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description Color Value of the parameter. Remarks This method is available since v7.15.400.100. GetCommentParameter(DocumentId) Gets the comment parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetCommentParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the comment parameter entity found. Remarks The comment parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetComplementaryPartNumberParameter(DocumentId) Gets the complementary part number parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetComplementaryPartNumberParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the complementary part number parameter entity found. Remarks The complementary part number parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetCreationDateParameter(DocumentId) Gets the creation date parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetCreationDateParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the creation date parameter entity found. Remarks The creation date parameter is a date parameter, its value may be obtained and modified using the GetDateTimeValue(ElementId) and SetDateTimeValue(ElementId, DateTime) methods. This method is available since v7.6. GetDateTimeValue(ElementId) Gets the value of a date time parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] DateTime GetDateTimeValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.DateTime Value of the parameter. Remarks This method is available since v7.6. GetDescriptionParameter(DocumentId) Gets the description parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetDescriptionParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the description parameter entity found. Remarks The description parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetDocumentParameterPossibleValues(ElementId) Gets the document parameter possibles values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] List<DocumentProperty> GetDocumentParameterPossibleValues(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description List < DocumentProperty > The possibles values. Remarks This method must be used for Document parameter such as Material or Coating documents. This method is available since v7.17.000.000. GetEnumerationDefinition(ElementId) Gets the GUID of the class defining the enumeration of an enumeration parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Guid GetEnumerationDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.Guid Enumeration GUID. Remarks This method is available since v7.6. GetEnumerationDefinitions(out List<Guid>, out List<String>) Gets the available enumeration definitions. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void GetEnumerationDefinitions(out List<Guid> outGuids, out List<string> outNames) Parameters Type Name Description List < System.Guid > outGuids GUIDs of the available classes defining an enumeration. List < System.String > outNames Localized names of the classes. Remarks This method is available since v7.6. GetEnumerationPublishingDefinition(ElementId) Gets the definition of an enumeration publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartEnumeration GetEnumerationPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartEnumeration Remarks The value of the publishing entity may be obtained with the GetEnumerationValue(ElementId) method. This method is available since v7.8. GetEnumerationText(ElementId) Gets the text corresponding to the value of an enumeration parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetEnumerationText(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.String Text corresponding to the value of the parameter. Remarks This method is available since v7.6. GetEnumerationValue(ElementId) Gets the value of an enumeration parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetEnumerationValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.Int32 Value of the parameter. Remarks This method is available since v7.6. GetEnumerationValues(Guid, out List<Int32>, out List<String>) Gets the possible values of an enumeration. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void GetEnumerationValues(Guid inGuid, out List<int> outValues, out List<string> outTexts) Parameters Type Name Description System.Guid inGuid GUID of the enumeration definition to analyze. List < System.Int32 > outValues Possible values. List < System.String > outTexts Texts of the possible values. Remarks This method is available since v7.6. GetFamilyValue(ElementId) Gets the value of a family parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] DocumentId GetFamilyValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description DocumentId Value of the parameter, as a family definition document identifier. Remarks This method is available since v7.6. GetIntegerPublishingDefinition(ElementId) Gets the definition of an integer publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartInteger GetIntegerPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartInteger Remarks The value of the publishing entity may be obtained with the GetIntegerValue(ElementId) method. This method is available since v7.8. GetIntegerValue(ElementId) Gets the value of an integer parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetIntegerValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.Int32 Value of the parameter. Remarks This method is available since v7.6. GetMajorRevisionParameter(DocumentId) Gets the major revision parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetMajorRevisionParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the major revision parameter entity found. Remarks The major revision parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetManufacturerParameter(DocumentId) Gets the manufacturer parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetManufacturerParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the manufacturer parameter entity found. Remarks The manufacturer parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetManufacturerPartNumberParameter(DocumentId) Gets the manufacturer part number parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetManufacturerPartNumberParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the manufacturer part number parameter entity found. Remarks The manufacturer part number parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetMinorRevisionParameter(DocumentId) Gets the minor revision parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetMinorRevisionParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the minor revision parameter entity found. Remarks The minor revision parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetModificationDateParameter(DocumentId) Gets the modification date parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetModificationDateParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the modification date parameter entity found. Remarks The modification date parameter is a date parameter, its value may be obtained and modified using the GetDateTimeValue(ElementId) and SetDateTimeValue(ElementId, DateTime) methods. This method is available since v7.6. GetNameParameter(DocumentId) Gets the name parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetNameParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the name parameter entity found. Remarks The name parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetParameters(DocumentId) Gets the parameters entities that are in the parameters folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetParameters(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Parameters entities found. Remarks This method is available since v7.6. GetParametersFolder(DocumentId) Gets the parameters folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetParametersFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the parameters folder entity found. Remarks This method is available since v7.10. GetParameterType(ElementId) Gets the type of a parameter entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ParameterType GetParameterType(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description ParameterType Type of the parameter, or None if the element is not a parameter entity. Remarks This method is available since v7.6. GetPartNumberParameter(DocumentId) Gets the part number parameter entity of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId GetPartNumberParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the part number parameter entity found. Remarks The part number parameter is a text parameter, its value may be obtained and modified using the GetTextValue(ElementId) and SetTextValue(ElementId, String) methods. This method is available since v7.6. GetRealParameterConstraintsDiscretizationMode(ElementId) Gets the real parameter constraints discretization mode. Declaration [AvailableSinceVersion(7, 17, 0, 0)] RealParameterDiscretizationMode GetRealParameterConstraintsDiscretizationMode(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description RealParameterDiscretizationMode The parameter constraints discretization mode. Remarks This method is available since v7.17.000.000. GetRealParameterConstraintsDiscretizationOrigin(ElementId) Gets the real parameter constraint discretization origin. Declaration [AvailableSinceVersion(7, 17, 0, 0)] RealProperty GetRealParameterConstraintsDiscretizationOrigin(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description RealProperty The parameter constraints discretization origin. Remarks This method is available since v7.17.000.000. GetRealParameterConstraintsDiscretizationStep(ElementId) Gets the real parameter constraint discretization step. Declaration [AvailableSinceVersion(7, 17, 0, 0)] RealProperty GetRealParameterConstraintsDiscretizationStep(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description RealProperty The parameter constraints discretization step. Remarks This method is available since v7.17.000.000. GetRealParameterConstraintsMaximumLimit(ElementId) Gets the real parameter constraint maximum limit. Declaration [AvailableSinceVersion(7, 17, 0, 0)] RealProperty GetRealParameterConstraintsMaximumLimit(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description RealProperty The minimum limit. Remarks This method is available since v7.17.000.000. GetRealParameterConstraintsMinimumLimit(ElementId) Gets the real parameter constraint minimum limite. Declaration [AvailableSinceVersion(7, 17, 0, 0)] RealProperty GetRealParameterConstraintsMinimumLimit(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description RealProperty The minimum limit. Remarks This method is available since v7.17.000.000. GetRealParameterConstraintsMode(ElementId) Gets the real parameter constraints mode. Declaration [AvailableSinceVersion(7, 17, 0, 0)] RealParameterConstraintsMode GetRealParameterConstraintsMode(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description RealParameterConstraintsMode The parameter constraints mode. Remarks This method is available since v7.17.000.000. GetRealParameterPossibleValues(ElementId) Gets the real parameter possibles values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] List<RealProperty> GetRealParameterPossibleValues(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description List < RealProperty > The possibles values. Remarks This method is available since v7.17.000.000. GetRealPublishingDefinition(ElementId) Gets the definition of a real publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartReal GetRealPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartReal Remarks The value of the publishing entity may be obtained with the GetRealValue(ElementId) method. This method is available since v7.8. GetRealUnit(ElementId, out UnitType, out String) Gets the unit of a real parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void GetRealUnit(ElementId inElementId, out UnitType outUnitType, out string outUnitSymbol) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. UnitType outUnitType Unit type. System.String outUnitSymbol Unit symbol in English. Remarks This method is available since v7.6. GetRealValue(ElementId) Gets the value of a real parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] double GetRealValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.Double Value of the parameter in SI units. Remarks This method is available since v7.6. GetRelayedParameter(ElementId) Gets the parameter entity relayed by a relay parameter entity. Declaration [AvailableSinceVersion(7, 8, 303, 120)] ElementId GetRelayedParameter(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the relay parameter entity to analyze. Returns Type Description ElementId Parameter entity relayed by the specified relay parameter entity. Remarks This method is available since v7.8.303.120. GetRelayType(ElementId) Gets the type of relay of the parameter. Declaration [AvailableSinceVersion(7, 8, 303, 120)] ParameterRelayType GetRelayType(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description ParameterRelayType Type of relay of the parameter, or None if the element is not a relay parameter entity. Remarks This method is available since v7.8.303.120. GetSmartBooleanParameterCreation(ElementId, out SmartBoolean) Gets a smart boolean parameter creation operation. Declaration [AvailableSinceVersion(7, 17, 400, 220)] void GetSmartBooleanParameterCreation(ElementId inElementId, out SmartBoolean outSmartBoolean) Parameters Type Name Description ElementId inElementId Identifier of the smart boolean parameter creation operation to analyze. SmartBoolean outSmartBoolean Smart boolean value. Remarks This method is available since v7.17. GetSmartIntegerParameterCreation(ElementId, out SmartInteger) Gets a smart integer parameter creation operation. Declaration [AvailableSinceVersion(7, 17, 400, 220)] void GetSmartIntegerParameterCreation(ElementId inElementId, out SmartInteger outSmartInteger) Parameters Type Name Description ElementId inElementId Identifier of the smart integer parameter creation operation to analyze. SmartInteger outSmartInteger Smart integer value. Remarks This method is available since v7.17. GetSmartRealParameterCreation(ElementId, out SmartReal) Gets a smart real parameter creation operation. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void GetSmartRealParameterCreation(ElementId inElementId, out SmartReal outSmartReal) Parameters Type Name Description ElementId inElementId Identifier of the smart real parameter creation operation to analyze. SmartReal outSmartReal Smart real value. Remarks This method is available since v7.8. GetSmartTextParameterCreation(ElementId, out SmartText) Gets a smart text parameter creation operation. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void GetSmartTextParameterCreation(ElementId inElementId, out SmartText outSmartText) Parameters Type Name Description ElementId inElementId Identifier of the smart text parameter creation operation to analyze. SmartText outSmartText Smart text value. Remarks This method is available since v7.10. GetStandardParameter(DocumentId) Gets the standard parameter entity of a document. Declaration [AvailableSinceVersion(7, 7, 201, 100)] ElementId GetStandardParameter(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the standard parameter entity found. Remarks The standard parameter is an enumeration parameter, its value may be obtained and modified using the GetEnumerationValue(ElementId) and SetEnumerationValue(ElementId, Int32) methods. This method is available since v7.7.201.100. GetSystemParametersFolder(DocumentId) Gets the system parameters folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetSystemParametersFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the system parameters folder entity found. Remarks This method is available since v7.10. GetTextLocalizedValue(ElementId) Gets the localized value of a text parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetTextLocalizedValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.String Localized value of the parameter. Remarks If the text is not localized, this method returns the same value than GetTextValue(ElementId) . This method is available since v7.6. GetTextParameterizedValue(ElementId) Gets the parameterized value of a parameterized text parameter. Declaration [AvailableSinceVersion(7, 7, 201, 200)] string GetTextParameterizedValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.String Parameterized value of the parameter (ex: \"Hexagon Bolt ISO 4014 - [$Code]\"). Remarks If the text is not parameterized, this method returns null . This method is available since v7.7.201.200. GetTextPublishingDefinition(ElementId) Gets the definition of a text publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartText GetTextPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartText Remarks The value of the publishing entity may be obtained with the GetTextValue(ElementId) method. This method is available since v7.8. GetTextValue(ElementId) Gets the value of a text parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetTextValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.String Value of the parameter. Remarks If the text parameter is localized (as told by IsTextLocalized(ElementId) ), the returned value is the unlocalized value. To get the localized value of a localized text, GetTextLocalizedValue(ElementId) must be used. This method is available since v7.6. GetToleranceClass(ElementId) Gets the tolerance class of a Tolerance parameter. Declaration [AvailableSinceVersion(7, 14, 0, 0)] string GetToleranceClass(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.String Tolerance class of the parameter. Remarks This method is available since v7.14. GetToleranceDefinition(ElementId) Gets the tolerance definition of a Tolerance parameter. Declaration [AvailableSinceVersion(7, 14, 0, 0)] DocumentId GetToleranceDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description DocumentId Tolerance definition of the parameter, as a tolerance document identifier. Remarks This method is available since v7.14. GetToleranceLowerDeviation(ElementId) Gets the lower deviation value of a Tolerance parameter. Declaration [AvailableSinceVersion(7, 14, 0, 0)] Real GetToleranceLowerDeviation(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description Real Lower deviation value of the parameter. Remarks This method is available since v7.14. GetToleranceUnit(ElementId) Gets the unit of a Tolerance parameter. Declaration [AvailableSinceVersion(7, 14, 0, 0)] UnitType GetToleranceUnit(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description UnitType Unit of the parameter. Remarks This method is available since v7.14. GetToleranceUpperDeviation(ElementId) Gets the upper deviation value of a Tolerance parameter. Declaration [AvailableSinceVersion(7, 14, 0, 0)] Real GetToleranceUpperDeviation(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description Real Upper deviation value of the parameter. Remarks This method is available since v7.14. GetUserEnumerationDefinition(ElementId) Gets the user enumeration definition of a user enumeration parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] DocumentId GetUserEnumerationDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description DocumentId User enumeration definition of the parameter, as a user enumeration definition document identifier. Remarks This method is available since v7.6. GetUserEnumerationPossibleValues(ElementId) Gets the user enumeration parameter possibles values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] List<UserEnumerationProperty> GetUserEnumerationPossibleValues(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description List < UserEnumerationProperty > The possibles values. Remarks This method is available since v7.17.000.000. GetUserEnumerationPublishingDefinition(ElementId) Gets the definition of a user enumeration publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] SmartUserEnumeration GetUserEnumerationPublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartUserEnumeration Remarks The value of the publishing entity may be obtained with the GetUserEnumerationValue(ElementId) method. This method is available since v7.8. GetUserEnumerationText(ElementId) Gets the text corresponding to the value of a user enumeration parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetUserEnumerationText(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.String Text corresponding to the value of the parameter. Remarks This method is available since v7.6. GetUserEnumerationValue(ElementId) Gets the value of a user enumeration parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetUserEnumerationValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.Int32 Value of the parameter. Remarks This method is available since v7.6. GetUserEnumerationValues(DocumentId, out List<Int32>, out List<String>) Gets the possible values of a user enumeration. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void GetUserEnumerationValues(DocumentId inDocumentId, out List<int> outValues, out List<string> outTexts) Parameters Type Name Description DocumentId inDocumentId Identifier of the user enumeration definition document to analyze. List < System.Int32 > outValues Possible values. List < System.String > outTexts Texts of the possible values. Remarks This method is available since v7.6. GetUserPropertyDefinition(ElementId) Gets the user property definition of a parameter entity corresponding to a user property. Declaration [AvailableSinceVersion(7, 6, 0, 0)] DocumentId GetUserPropertyDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description DocumentId Identifier of the user propserty definition document, or Empty if the parameter does not correspond to a user property. Remarks This method is available since v7.6. HasCodePossibleValues(ElementId) Tells wether the code parameter has possible values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] bool HasCodePossibleValues(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description System.Boolean Wether the parameter has possible values. Remarks This method is available since v7.17.000.000. HasDocumentParameterPossibleValues(ElementId) Tells wether the document parameter has possible values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] bool HasDocumentParameterPossibleValues(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description System.Boolean Wether the parameter has possible values. Remarks This method must be used for Document parameter such as Material or Coating documents. This method is available since v7.17.000.000. HasRealParameterConstraints(ElementId) Determines whether the paramter has contraints. Declaration [AvailableSinceVersion(7, 17, 0, 0)] bool HasRealParameterConstraints(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description System.Boolean Whether the parameter has constraints. Remarks This method is available since v7.17.000.000. HasRealParameterPossibleValues(ElementId) Tells wether the real parameter has possible values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] bool HasRealParameterPossibleValues(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description System.Boolean Wether the parameter has possible values. Remarks This method is available since v7.17.000.000. HasUserEnumerationPossibleValues(ElementId) Tells wether the user enumeration parameter has possible values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] bool HasUserEnumerationPossibleValues(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter. Returns Type Description System.Boolean Wether the parameter has possible values. Remarks This method is available since v7.17.000.000. HasValue(ElementId) Tells whether a parameter has a value. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool HasValue(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.Boolean The parameter has a value. Remarks This method is available since v7.6. IsSmartRealParameterCreationUnitAuto(ElementId) Tells whether a smart real parameter creation operation is in unit auto mode. Declaration [AvailableSinceVersion(7, 8, 0, 0)] bool IsSmartRealParameterCreationUnitAuto(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the smart real parameter creation operation to analyze. Returns Type Description System.Boolean Whether the unit of the child parameter entity is automatically set to the unit of the smart real. Remarks This method is available since v7.8. IsTextLocalized(ElementId) Tells whether a text parameter is localized. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsTextLocalized(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.Boolean Whether the text parameter is localized. Remarks This method is available since v7.6. IsTextParameterized(ElementId) Tells whether a text parameter is parameterized. Declaration [AvailableSinceVersion(7, 7, 201, 200)] bool IsTextParameterized(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the parameter to analyze. Returns Type Description System.Boolean Whether the text parameter is parameterized. Remarks This method is available since v7.7.201.200. PublishBoolean(DocumentId, String, SmartBoolean) Creates a Boolean publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishBoolean(DocumentId inDocumentId, string inDescription, SmartBoolean inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartBoolean inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishEnumeration(DocumentId, String, SmartEnumeration) Creates an enumeration publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishEnumeration(DocumentId inDocumentId, string inDescription, SmartEnumeration inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartEnumeration inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishInteger(DocumentId, String, SmartInteger) Creates an integer publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishInteger(DocumentId inDocumentId, string inDescription, SmartInteger inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartInteger inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishReal(DocumentId, String, SmartReal) Creates a real publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishReal(DocumentId inDocumentId, string inDescription, SmartReal inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartReal inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishText(DocumentId, String, SmartText) Creates a text publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishText(DocumentId inDocumentId, string inDescription, SmartText inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartText inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. PublishUserEnumeration(DocumentId, String, SmartUserEnumeration) Creates a user enumeration publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementId PublishUserEnumeration(DocumentId inDocumentId, string inDescription, SmartUserEnumeration inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartUserEnumeration inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SearchUserPropertyParameter(DocumentId, DocumentId) Searches for a parameter entity corresponding to a user property in a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ElementId SearchUserPropertyParameter(DocumentId inDocumentId, DocumentId inUserPropertyDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. DocumentId inUserPropertyDocumentId Identifier of the user propserty definition document. Returns Type Description ElementId Identifier of the parameter entity found, or Empty if not found. Remarks This method is available since v7.6. SetBooleanPublishingDefinition(ElementId, SmartBoolean) Sets the definition of a Boolean publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetBooleanPublishingDefinition(ElementId inElementId, SmartBoolean inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartBoolean inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetBooleanValue(ElementId, Boolean) Sets the value of a Boolean parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetBooleanValue(ElementId inElementId, bool inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. System.Boolean inValue New value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetCodePossibleValues(ElementId, List<CodeProperty>) Sets the code parameter possibles values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetCodePossibleValues(ElementId inElementId, List<CodeProperty> inProperties) Parameters Type Name Description ElementId inElementId Identifier of the parameter. List < CodeProperty > inProperties The wanted possibles values. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetCodeValue(ElementId, String) Sets the value of a code parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetCodeValue(ElementId inElementId, string inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. System.String inValue New value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetColorValue(ElementId, Color) Sets the value of a Color parameter. Declaration [AvailableSinceVersion(7, 15, 400, 100)] void SetColorValue(ElementId inElementId, Color inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. Color inValue New value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.15.400.100. SetDateTimeValue(ElementId, DateTime) Sets the value of a date time parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetDateTimeValue(ElementId inElementId, DateTime inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. System.DateTime inValue New value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetDocumentParameterPossibleValues(ElementId, List<DocumentProperty>) Sets the document parameter possibles values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetDocumentParameterPossibleValues(ElementId inElementId, List<DocumentProperty> inProperties) Parameters Type Name Description ElementId inElementId Identifier of the parameter. List < DocumentProperty > inProperties The wanted possibles values. Remarks This method must be used for Document parameter such as Material or Coating documents. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetEnumerationPublishingDefinition(ElementId, SmartEnumeration) Sets the definition of an enumeration publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetEnumerationPublishingDefinition(ElementId inElementId, SmartEnumeration inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartEnumeration inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetEnumerationValue(ElementId, Int32) Sets the value of an enumeration parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetEnumerationValue(ElementId inElementId, int inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. System.Int32 inValue New value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetFamilyValue(ElementId, DocumentId) Sets the value of a family parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetFamilyValue(ElementId inElementId, DocumentId inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. DocumentId inValue New value, as a family definition document identifier. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetIntegerPublishingDefinition(ElementId, SmartInteger) Sets the definition of an integer publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetIntegerPublishingDefinition(ElementId inElementId, SmartInteger inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartInteger inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetIntegerValue(ElementId, Int32) Sets the value of an integer parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetIntegerValue(ElementId inElementId, int inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. System.Int32 inValue New value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetRealParameterConstraintsDiscretizationOrigin(ElementId, RealProperty) Sets the real parameter constraint discretization origin. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetRealParameterConstraintsDiscretizationOrigin(ElementId inElementId, RealProperty inProperty) Parameters Type Name Description ElementId inElementId Identifier of the parameter. RealProperty inProperty The new value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetRealParameterConstraintsDiscretizationStep(ElementId, RealProperty) Sets the real parameter constraint discretization step. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetRealParameterConstraintsDiscretizationStep(ElementId inElementId, RealProperty inProperty) Parameters Type Name Description ElementId inElementId Identifier of the parameter. RealProperty inProperty The new value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetRealParameterConstraintsMaximumLimit(ElementId, RealProperty) Sets the real parameter constraint maximum limit. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetRealParameterConstraintsMaximumLimit(ElementId inElementId, RealProperty inProperty) Parameters Type Name Description ElementId inElementId Identifier of the parameter. RealProperty inProperty The new value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetRealParameterConstraintsMinimumLimit(ElementId, RealProperty) Sets the real parameter constraint minimum limite. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetRealParameterConstraintsMinimumLimit(ElementId inElementId, RealProperty inProperty) Parameters Type Name Description ElementId inElementId Identifier of the parameter. RealProperty inProperty The new value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetRealParameterConstraintsMode(ElementId, RealParameterConstraintsMode) Sets the real parameter constraints mode. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetRealParameterConstraintsMode(ElementId inElementId, RealParameterConstraintsMode inConstraintsMode) Parameters Type Name Description ElementId inElementId Identifier of the parameter. RealParameterConstraintsMode inConstraintsMode Wanted constraints mode. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetRealParameterDiscretizationMode(ElementId, RealParameterDiscretizationMode) Sets the real parameter constraints discretization mode. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetRealParameterDiscretizationMode(ElementId inElementId, RealParameterDiscretizationMode inDiscretizationMode) Parameters Type Name Description ElementId inElementId Identifier of the parameter. RealParameterDiscretizationMode inDiscretizationMode Wanted discretization mode. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetRealParameterPossibleValues(ElementId, List<RealProperty>) Sets the real parameter possibles values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetRealParameterPossibleValues(ElementId inElementId, List<RealProperty> inProperties) Parameters Type Name Description ElementId inElementId Identifier of the parameter. List < RealProperty > inProperties The wanted possibles values. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetRealParameterPossibleValuesStrictMode(ElementId, Boolean) Sets the real parameter possible values strict mode. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetRealParameterPossibleValuesStrictMode(ElementId inElementId, bool isOn) Parameters Type Name Description ElementId inElementId Identifier of the parameter. System.Boolean isOn Wether the strict mode is activated. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetRealPublishingDefinition(ElementId, SmartReal) Sets the definition of a real publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetRealPublishingDefinition(ElementId inElementId, SmartReal inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartReal inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetRealUnit(ElementId, UnitType, String) Sets the unit of a real parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetRealUnit(ElementId inElementId, UnitType inUnitType, string inUnitSymbol) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. UnitType inUnitType Unit type. System.String inUnitSymbol Unit symbol in English. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetRealValue(ElementId, Double) Sets the value of a real parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetRealValue(ElementId inElementId, double inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. System.Double inValue New value in SI units. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetRelayedParameter(ElementId, ElementId) Sets the parameter entity relayed by a relay parameter entity. Declaration [AvailableSinceVersion(7, 8, 303, 120)] void SetRelayedParameter(ElementId inElementId, ElementId inRelayedId) Parameters Type Name Description ElementId inElementId Identifier of the relay parameter entity to modify. ElementId inRelayedId Identifier of the parameter entity to relay. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8.303.120. SetSmartBooleanParameterCreation(ElementId, SmartBoolean) Sets a smart boolean parameter creation operation. Declaration [AvailableSinceVersion(7, 17, 400, 220)] void SetSmartBooleanParameterCreation(ElementId inElementId, SmartBoolean inSmartBoolean) Parameters Type Name Description ElementId inElementId Identifier of the smart boolean parameter creation operation to modify. SmartBoolean inSmartBoolean Smart boolean value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17. SetSmartIntegerParameterCreation(ElementId, SmartInteger) Sets a smart integer parameter creation operation. Declaration [AvailableSinceVersion(7, 17, 400, 220)] void SetSmartIntegerParameterCreation(ElementId inElementId, SmartInteger inSmartInteger) Parameters Type Name Description ElementId inElementId Identifier of the smart integer parameter creation operation to modify. SmartInteger inSmartInteger Smart integer value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17. SetSmartRealParameterCreation(ElementId, SmartReal) Sets a smart real parameter creation operation. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetSmartRealParameterCreation(ElementId inElementId, SmartReal inSmartReal) Parameters Type Name Description ElementId inElementId Identifier of the smart real parameter creation operation to modify. SmartReal inSmartReal Smart real value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetSmartRealParameterCreationUnitAuto(ElementId, Boolean) Sets a smart real parameter creation operation unit auto mode. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetSmartRealParameterCreationUnitAuto(ElementId inElementId, bool inIsUnitAuto) Parameters Type Name Description ElementId inElementId Identifier of the smart real parameter creation operation to modify. System.Boolean inIsUnitAuto Whether the unit of the child parameter entity is automatically set to the unit of the smart real. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetSmartTextParameterCreation(ElementId, SmartText) Sets a smart text parameter creation operation. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void SetSmartTextParameterCreation(ElementId inElementId, SmartText inSmartText) Parameters Type Name Description ElementId inElementId Identifier of the smart text parameter creation operation to modify. SmartText inSmartText Smart text value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10. SetTextParameterizedValue(ElementId, String) Sets the parameterized value of a parameterized text parameter. Declaration [AvailableSinceVersion(7, 7, 201, 200)] void SetTextParameterizedValue(ElementId inElementId, string inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. System.String inValue New parameterized value (ex: \"Hexagon Bolt ISO 4014 - [$Code]\"). Remarks The text parameter is made parameterized if it was not already parameterized. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.200. SetTextPublishingDefinition(ElementId, SmartText) Sets the definition of a text publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetTextPublishingDefinition(ElementId inElementId, SmartText inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartText inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetTextValue(ElementId, String) Sets the value of a text parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetTextValue(ElementId inElementId, string inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. System.String inValue New value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetTolerance(ElementId, UnitType, Real, Real) Sets the tolerance values of a Tolerance parameter. Declaration [AvailableSinceVersion(7, 14, 0, 0)] void SetTolerance(ElementId inElementId, UnitType inUnitType, Real inUpperDeviation, Real inLowerDeviation) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. UnitType inUnitType Unit type. Real inUpperDeviation Upper value. Real inLowerDeviation Lower value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.14. SetToleranceFromDocument(ElementId, DocumentId, String) Sets the tolerance values of a Tolerance parameter from a tolerance document. Declaration [AvailableSinceVersion(7, 14, 0, 0)] void SetToleranceFromDocument(ElementId inElementId, DocumentId inToleranceDocumentId, string inClass) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. DocumentId inToleranceDocumentId Identifier of the tolerance document. System.String inClass Class tolerance. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.14. SetUserEnumerationPossibleValues(ElementId, List<UserEnumerationProperty>) Sets the user enumeration parameter possibles values. Declaration [AvailableSinceVersion(7, 17, 0, 0)] void SetUserEnumerationPossibleValues(ElementId inElementId, List<UserEnumerationProperty> inProperties) Parameters Type Name Description ElementId inElementId Identifier of the parameter. List < UserEnumerationProperty > inProperties The wanted possibles values. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.17.000.000. SetUserEnumerationPublishingDefinition(ElementId, SmartUserEnumeration) Sets the definition of a user enumeration publishing entity. Declaration [AvailableSinceVersion(7, 8, 0, 0)] void SetUserEnumerationPublishingDefinition(ElementId inElementId, SmartUserEnumeration inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartUserEnumeration inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8. SetUserEnumerationValue(ElementId, Int32) Sets the value of a user enumeration parameter. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SetUserEnumerationValue(ElementId inElementId, int inValue) Parameters Type Name Description ElementId inElementId Identifier of the parameter to modify. System.Int32 inValue New value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.6. SetUserEnumerationValues(DocumentId, List<Int32>, List<String>) Sets the possible values of a user enumeration. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void SetUserEnumerationValues(DocumentId inDocumentId, List<int> inValues, List<string> inTexts) Parameters Type Name Description DocumentId inDocumentId Identifier of the user enumeration definition document to modify. List < System.Int32 > inValues Possible values. List < System.String > inTexts Texts of the possible values. Remarks This method is available since v7.10."
  },
  "api/kernel/TopSolid.Kernel.Automating.IPdm.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IPdm.html",
    "title": "Interface IPdm | TopSolid Automation website",
    "keywords": "Interface IPdm Gives access to the PDM. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IPdm Remarks This interface is available since v7.6. Properties LibraryProjectsRootFolder Gets the library projects root folder. Declaration [AvailableSinceVersion(7, 9, 0, 0)] PdmProjectFolderId LibraryProjectsRootFolder { get; } Property Value Type Description PdmProjectFolderId Remarks This property is available since v7.9. Name Gets the name of PDM (i.e. the localized name of PDM connection). Declaration [AvailableSinceVersion(7, 17, 400, 60)] string Name { get; } Property Value Type Description System.String Remarks This property is available since v7.17 SP3. WorkingProjectsRootFolder Gets the working projects root folder. Declaration [AvailableSinceVersion(7, 9, 0, 0)] PdmProjectFolderId WorkingProjectsRootFolder { get; } Property Value Type Description PdmProjectFolderId Remarks This property is available since v7.9. Methods AddReferencedProjects(PdmObjectId, List<PdmObjectId>) Adds referenced projects to a project. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void AddReferencedProjects(PdmObjectId inProjectId, List<PdmObjectId> inReferencedProjectIds) Parameters Type Name Description PdmObjectId inProjectId Project identifier. List < PdmObjectId > inReferencedProjectIds Referenced project identifiers to add. Remarks Project is saved automatically after adding a reference. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. CheckIn(PdmObjectId, Boolean) Checks-in an object. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void CheckIn(PdmObjectId inObjectId, bool inRecurses) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier. System.Boolean inRecurses Tells if to recurse on objects contained. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. CheckInSeveral(List<PdmObjectId>, Boolean) Checks-in several objects. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void CheckInSeveral(List<PdmObjectId> inObjectIds, bool inRecurses) Parameters Type Name Description List < PdmObjectId > inObjectIds PDM object identifiers. System.Boolean inRecurses Tells if to recurse on objects contained. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. CheckOut(PdmObjectId) Checks-out an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] void CheckOut(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.100. CloseProject(PdmObjectId) Closes a project. Declaration [AvailableSinceVersion(7, 11, 0, 0)] void CloseProject(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project identifier. Remarks This method is available since v7.11. CopySeveral(List<PdmObjectId>, PdmObjectId) Copies several objects. Declaration [AvailableSinceVersion(7, 7, 201, 140)] List<PdmObjectId> CopySeveral(List<PdmObjectId> inObjectIds, PdmObjectId inOwnerId) Parameters Type Name Description System.Collections.Generic.List < PdmObjectId > inObjectIds Identifiers of objects to copy. PdmObjectId inOwnerId Identifier of project or folder owner where to copy objects. Returns Type Description System.Collections.Generic.List < PdmObjectId > New PDM object identifiers. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.7.201.140. CopySeveral2(List<PdmObjectId>, PdmObjectId, Boolean) Copies several objects. Declaration [AvailableSinceVersion(7, 15, 400, 240)] List<PdmObjectId> CopySeveral2(List<PdmObjectId> inObjectIds, PdmObjectId inOwnerId, bool inKeepPartNumber) Parameters Type Name Description System.Collections.Generic.List < PdmObjectId > inObjectIds Identifiers of objects to copy. PdmObjectId inOwnerId Identifier of project or folder owner where to copy objects. System.Boolean inKeepPartNumber Whether keeps the same part number Returns Type Description System.Collections.Generic.List < PdmObjectId > New PDM object identifiers. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.7.201.140. CreateDocument(PdmObjectId, String, Boolean) Creates a TopSolid document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmObjectId CreateDocument(PdmObjectId inOwnerId, string inExtension, bool inUseDefaultTemplate) Parameters Type Name Description PdmObjectId inOwnerId Identifier of owner. System.String inExtension File extension of the document to create, starting with the '.' character. System.Boolean inUseDefaultTemplate Tells whether to use the default template if present. Returns Type Description PdmObjectId PDM object identifier of the created document. Remarks To obtain the extension corresponding to a TopSolid document, one must create such a document in TopSolid, select it in the projet tree and use the \"Document Type...\" command in the contextual \"Tools\" menu (TopSolid must be started with the \"-a\" command line option as this command is only available in the advanced mode). This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. CreateDocumentWithTemplate(PdmObjectId, PdmObjectId) Creates a TopSolid document with a template. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmObjectId CreateDocumentWithTemplate(PdmObjectId inOwnerId, PdmObjectId inTemplateObjectId) Parameters Type Name Description PdmObjectId inOwnerId Identifier of owner. PdmObjectId inTemplateObjectId Identifier of the template. Returns Type Description PdmObjectId Identifier of the created document. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. CreateFolder(PdmObjectId, String) Creates a folder. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmObjectId CreateFolder(PdmObjectId inObjectId, string inFolderName) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier of a project or a folder where the new folder is to be created. System.String inFolderName Name of the new folder. Returns Type Description PdmObjectId Identifier of the created folder. Remarks If creation fails, the returned identifier is empty. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. CreateLifeCycleSubState(PdmLifeCycleMainState, String) Creates new life cycle sub state. Declaration [AvailableSinceVersion(7, 14, 248, 0)] void CreateLifeCycleSubState(PdmLifeCycleMainState inLifeCycleMainState, string inLifeCycleSubStateName) Parameters Type Name Description PdmLifeCycleMainState inLifeCycleMainState Associated life cycle main state. System.String inLifeCycleSubStateName Life cycle sub state name. CreateProject(String, Boolean) Creates a project. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmObjectId CreateProject(string inProjectName, bool inIsLibrary) Parameters Type Name Description System.String inProjectName Project name. System.Boolean inIsLibrary Whether it is a library to create or a working project. Returns Type Description PdmObjectId PDM object identifier of the created project. Remarks If creation fails, the returned PDM object identifier is empty. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. CreateProjectFolder(PdmProjectFolderId, String) Creates a project folder. Declaration [AvailableSinceVersion(7, 9, 0, 0)] PdmProjectFolderId CreateProjectFolder(PdmProjectFolderId inProjectFolderId, string inFolderName) Parameters Type Name Description PdmProjectFolderId inProjectFolderId Identifier of the project folder where the new project folder is to be created. System.String inFolderName Name of the new project folder. Returns Type Description PdmProjectFolderId Identifier of the created project folder. Remarks If creation fails, the returned identifier is empty. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.9. CreateProjectWithTemplate(String, PdmObjectId) Creates a project with a template. Declaration [AvailableSinceVersion(7, 7, 0, 0)] PdmObjectId CreateProjectWithTemplate(string inProjectName, PdmObjectId inTemplateObjectId) Parameters Type Name Description System.String inProjectName Project name. PdmObjectId inTemplateObjectId PDM object identifier of the template. Returns Type Description PdmObjectId PDM object identifier of the created project. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.7. DeleteProjectFolder(PdmProjectFolderId) Deletes an empty project folder. Declaration [AvailableSinceVersion(7, 9, 0, 0)] void DeleteProjectFolder(PdmProjectFolderId inProjectFolderId) Parameters Type Name Description PdmProjectFolderId inProjectFolderId Identifier of the project folder to delete. Remarks If the specified project folder was not empty, an exception is thrown. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.9. DeleteSeveral(List<PdmObjectId>) Deletes several objects. Declaration [AvailableSinceVersion(7, 7, 201, 140)] void DeleteSeveral(List<PdmObjectId> inObjectIds) Parameters Type Name Description System.Collections.Generic.List < PdmObjectId > inObjectIds Identifiers of objects to delete. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.7.201.140. EnsureIsDirty(PdmObjectId) Ensures that an object is dirty to allow further modifications. Declaration [AvailableSinceVersion(7, 9, 300, 80)] void EnsureIsDirty(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.9.300.80. Exists(PdmObjectId) Tells whether a PDM object still exists. Declaration [AvailableSinceVersion(7, 6, 301, 120)] bool Exists(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Identifier of the PDM object to analyze. Returns Type Description System.Boolean The PDM object still exists. Remarks This method is available since v7.6.301.120. ExportDictionaries(List<PdmObjectId>, CultureInfo[], String[]) Exports dictionaries (.TopDic file). Declaration [AvailableSinceVersion(7, 15, 300, 0)] void ExportDictionaries(List<PdmObjectId> inProjects, CultureInfo[] inCultures, string[] inFileFullNames) Parameters Type Name Description List < PdmObjectId > inProjects Identifiers of projects to export. System.Globalization.CultureInfo [] inCultures Cultures to export. System.String [] inFileFullNames Dictionnaries files full names. Remarks This method is available since v7.15.300.000. ExportExecutablePackage(List<PdmObjectId>, Boolean, Boolean, Boolean, String) Exports an executable package. Declaration [AvailableSinceVersion(7, 8, 303, 200)] void ExportExecutablePackage(List<PdmObjectId> inObjectIds, bool inExportsForDelivery, bool inExportsIncrementalPackage, bool inAllowsMeasurement, string inFileFullPath) Parameters Type Name Description List < PdmObjectId > inObjectIds PDM object identifiers. System.Boolean inExportsForDelivery Whether exports for delivery. System.Boolean inExportsIncrementalPackage Whether exports an incremental package. System.Boolean inAllowsMeasurement Whether allows measurement. System.String inFileFullPath Full path of the exported package, with \".exe\" extension. Remarks This method produces Windows 32-bit executable that allows viewing the specified objects without installing TopSolid'Viewer. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.200. ExportMinorRevisionFile(PdmMinorRevisionId, String) Exports a non TopSolid document minor revision to a file without conversion. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void ExportMinorRevisionFile(PdmMinorRevisionId inMinorRevisionId, string inFullName) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of document minor revision to export. System.String inFullName Full name of the file to create. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.7. ExportPackage(List<PdmObjectId>, Boolean, Boolean, String) Exports a package. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void ExportPackage(List<PdmObjectId> inObjectIds, bool inExportsForDelivery, bool inExportsIncrementalPackage, string inFileFullPath) Parameters Type Name Description List < PdmObjectId > inObjectIds PDM object identifiers. System.Boolean inExportsForDelivery Whether exports for delivery. System.Boolean inExportsIncrementalPackage Whether exports an incremental package. System.String inFileFullPath Full path of the exported package, with \".TopPkg\" extension. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. ExportToBabylon(PdmObjectId, String, String) Export a document to a Babylon file. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void ExportToBabylon(PdmObjectId inDocumentId, string inFolderPath, string inFileName) Parameters Type Name Description PdmObjectId inDocumentId Document identifier. System.String inFolderPath Path of export folder. System.String inFileName File name. Remarks This method is available since v7.10. ExportViewerPackage(List<PdmObjectId>, Boolean, Boolean, Boolean, String) Exports a viewer package. Declaration [AvailableSinceVersion(7, 8, 303, 200)] void ExportViewerPackage(List<PdmObjectId> inObjectIds, bool inExportsForDelivery, bool inExportsIncrementalPackage, bool inAllowsMeasurement, string inFileFullPath) Parameters Type Name Description List < PdmObjectId > inObjectIds PDM object identifiers. System.Boolean inExportsForDelivery Whether exports for delivery. System.Boolean inExportsIncrementalPackage Whether exports an incremental package. System.Boolean inAllowsMeasurement Whether allows measurement. System.String inFileFullPath Full path of the exported package, with \".TopPkgViw\" extension. Remarks The package produced by this method may be imported in TopSolid'Viewer. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.200. GetAuthor(PdmObjectId) Gets the author of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] string GetAuthor(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Returns Type Description System.String Object author. Remarks This method is available since v7.8.303.100. GetComment(PdmObjectId) Gets the comment of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] string GetComment(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Returns Type Description System.String Object comment. Remarks This method is available since v7.8.303.100. GetComplementaryPartNumber(PdmObjectId) Gets the complementary part number of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] string GetComplementaryPartNumber(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Returns Type Description System.String Object complementary part number. Remarks This method is available since v7.8.303.100. GetConstituents(PdmObjectId, out List<PdmObjectId>, out List<PdmObjectId>) Gets the constituents of an object. Declaration [AvailableSinceVersion(7, 6, 301, 120)] void GetConstituents(PdmObjectId inObjectId, out List<PdmObjectId> outFolderIds, out List<PdmObjectId> outDocumentObjectIds) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier of a project, a folder or a document. List < PdmObjectId > outFolderIds List of folders identifiers. List < PdmObjectId > outDocumentObjectIds List of documents identifiers. Remarks This method is available since v7.6.301.120. GetCurrentProject() Gets the current projects. Declaration [AvailableSinceVersion(7, 14, 300, 140)] PdmObjectId GetCurrentProject() Returns Type Description PdmObjectId Current project PDM object identifier. Remarks If there is no current project, the returned PDM object identifier is empty. This method is available since v7.14. GetDescription(PdmObjectId) Gets the description of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] string GetDescription(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Returns Type Description System.String Object description. Remarks This method is available since v7.8.303.100. GetFinalMinorRevision(PdmObjectId) Gets the last minor revision contained in the last major revision contained in a PDM object. Declaration [AvailableSinceVersion(7, 9, 0, 0)] PdmMinorRevisionId GetFinalMinorRevision(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Identifier of the PDM object. Returns Type Description PdmMinorRevisionId Identifier of the last minor revision of the last major revision. Remarks This method is available since v7.9. GetLastMajorRevision(PdmObjectId) Gets the last major revision contained in a PDM object. Declaration [AvailableSinceVersion(7, 7, 0, 0)] PdmMajorRevisionId GetLastMajorRevision(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Identifier of the PDM object. Returns Type Description PdmMajorRevisionId Identifier of the contained last major revision. Remarks This method is available since v7.7. GetLastMinorRevision(PdmMajorRevisionId) Gets the last minor revision contained in a major revision. Declaration [AvailableSinceVersion(7, 7, 0, 0)] PdmMinorRevisionId GetLastMinorRevision(PdmMajorRevisionId inMajorRevisionId) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Identifier of the major revision. Returns Type Description PdmMinorRevisionId Identifier of the contained last minor revision. Remarks This method is available since v7.7. GetLatestRevision(PdmObjectId) Gets latest revision of specified object and of its children. Declaration [AvailableSinceVersion(7, 7, 201, 180)] void GetLatestRevision(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Identifier of object to update. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.7.201.180. GetLifeCycleMainState(PdmObjectId) Gets the life cycle main state of an object. Declaration [AvailableSinceVersion(7, 9, 302, 160)] PdmLifeCycleMainState GetLifeCycleMainState(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Identifier of object to get life cycle main state. Returns Type Description PdmLifeCycleMainState Life cycle of the document. Remarks This method is available since v7.9.302.160. GetLifeCycleSubStates(PdmLifeCycleMainState, out SCG.List<PdmObjectId>, out SCG.List<String>) Gets sub states of specified main state. Declaration [AvailableSinceVersion(7, 14, 248, 0)] void GetLifeCycleSubStates(PdmLifeCycleMainState inLifeCycleMainState, out SCG.List<PdmObjectId> outLifeCycleSubStateIds, out SCG.List<string> outLifeCycleSubStateNames) Parameters Type Name Description PdmLifeCycleMainState inLifeCycleMainState Life cycle main state. SCG.List < PdmObjectId > outLifeCycleSubStateIds Life cycle sub state object identifiers. SCG.List < System.String > outLifeCycleSubStateNames Life cycle sub state names. GetMajorRevision(PdmMinorRevisionId) Gets the major revision containing a specified minor revision. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmMajorRevisionId GetMajorRevision(PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of the minor revision. Returns Type Description PdmMajorRevisionId Identifier of the containing major revision. Remarks This method is available since v7.6. GetMajorRevisionLifeCycleMainState(PdmMajorRevisionId) Gets the life cycle main state of a major revision. Declaration [AvailableSinceVersion(7, 10, 0, 0)] PdmLifeCycleMainState GetMajorRevisionLifeCycleMainState(PdmMajorRevisionId inMajorRevisionId) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Identifier of major revision to get life cycle main state. Returns Type Description PdmLifeCycleMainState Life cycle of the document. Remarks This method is available since v7.10. GetMajorRevisionLifeCycleSubState(PdmMajorRevisionId) Gets the life cycle sub state of a major revision. Declaration [AvailableSinceVersion(7, 14, 248, 0)] PdmObjectId GetMajorRevisionLifeCycleSubState(PdmMajorRevisionId inMajorRevisionId) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Identifier of major revision to get life cycle sub state. Returns Type Description PdmObjectId GetMajorRevisions(PdmObjectId) Gets the major revisions contained in a PDM object. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<PdmMajorRevisionId> GetMajorRevisions(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Identifier of the PDM object. Returns Type Description List < PdmMajorRevisionId > Identifiers of the contained major revisions. Remarks This method is available since v7.6. GetMajorRevisionText(PdmMajorRevisionId) Gets the text of a major revision. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetMajorRevisionText(PdmMajorRevisionId inMajorRevisionId) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Identifier of the major revision. Returns Type Description System.String Text of the major revision. Remarks This method is available since v7.6. GetManufacturer(PdmObjectId) Gets the manufacturer of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] string GetManufacturer(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Returns Type Description System.String Object manufacturer. Remarks This method is available since v7.8.303.100. GetManufacturerPartNumber(PdmObjectId) Gets the manufacturer part number of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] string GetManufacturerPartNumber(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Returns Type Description System.String Object manufacturer part number. Remarks This method is available since v7.8.303.100. GetMinorRevisionFileSize(PdmMinorRevisionId) Gets the size of the file of a minor revision. Declaration [AvailableSinceVersion(7, 7, 0, 0)] long GetMinorRevisionFileSize(PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of the minor revision. Returns Type Description System.Int64 Size (in bytes) of the file of the minor revision. Remarks This method is available since v7.7. GetMinorRevisionFileVersion(PdmMinorRevisionId) Gets the version of the application used to save the file of a minor revision. Declaration [AvailableSinceVersion(7, 9, 0, 0)] int GetMinorRevisionFileVersion(PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of the minor revision. Returns Type Description System.Int32 Application version used to save the file of the minor revision. Remarks The value returned is defined by: Major * 100000000 + Minor * 1000000 + Build * 1000 + Revision . For example, v7.5.200.100 is returned as: 705200100 . This method returns 0 if the version of the application is not known. This method is available since v7.9. GetMinorRevisionPreviewBitmap(PdmMinorRevisionId) Gets the preview bitmap of a minor revision. Declaration [AvailableSinceVersion(7, 8, 302, 80)] Bitmap GetMinorRevisionPreviewBitmap(PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of the minor revision. Returns Type Description Bitmap Preview bitmap of the minor revision, or null if none. Remarks This method is available since v7.8.302.80. GetMinorRevisions(PdmMajorRevisionId) Gets the minor revisions contained in a major revision. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<PdmMinorRevisionId> GetMinorRevisions(PdmMajorRevisionId inMajorRevisionId) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Identifier of the major revision. Returns Type Description List < PdmMinorRevisionId > Identifiers of the contained minor revisions. Remarks This method is available since v7.6. GetMinorRevisionText(PdmMinorRevisionId) Gets the text of a minor revision. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetMinorRevisionText(PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of the minor revision. Returns Type Description System.String Text of the minor revision. Remarks This method is available since v7.6. GetName(PdmObjectId) Gets the name of an object. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetName(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Returns Type Description System.String Object name. Remarks This method is available since v7.6. GetObjectsFromRecycleBin(PdmObjectId) Gets the objects from the recycle bin. Declaration [AvailableSinceVersion(7, 15, 400, 220)] List<PdmObjectId> GetObjectsFromRecycleBin(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project PDM object identifier. Returns Type Description List < PdmObjectId > The objects from the recycle bin. Remarks This method is available since v7.15.400.220. GetOpenProjects(Boolean, Boolean) Gets all opened projects. Declaration [AvailableSinceVersion(7, 13, 0, 0)] List<PdmObjectId> GetOpenProjects(bool inGetsWorkingProjects, bool inGetsLibraryProjects) Parameters Type Name Description System.Boolean inGetsWorkingProjects Gets working projects. System.Boolean inGetsLibraryProjects Gets library projects. Returns Type Description List < PdmObjectId > List of projects PDM object identifiers. Remarks This method is available since v7.13. GetOwner(PdmObjectId) Gets the owner of an object. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmObjectId GetOwner(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier. Returns Type Description PdmObjectId PDM object identifier of the owner, or empty if none. Remarks If there is no owner, the returned PDM object identifier is empty. This method is available since v7.6. GetPartNumber(PdmObjectId) Gets the part number of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] string GetPartNumber(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Returns Type Description System.String Object part number. Remarks This method is available since v7.8.303.100. GetPdmObject(PdmMajorRevisionId) Gets the PDM object containing a specified major revision. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmObjectId GetPdmObject(PdmMajorRevisionId inMajorRevisionId) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Identifier of the major revision. Returns Type Description PdmObjectId Identifier of the containing PDM object. Remarks This method is available since v7.6. GetProject(PdmObjectId) Gets the project of an object. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmObjectId GetProject(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Returns Type Description PdmObjectId PDM object identifier of the project containing the specified object. Remarks This method is available since v7.6. GetProjectFolderConstituents(PdmProjectFolderId, out List<PdmProjectFolderId>, out List<PdmObjectId>) Gets the constituents of a project folder. Declaration [AvailableSinceVersion(7, 9, 0, 0)] void GetProjectFolderConstituents(PdmProjectFolderId inProjectFolderdId, out List<PdmProjectFolderId> outFolderIds, out List<PdmObjectId> outProjectIds) Parameters Type Name Description PdmProjectFolderId inProjectFolderdId Project folder identifier. List < PdmProjectFolderId > outFolderIds List of folders identifiers. List < PdmObjectId > outProjectIds List of documents identifiers. Remarks This method is available since v7.9. GetProjectFolderName(PdmProjectFolderId) Gets the name of a project folder. Declaration [AvailableSinceVersion(7, 9, 0, 0)] string GetProjectFolderName(PdmProjectFolderId inProjectFolderId) Parameters Type Name Description PdmProjectFolderId inProjectFolderId Project folder identifier. Returns Type Description System.String Project folder name. Remarks This method is available since v7.9. GetProjectFolderOwner(PdmProjectFolderId) Gets the project folder containing a specified project folder. Declaration [AvailableSinceVersion(7, 9, 0, 0)] PdmProjectFolderId GetProjectFolderOwner(PdmProjectFolderId inProjectFolderId) Parameters Type Name Description PdmProjectFolderId inProjectFolderId Project folder identifier. Returns Type Description PdmProjectFolderId Identifier of the project folder containing the specified project folder, or empty if none. Remarks If there is no owner, i.e. the specified project folder was a root, the returned identifier is empty. This method is available since v7.9. GetProjectMainDocument(PdmObjectId) Gets the main document of a specified project. Declaration [AvailableSinceVersion(7, 11, 0, 0)] PdmObjectId GetProjectMainDocument(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project object identifier. Returns Type Description PdmObjectId Identifier of the main document of the project or Empty if not defined. Remarks This method is available since v7.11. GetProjectOwner(PdmObjectId) Gets the project folder containing a specified project. Declaration [AvailableSinceVersion(7, 9, 0, 0)] PdmProjectFolderId GetProjectOwner(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project object identifier. Returns Type Description PdmProjectFolderId Identifier of the project folder containing a specified project. Remarks This method is available since v7.9. GetProjects(Boolean, Boolean) Gets all the projects. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<PdmObjectId> GetProjects(bool inGetsWorkingProjects, bool inGetsLibraryProjects) Parameters Type Name Description System.Boolean inGetsWorkingProjects Gets working projects. System.Boolean inGetsLibraryProjects Gets library projects. Returns Type Description List < PdmObjectId > List of projects PDM object identifiers. Remarks This method is available since v7.6. GetProjectTemplates(PdmObjectId, out PdmObjectId, out PdmObjectId) Gets the \"Templates\" and \"Templates/Defaults\" folders of a project. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void GetProjectTemplates(PdmObjectId inProjectId, out PdmObjectId outTemplatesFolderId, out PdmObjectId outDefaultsFolderId) Parameters Type Name Description PdmObjectId inProjectId PDM object identifier of the project. PdmObjectId outTemplatesFolderId PDM object identifier of the templates folder. PdmObjectId outDefaultsFolderId PDM object identifier of the defaults folder. Remarks This method is available since v7.6. GetRealUserProperty(PdmObjectId, PdmObjectId) Gets the value of a specified real user property of an object. Declaration [AvailableSinceVersion(7, 9, 300, 40)] Real? GetRealUserProperty(PdmObjectId inObjectId, PdmObjectId inPropertyObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. PdmObjectId inPropertyObjectId Object identifier of property definition document. Returns Type Description System.Nullable < Real > Property value, or null if none. Remarks If the object to analyze does not have a property corresponding to the specified type (i.e. corresponding to the specified property definition document), this method returns null without throwing any exception. This method is available since v7.9.300.040. GetReferencedProjects(PdmObjectId) Gets the referenced projects of a project. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<PdmObjectId> GetReferencedProjects(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project identifier. Returns Type Description List < PdmObjectId > Referenced projects identifiers. Remarks This method is available since v7.6. GetRevisionTexts(PdmObjectId, out String, out String) Gets the major and minor revision texts of an object. Declaration [AvailableSinceVersion(7, 9, 300, 80)] void GetRevisionTexts(PdmObjectId inObjectId, out string outMajorText, out string outMinorText) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String outMajorText Major revision text. System.String outMinorText Minor revision text. Remarks This method is available since v7.9.300.80. GetSelectedPdmObjectIds() Gets selected PDM objects ids of the current project. Declaration [AvailableSinceVersion(7, 14, 300, 140)] SCG.List<PdmObjectId> GetSelectedPdmObjectIds() Returns Type Description SCG.List < PdmObjectId > PDM object identifiers of selected objects of the PDM tree view. Remarks This method is available since v7.14.300.140. GetState(PdmObjectId) Gets the state of an object. Declaration [AvailableSinceVersion(7, 6, 301, 120)] PdmObjectState GetState(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Returns Type Description PdmObjectState Object state. Remarks This method is available since v7.6.301.120. GetTemplates(out PdmObjectId, out PdmObjectId, out PdmObjectId, out PdmObjectId) Gets all the templates. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void GetTemplates(out PdmObjectId outUserDocumentTemplatesProjectId, out PdmObjectId outCompanyDocumentTemplatesProjectId, out PdmObjectId outUserProjectTemplatesProjectId, out PdmObjectId outCompanyProjectTemplatesProjectId) Parameters Type Name Description PdmObjectId outUserDocumentTemplatesProjectId PDM object identifier of user document templates project. PdmObjectId outCompanyDocumentTemplatesProjectId PDM object identifier of company document templates project. PdmObjectId outUserProjectTemplatesProjectId PDM object identifier of user project templates project. PdmObjectId outCompanyProjectTemplatesProjectId PDM object identifier of company project templates project. Remarks This method is available since v7.6. GetTextUserProperty(PdmObjectId, PdmObjectId) Gets the value of a specified text user property of an object. Declaration [AvailableSinceVersion(7, 9, 300, 40)] string GetTextUserProperty(PdmObjectId inObjectId, PdmObjectId inPropertyObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. PdmObjectId inPropertyObjectId Object identifier of property definition document. Returns Type Description System.String Property value, or null if none. Remarks If the object to analyze does not have a property corresponding to the specified type (i.e. corresponding to the specified property definition document), this method returns null without throwing any exception. This method is available since v7.9.300.040. GetType(PdmObjectId, out String) Gets the type of an object. Declaration [AvailableSinceVersion(7, 6, 301, 120)] PdmObjectType GetType(PdmObjectId inObjectId, out string outExtension) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String outExtension Document file extension, or null if not a document. Returns Type Description PdmObjectType Object type. Remarks This method is available since v7.6.301.120. HasConstituents(PdmObjectId) Tells whether an object has constituents. Declaration [AvailableSinceVersion(7, 9, 0, 0)] bool HasConstituents(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier of a project, a folder or a document. Returns Type Description System.Boolean The object has constituents, i.e. GetConstituents(PdmObjectId, out List<PdmObjectId>, out List<PdmObjectId>) would not return only empty lists. Remarks This method is available since v7.9. HasProjectFolderConstituents(PdmProjectFolderId) Tells whether a project folder has constituents. Declaration [AvailableSinceVersion(7, 9, 0, 0)] bool HasProjectFolderConstituents(PdmProjectFolderId inProjectFolderdId) Parameters Type Name Description PdmProjectFolderId inProjectFolderdId Project folder identifier. Returns Type Description System.Boolean The project folder has constituents, i.e. GetProjectFolderConstituents(PdmProjectFolderId, out List<PdmProjectFolderId>, out List<PdmObjectId>) would not return only empty lists. Remarks This method is available since v7.9. ImportDictionnaries(List<PdmObjectId>, String[], SCG.Dictionary<String, String>) Imports dictionnaries documents from specified files if they correspond to specified project identifiers. Declaration [AvailableSinceVersion(7, 15, 300, 0)] void ImportDictionnaries(List<PdmObjectId> inProjects, string[] inFileFullNames, SCG.Dictionary<string, string> ioErrorMessages) Parameters Type Name Description List < PdmObjectId > inProjects Identifiers of projects. System.String [] inFileFullNames Dictionnaries files full names. SCG.Dictionary < System.String , System.String > ioErrorMessages Error messages. Remarks This method is available since v7.15.300.000. ImportFile(String, PdmObjectId, String) Imports a file without conversion. Declaration [AvailableSinceVersion(7, 7, 0, 0)] PdmObjectId ImportFile(string inFullName, PdmObjectId inOwnerId, string inDocumentName) Parameters Type Name Description System.String inFullName Full name of the file to import. PdmObjectId inOwnerId PDM object identifier of project or folder owner where imported file is to be stored. System.String inDocumentName Name of the new document. Returns Type Description PdmObjectId Identifier of the created document. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.7. ImportPackageAsDistinctCopy(String, Boolean, Boolean) Imports a package as disctinct copy. Declaration [AvailableSinceVersion(7, 8, 303, 200)] List<PdmObjectId> ImportPackageAsDistinctCopy(string inFileFullPath, bool inResetsCreationProperties, bool inAllowsPartNumbering) Parameters Type Name Description System.String inFileFullPath Full path of the package file, with \".TopPkg\" extension. System.Boolean inResetsCreationProperties Whether to reset creation properties (author, creation date, major/minor revision text). System.Boolean inAllowsPartNumbering Whether to allow automatic part numbering. Returns Type Description List < PdmObjectId > List of imported projects PDM object identifiers. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.200. ImportPackageAsReplication(String) Imports a package with replication. Declaration [AvailableSinceVersion(7, 8, 303, 200)] List<PdmObjectId> ImportPackageAsReplication(string inFileFullPath) Parameters Type Name Description System.String inFileFullPath Full path of the package file, with \".TopPkg\" extension. Returns Type Description List < PdmObjectId > List of imported projects PDM object identifiers. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.200. IncludePackageAsDistinctCopy(String, Boolean, Boolean, PdmObjectId) Imports a package as disctinct copy into an existing project. Declaration [AvailableSinceVersion(7, 8, 303, 200)] void IncludePackageAsDistinctCopy(string inFileFullPath, bool inResetsCreationProperties, bool inAllowsPartNumbering, PdmObjectId inOwnerId) Parameters Type Name Description System.String inFileFullPath Full path of the package file, with \".TopPkg\" extension. System.Boolean inResetsCreationProperties Whether to reset creation properties (author, creation date, major/minor revision text). System.Boolean inAllowsPartNumbering Whether to allow automatic part numbering. PdmObjectId inOwnerId PDM object identifier of project or folder owner where imported documents are to be stored. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.200. IsDirty(PdmObjectId) Tells whether an object is dirty. Declaration [AvailableSinceVersion(7, 9, 300, 80)] bool IsDirty(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier. Returns Type Description System.Boolean The object is dirty. Remarks An object is said dirty when it has been modified since it was last saved. This method is available since v7.9.300.80. IsExternal(PdmObjectId) Tells whether an object is external (i.e. item is a non TopSolid V7 document: .docx, .xlsx, .pdf, .png etc...). Declaration [AvailableSinceVersion(7, 16, 324, 0)] bool IsExternal(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier. Returns Type Description System.Boolean The object is external. IsLibraryProject(PdmObjectId) Tells if a project is a library. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsLibraryProject(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project PDM object identifier. Returns Type Description System.Boolean The project is a library. Remarks This method is available since v7.6. MoveProject(PdmObjectId, PdmProjectFolderId) Moves a project into a specified project folder. Declaration [AvailableSinceVersion(7, 9, 0, 0)] void MoveProject(PdmObjectId inProjectId, PdmProjectFolderId inDestinationFolderId) Parameters Type Name Description PdmObjectId inProjectId Project object identifier. PdmProjectFolderId inDestinationFolderId Identifier of the destination project folder. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.9. MoveProjectFolder(PdmProjectFolderId, PdmProjectFolderId) Moves a project folder into a specified project folder. Declaration [AvailableSinceVersion(7, 9, 0, 0)] void MoveProjectFolder(PdmProjectFolderId inProjectFolderId, PdmProjectFolderId inDestinationFolderId) Parameters Type Name Description PdmProjectFolderId inProjectFolderId Project folder identifier. PdmProjectFolderId inDestinationFolderId Identifier of the destination project folder. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.9. MoveSeveral(List<PdmObjectId>, PdmObjectId) Moves several objects. Declaration [AvailableSinceVersion(7, 8, 303, 140)] void MoveSeveral(List<PdmObjectId> inObjectIds, PdmObjectId inOwnerId) Parameters Type Name Description System.Collections.Generic.List < PdmObjectId > inObjectIds Identifiers of objects to move. PdmObjectId inOwnerId Identifier of project or folder owner where to move objects. Remarks The objects to move must belong to the same project. The objects must stay in the same project, therefore when specifying a project owner it must be that project, and when specifying a folder owner it must belong to that project. This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.140. NeedsGettingLatestRevision(PdmObjectId) Tells whether specified object or its children need getting latest revision. Declaration [AvailableSinceVersion(7, 7, 201, 180)] bool NeedsGettingLatestRevision(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Identifier of object to analyze. Returns Type Description System.Boolean Specified object or its children need getting latest revision. Remarks This method is available since v7.7.201.180. NeedsUpdating(PdmObjectId) Tells whether specified object needs updating. Declaration [AvailableSinceVersion(7, 10, 0, 0)] bool NeedsUpdating(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Identifier of document to analyze. Returns Type Description System.Boolean Specified object needs updating. Remarks This method is available since v7.10. OpenMinorRevision(PdmMinorRevisionId, Boolean) Opens a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void OpenMinorRevision(PdmMinorRevisionId inMinorRevisionId, bool inReadOnly) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of document minor revision. System.Boolean inReadOnly Open in read-only mode. Remarks This method is available since v7.10. OpenMinorRevisionInAnalysisMode(PdmMinorRevisionId) Opens a document in analysis mode. Declaration [AvailableSinceVersion(7, 14, 300, 280)] void OpenMinorRevisionInAnalysisMode(PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of document minor revision. Remarks This method is available since v7.14.300.200. OpenProject(PdmObjectId) Opens a project. Declaration [AvailableSinceVersion(7, 9, 300, 100)] void OpenProject(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project identifier. Remarks This method is available since v7.9.300.100. PurgeSeveral(List<PdmObjectId>) Purges several deleted objects. Declaration [AvailableSinceVersion(7, 7, 201, 140)] void PurgeSeveral(List<PdmObjectId> inObjectIds) Parameters Type Name Description System.Collections.Generic.List < PdmObjectId > inObjectIds Identifiers of objects to purge. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.7.201.140. ReimportFile(String, PdmObjectId) Reimports a file without conversion. Declaration [AvailableSinceVersion(7, 7, 0, 0)] PdmMinorRevisionId ReimportFile(string inFullName, PdmObjectId inDocumentId) Parameters Type Name Description System.String inFullName Full name of the file to import. PdmObjectId inDocumentId PDM object identifier of the document containing previous revisions of the file. Returns Type Description PdmMinorRevisionId Identifier of the created new revision. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.7. Restore(PdmObjectId) Restores a deleted object. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void Restore(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.10. RestoreLastSave(PdmObjectId) Cancels the modification of an object. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void RestoreLastSave(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. RestoreMinorRevision(PdmMinorRevisionId) Restores a minor revision as the last minor revision. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void RestoreMinorRevision(PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Minor revision identifier. Remarks This method is available since v7.10. Save(PdmObjectId, Boolean) Saves an object. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void Save(PdmObjectId inObjectId, bool inRecurses) Parameters Type Name Description PdmObjectId inObjectId PDM object identifier. System.Boolean inRecurses Tells if to recurse on objects contained. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. SaveAll() Save all documents. Declaration [AvailableSinceVersion(7, 16, 100, 0)] void SaveAll() SaveSeveral(List<PdmObjectId>, Boolean) Saves several objects. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void SaveSeveral(List<PdmObjectId> inObjectIds, bool inRecurses) Parameters Type Name Description List < PdmObjectId > inObjectIds PDM object identifiers. System.Boolean inRecurses Tells if to recurse on objects contained. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. SearchDocumentByName(PdmObjectId, String) Searches for a document by its name. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<PdmObjectId> SearchDocumentByName(PdmObjectId inProjectId, string inDocumentName) Parameters Type Name Description PdmObjectId inProjectId Project PDM object identifier, or empty for searching in all projects. System.String inDocumentName Document name. Returns Type Description List < PdmObjectId > PDM object identifiers of documents corresponding to the searched name. Remarks This method is available since v7.6. SearchDocumentByNameWithWildcards(PdmObjectId, String) Searches for a document by its name using wildcards. Declaration [AvailableSinceVersion(7, 10, 0, 0)] List<PdmObjectId> SearchDocumentByNameWithWildcards(PdmObjectId inProjectId, string inDocumentName) Parameters Type Name Description PdmObjectId inProjectId Project PDM object identifier, or empty for searching in all projects. System.String inDocumentName Document name, with SQL wildcards (like \"%\" being a substitute for zero or more characters). Returns Type Description List < PdmObjectId > PDM object identifiers of documents corresponding to the searched name. Remarks This method is available since v7.10. SearchDocumentByPartNumber(PdmObjectId, String) Searches for a document by its part number. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<PdmObjectId> SearchDocumentByPartNumber(PdmObjectId inProjectId, string inPartNumber) Parameters Type Name Description PdmObjectId inProjectId Project PDM object identifier, or empty for searching in all projects. System.String inPartNumber Part number. Returns Type Description List < PdmObjectId > PDM object identifiers of documents corresponding to the searched part number. Remarks This method is available since v7.7. SearchDocumentByPartNumberWithWildcards(PdmObjectId, String) Searches for a document by its part number using wildcards. Declaration [AvailableSinceVersion(7, 10, 0, 0)] List<PdmObjectId> SearchDocumentByPartNumberWithWildcards(PdmObjectId inProjectId, string inPartNumber) Parameters Type Name Description PdmObjectId inProjectId Project PDM object identifier, or empty for searching in all projects. System.String inPartNumber Part number, with SQL wildcards (like \"%\" being a substitute for zero or more characters). Returns Type Description List < PdmObjectId > PDM object identifiers of documents corresponding to the searched part number. Remarks This method is available since v7.10. SearchDocumentByUniversalId(PdmObjectId, String, String) Searches for a document by its universal identifier. Declaration [AvailableSinceVersion(7, 6, 0, 0)] PdmObjectId SearchDocumentByUniversalId(PdmObjectId inProjectId, string inDomain, string inName) Parameters Type Name Description PdmObjectId inProjectId Project PDM object identifier, or empty for searching in all projects. System.String inDomain Universal domain. System.String inName Universal name. Returns Type Description PdmObjectId Document PDM object identifier. Remarks This method is available since v7.6. SearchDocumentsProvidingFunction(PdmMinorRevisionId, SCG.List<PdmObjectId>, Boolean, SCG.List<String>, Boolean, Int32) Searches for documents which provide specified function. Declaration [AvailableSinceVersion(7, 15, 400, 240)] SCG.List<PdmObjectId> SearchDocumentsProvidingFunction(PdmMinorRevisionId inFunctionMinorRevisionId, SCG.List<PdmObjectId> inProjects, bool inSearchInReferencedProjects, SCG.List<string> inExtensions, bool inSkipDeletedObjects, int inMaxResultCount) Parameters Type Name Description PdmMinorRevisionId inFunctionMinorRevisionId Function minor revision id. SCG.List < PdmObjectId > inProjects Projects in which to search or null in order to search in all projects. System.Boolean inSearchInReferencedProjects Search in referenced projects of specified projets. SCG.List < System.String > inExtensions Document types to search for or null for all. System.Boolean inSkipDeletedObjects Skip deleted objects. System.Int32 inMaxResultCount Maximum result count allowed, or -1 if no limit. Returns Type Description SCG.List < PdmObjectId > Founded objects. Remarks This method is available since v7.17.400.000. SearchFolderByName(PdmObjectId, String) Searches for a folder by its name. Declaration [AvailableSinceVersion(7, 13, 0, 0)] List<PdmObjectId> SearchFolderByName(PdmObjectId inProjectId, string inFolderName) Parameters Type Name Description PdmObjectId inProjectId Project PDM object identifier, or empty for searching in all projects. System.String inFolderName Folder name. Returns Type Description List < PdmObjectId > PDM object identifiers of documents corresponding to the searched name. Remarks This method is available since v7.13. SearchMajorRevisionBackReferences(PdmObjectId, PdmMajorRevisionId) Searches all back references of a document major revision. Declaration [AvailableSinceVersion(7, 7, 201, 140)] List<PdmMinorRevisionId> SearchMajorRevisionBackReferences(PdmObjectId inProjectId, PdmMajorRevisionId inMajorRevisionId) Parameters Type Name Description PdmObjectId inProjectId Identifier of project to search inside, or empty for searching in all projects. PdmMajorRevisionId inMajorRevisionId Identifier of the document major revision to analyze. Returns Type Description List < PdmMinorRevisionId > Back referenced minor revisions. Remarks This method is available since v7.7.201.140. SearchMinorRevisionBackReferences(PdmObjectId, PdmMinorRevisionId) Searches all back references of a document minor revision. Declaration [AvailableSinceVersion(7, 7, 201, 140)] List<PdmMinorRevisionId> SearchMinorRevisionBackReferences(PdmObjectId inProjectId, PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmObjectId inProjectId Identifier of project to search inside, or empty for searching in all projects. PdmMinorRevisionId inMinorRevisionId Identifier of the document minor revision to analyze. Returns Type Description List < PdmMinorRevisionId > Back referenced minor revisions. Remarks This method is available since v7.7.201.140. SearchMinorRevisionReferences(PdmMinorRevisionId) Searches all references of a document minor revision. Declaration [AvailableSinceVersion(7, 10, 0, 0)] List<PdmMinorRevisionId> SearchMinorRevisionReferences(PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of the document minor revision to analyze. Returns Type Description List < PdmMinorRevisionId > Referenced minor revisions. Remarks This method is available since v7.10. SearchObjectsWithProperties(List<PdmObjectId>, Boolean, List<String>, Boolean, Int32) Searches PDM objects with several properties. Declaration [AvailableSinceVersion(7, 15, 400, 220)] SCG.List<PdmObjectId> SearchObjectsWithProperties(List<PdmObjectId> inProjects, bool inSearchInReferencedProjects, List<string> inExtensions, bool inSkipDeletedObjects, int inMaxResultCount) Parameters Type Name Description List < PdmObjectId > inProjects Projects in which to search or null in order to search in all projects. System.Boolean inSearchInReferencedProjects Search in referenced projects of specified projets. List < System.String > inExtensions Document types to search for or null for all. System.Boolean inSkipDeletedObjects Skip deleted objects. System.Int32 inMaxResultCount Maximum result count allowed, or -1 if no limit. Returns Type Description SCG.List < PdmObjectId > Founded objects. Remarks This method is available since v7.15.400.220. SearchProjectByName(String) Searches for a project by its name. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<PdmObjectId> SearchProjectByName(string inProjectName) Parameters Type Name Description System.String inProjectName Project name. Returns Type Description List < PdmObjectId > PDM object identifiers of projects corresponding to the searched name. Remarks The project name is the localized name in the current culture of TopSolid. This method is available since v7.6. SearchPropertyDefinitionInfo(PropertyDefinition, out String, out String, out PropertyType) Searches for a specified property definition information. Declaration [AvailableSinceVersion(7, 12, 0, 0)] bool SearchPropertyDefinitionInfo(PropertyDefinition inPropertyDefinition, out string outLocalizedDomainName, out string outLocalizedName, out PropertyType outType) Parameters Type Name Description PropertyDefinition inPropertyDefinition Property definition to search for. System.String outLocalizedDomainName Localized domain name of the property definition found, or null if not found. System.String outLocalizedName Localized name of the property definition found, or null if not found. PropertyType outType Type of the property, or None if not found. Returns Type Description System.Boolean Whether the property definition has been found. Remarks This method is available since v7.12. SearchUserEnumerationLocalizedText(PropertyDefinition, Int32) Searches for the localized text corresponding to a specified user enumeration property value. Declaration [AvailableSinceVersion(7, 12, 0, 0)] string SearchUserEnumerationLocalizedText(PropertyDefinition inPropertyDefinition, int inValue) Parameters Type Name Description PropertyDefinition inPropertyDefinition Property definition of type UserEnumeration . System.Int32 inValue User enumeration value. Returns Type Description System.String Corresponding localized text, or null if not found. Remarks This method is available since v7.12. SetAuthor(PdmObjectId, String) Sets the author of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] void SetAuthor(PdmObjectId inObjectId, string inAuthor) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String inAuthor Author. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.100. SetComment(PdmObjectId, String) Sets the comment of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] void SetComment(PdmObjectId inObjectId, string inComment) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String inComment Comment. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.100. SetComplementaryPartNumber(PdmObjectId, String) Sets the complementary part number of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] void SetComplementaryPartNumber(PdmObjectId inObjectId, string inComplementaryPartNumber) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String inComplementaryPartNumber Complementary part number. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.100. SetDescription(PdmObjectId, String) Sets the description of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] void SetDescription(PdmObjectId inObjectId, string inDescription) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String inDescription Description. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.100. SetLifeCycleMainState(PdmObjectId, PdmLifeCycleMainState) Changes the life cycle main state of an object. Declaration [AvailableSinceVersion(7, 9, 302, 160)] void SetLifeCycleMainState(PdmObjectId inObjectId, PdmLifeCycleMainState inLifeCycle) Parameters Type Name Description PdmObjectId inObjectId Identifier of object to change life cycle main state. PdmLifeCycleMainState inLifeCycle Life cycle to apply (None and Design life cycles are not supported). Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.9.302.160. SetMajorRevisionLifeCycleMainState(PdmMajorRevisionId, PdmLifeCycleMainState) Changes the life cycle main state of a major revision. Declaration [AvailableSinceVersion(7, 10, 0, 0)] void SetMajorRevisionLifeCycleMainState(PdmMajorRevisionId inMajorRevisionId, PdmLifeCycleMainState inLifeCycle) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Identifier of major revision to change life cycle main state. PdmLifeCycleMainState inLifeCycle Life cycle to apply (None and Design life cycles are not supported). Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.10. SetMajorRevisionLifeCycleSubState(PdmMajorRevisionId, PdmObjectId) Change the life cycle sub state of a major revision. Declaration [AvailableSinceVersion(7, 14, 248, 0)] void SetMajorRevisionLifeCycleSubState(PdmMajorRevisionId inMajorRevisionId, PdmObjectId inNewLifeCycleSubStateId) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Identifier of major revision to change life cycle sub state. PdmObjectId inNewLifeCycleSubStateId Life cycle sub state object identifier to apply. SetManufacturer(PdmObjectId, String) Sets the manufacturer of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] void SetManufacturer(PdmObjectId inObjectId, string inManufacturer) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String inManufacturer Manufacturer. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.100. SetManufacturerPartNumber(PdmObjectId, String) Sets the manufacturer part number of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] void SetManufacturerPartNumber(PdmObjectId inObjectId, string inManufacturerPartNumber) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String inManufacturerPartNumber Manufacturer part number. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.100. SetName(PdmObjectId, String) Sets the name of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] void SetName(PdmObjectId inObjectId, string inName) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String inName Name. Remarks This method is available since v7.8.303.100. SetPartNumber(PdmObjectId, String) Sets the part number of an object. Declaration [AvailableSinceVersion(7, 8, 303, 100)] void SetPartNumber(PdmObjectId inObjectId, string inPartNumber) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String inPartNumber Part number. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.8.303.100. SetProjectFolderName(PdmProjectFolderId, String) Sets the name of a project folder. Declaration [AvailableSinceVersion(7, 9, 0, 0)] void SetProjectFolderName(PdmProjectFolderId inProjectFolderId, string inName) Parameters Type Name Description PdmProjectFolderId inProjectFolderId Project folder identifier. System.String inName Name. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.9. SetProjectMainDocument(PdmObjectId, PdmObjectId) Sets the main document of a specified project. Declaration [AvailableSinceVersion(7, 11, 0, 0)] void SetProjectMainDocument(PdmObjectId inProjectId, PdmObjectId inDocumentId) Parameters Type Name Description PdmObjectId inProjectId Project object identifier. PdmObjectId inDocumentId Main document object identifier or Empty for none. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. EnsureIsDirty(PdmObjectId) must be called on the project before calling this method. This method is available since v7.11. SetRealUserProperty(PdmObjectId, PdmObjectId, Real) Sets the value of a specified real user property of an object. Declaration [AvailableSinceVersion(7, 9, 300, 40)] void SetRealUserProperty(PdmObjectId inObjectId, PdmObjectId inPropertyObjectId, Real inValue) Parameters Type Name Description PdmObjectId inObjectId Object identifier. PdmObjectId inPropertyObjectId Object identifier of property definition document to assign. Real inValue Value to assign. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.9.300.040. SetRevisionTexts(PdmObjectId, String, String) Sets the major and minor revision texts of an object. Declaration [AvailableSinceVersion(7, 9, 300, 80)] void SetRevisionTexts(PdmObjectId inObjectId, string inMajorText, string inMinorText) Parameters Type Name Description PdmObjectId inObjectId Object identifier. System.String inMajorText Major revision text. System.String inMinorText Minor revision text. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.9.300.80. SetTextUserProperty(PdmObjectId, PdmObjectId, String) Sets the value of a specified text user property of an object. Declaration [AvailableSinceVersion(7, 9, 300, 40)] void SetTextUserProperty(PdmObjectId inObjectId, PdmObjectId inPropertyObjectId, string inValue) Parameters Type Name Description PdmObjectId inObjectId Object identifier. PdmObjectId inPropertyObjectId Object identifier of property definition document to assign. System.String inValue Value to assign. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.9.300.040. ShowInProjectTree(PdmObjectId) Show the object in the project tree. Declaration [AvailableSinceVersion(7, 13, 0, 0)] void ShowInProjectTree(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Identifier of object to show. Remarks This method is available since v7.13. UndoCheckOut(PdmObjectId) Undoes the check-out of an object. Declaration [AvailableSinceVersion(7, 6, 0, 0)] void UndoCheckOut(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Object identifier. Remarks This method must not be called between StartModification(String, Boolean) and EndModification(Boolean, Boolean) methods calls. This method is available since v7.6. UpdateDocumentReferences(PdmMinorRevisionId) Updates the references of a document minor revision. Declaration [AvailableSinceVersion(7, 13, 0, 0)] void UpdateDocumentReferences(PdmMinorRevisionId inMinorRevisionId) Parameters Type Name Description PdmMinorRevisionId inMinorRevisionId Identifier of the document minor revision. Remarks This method is available since v7.13."
  },
  "api/kernel/TopSolid.Kernel.Automating.IPdmAdmin.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IPdmAdmin.html",
    "title": "Interface IPdmAdmin | TopSolid Automation website",
    "keywords": "Interface IPdmAdmin Gives access to the PDM administration. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 301, 160)] public interface IPdmAdmin Remarks This interface is available since v7.6.301.160. Properties IsAdmin Tells whether the connected TopSolid user has PDM administration rights. Declaration [AvailableSinceVersion(7, 6, 301, 160)] bool IsAdmin { get; } Property Value Type Description System.Boolean Remarks This property is available since v7.6.301.160. UserAccountId Gets connected user account identifier. Declaration [AvailableSinceVersion(7, 15, 186, 0)] string UserAccountId { get; } Property Value Type Description System.String Remarks This property is available since v7.15.186.000. UserName Gets connected user name. Declaration [AvailableSinceVersion(7, 15, 186, 0)] string UserName { get; } Property Value Type Description System.String Remarks This property is available since v7.15.186.000. UserOldLogin Gets connected user old login. Declaration [AvailableSinceVersion(7, 15, 186, 0)] string UserOldLogin { get; } Property Value Type Description System.String Remarks This property is available since v7.15.186.000. Methods ActivateUser(String) Activates an inactive user. Declaration [AvailableSinceVersion(7, 6, 301, 160)] void ActivateUser(string inAccountId) Parameters Type Name Description System.String inAccountId User account identifier. Remarks If the IsAdmin property returns false , this method cannot be called (an exception will be thrown otherwise). This method is available since v7.6.301.160. ChangeUserPassword(String, String, String) When current client is admin, changes user password. Declaration [AvailableSinceVersion(7, 16, 142, 0)] void ChangeUserPassword(string inAccountId, string inOldPassword, string inNewPassword) Parameters Type Name Description System.String inAccountId User account identifier. System.String inOldPassword Old password. System.String inNewPassword New password. CreateUser(String, String, String, String, String) Creates a new user. Declaration [AvailableSinceVersion(7, 6, 301, 160)] void CreateUser(string inFirstName, string inLastName, string inInitials, string inAccountIdentifier, string inPassword) Parameters Type Name Description System.String inFirstName User first name. System.String inLastName User last name. System.String inInitials User initials. System.String inAccountIdentifier User account identifier. System.String inPassword User password. Remarks If the IsAdmin property returns false , this method cannot be called (an exception will be thrown otherwise). This method is available since v7.6.301.160. DeactivateUser(String) Deactivate an active user. Declaration [AvailableSinceVersion(7, 6, 301, 160)] void DeactivateUser(string inAccountId) Parameters Type Name Description System.String inAccountId User account identifier. Remarks If the IsAdmin property returns false , this method cannot be called (an exception will be thrown otherwise). This method is available since v7.6.301.160. GetConnectedUsers() Gets the connected users. Declaration [AvailableSinceVersion(7, 10, 300, 120)] List<string> GetConnectedUsers() Returns Type Description List < System.String > Users account identifiers. Remarks This method is available since v7.10.300.120. GetUserEmailAddress(String) Gets the e-mail address of a user. Declaration [AvailableSinceVersion(7, 7, 0, 0)] string GetUserEmailAddress(string inAccountId) Parameters Type Name Description System.String inAccountId User account identifier. Returns Type Description System.String User e-mail address. Remarks This method is available since v7.7. GetUserGroupName(PdmObjectId, out String, out String) Gets the name of a user group. Declaration [AvailableSinceVersion(7, 8, 302, 60)] void GetUserGroupName(PdmObjectId inUserGroupId, out string outName, out string outDescription) Parameters Type Name Description PdmObjectId inUserGroupId User Group identifier. System.String outName User group name. System.String outDescription User group description. Remarks This method is available since v7.8.302.060. GetUserGroups(Boolean, Boolean) Gets all the users groups. Declaration [AvailableSinceVersion(7, 8, 302, 60)] List<PdmObjectId> GetUserGroups(bool inGetsActiveUserGroups, bool inGetsInactiveUserGroups) Parameters Type Name Description System.Boolean inGetsActiveUserGroups Gets active user groups. System.Boolean inGetsInactiveUserGroups Gets inactive user groups. Returns Type Description List < PdmObjectId > User group identifiers. Remarks This method is available since v7.8.302.060. GetUserGroupUserAccountIds(PdmObjectId) Gets the users account identifiers of a user group. Declaration [AvailableSinceVersion(7, 8, 302, 60)] List<string> GetUserGroupUserAccountIds(PdmObjectId inUserGroupId) Parameters Type Name Description PdmObjectId inUserGroupId User group identifiers. Returns Type Description List < System.String > Users account identifiers. Remarks This method is available since v7.8.302.060. GetUserName(String, out String, out String, out String) Gets the name of a user. Declaration [AvailableSinceVersion(7, 6, 301, 160)] void GetUserName(string inAccountId, out string outFirstName, out string outLastName, out string outInitials) Parameters Type Name Description System.String inAccountId User account identifier. System.String outFirstName User first name. System.String outLastName User last name. System.String outInitials User initials. Remarks This method is available since v7.6.301.160. GetUsers(Boolean, Boolean) Gets all the users. Declaration [AvailableSinceVersion(7, 6, 301, 160)] List<string> GetUsers(bool inGetsActiveUsers, bool inGetsInactiveUsers) Parameters Type Name Description System.Boolean inGetsActiveUsers Gets active users. System.Boolean inGetsInactiveUsers Gets inactive users. Returns Type Description List < System.String > Users account identifiers. Remarks This method is available since v7.6.301.160. IsUserActive(String) Tells whether a user is active. Declaration [AvailableSinceVersion(7, 6, 301, 160)] bool IsUserActive(string inAccountId) Parameters Type Name Description System.String inAccountId User account identifier. Returns Type Description System.Boolean The user is active. Remarks This method is available since v7.6.301.160. SetUserEmailAddress(String, String) Sets the e-mail address of a user. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void SetUserEmailAddress(string inAccountId, string inEmailAddress) Parameters Type Name Description System.String inAccountId User account identifier. System.String inEmailAddress User e-mail address. Remarks If the IsAdmin property returns false , this method cannot be called (an exception will be thrown otherwise). This method is available since v7.7. SetUserName(String, String, String, String) Sets the name of a user. Declaration [AvailableSinceVersion(7, 6, 301, 160)] void SetUserName(string inAccountId, string inFirstName, string inLastName, string inInitials) Parameters Type Name Description System.String inAccountId User account identifier. System.String inFirstName User first name. System.String inLastName User last name. System.String inInitials User initials. Remarks If the IsAdmin property returns false , this method cannot be called (an exception will be thrown otherwise). This method is available since v7.6.301.160."
  },
  "api/kernel/TopSolid.Kernel.Automating.IPdmSecurity.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IPdmSecurity.html",
    "title": "Interface IPdmSecurity | TopSolid Automation website",
    "keywords": "Interface IPdmSecurity Gives access to the PDM security. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public interface IPdmSecurity Remarks This interface is available since v7.8. Methods ActivateProjectSecurity(PdmObjectId) Activates security of a project. Declaration [AvailableSinceVersion(7, 8, 302, 60)] void ActivateProjectSecurity(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project identifier to activate. Remarks This method is available since v7.8.302.060. ActivateSecurity() Activates system security. Declaration [AvailableSinceVersion(7, 12, 0, 0)] void ActivateSecurity() Remarks This method is available since v7.12. DeactivateProjectSecurity(PdmObjectId) Deactivates security of a project. Declaration [AvailableSinceVersion(7, 8, 302, 60)] void DeactivateProjectSecurity(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project identifier to deactivate. Remarks This method is available since v7.8.302.060. DeactivateSecurity() Deactivates system security. Declaration [AvailableSinceVersion(7, 12, 0, 0)] void DeactivateSecurity() Remarks This method is available since v7.12. GetPermissions(PdmObjectId) Retrieves security of a project, folder or document. Declaration [AvailableSinceVersion(7, 8, 302, 60)] List<PdmSecurityUserOrGroupPermissions> GetPermissions(PdmObjectId inObjectId) Parameters Type Name Description PdmObjectId inObjectId Project, folder or document identifier to retrieve permissions or empty for system permissions. Returns Type Description List < PdmSecurityUserOrGroupPermissions > Security permissions. Remarks This method is available since v7.8.302.060. HasRight(PdmObjectId, PdmRight) Tells whether the current user has a specific right on an object. Declaration [AvailableSinceVersion(7, 10, 0, 0)] bool HasRight(PdmObjectId inObjectId, PdmRight inRight) Parameters Type Name Description PdmObjectId inObjectId Identifier of project, folder or document. PdmRight inRight Right. Returns Type Description System.Boolean Has right. Remarks This method is available since v7.10. IsProjectSecurityActive(PdmObjectId) Tells if a security is activated on a project. Declaration [AvailableSinceVersion(7, 8, 302, 60)] bool IsProjectSecurityActive(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project identifier to analyze. Returns Type Description System.Boolean The project securities activated. Remarks This method is available since v7.8.302.060. IsSecurityActive() Tells if a security is globally activated. Declaration [AvailableSinceVersion(7, 8, 302, 60)] bool IsSecurityActive() Returns Type Description System.Boolean Global security is activated. Remarks This method is available since v7.8.302.060. SetPermissions(PdmObjectId, List<PdmSecurityUserOrGroupPermissions>) Sets security of a project, folder or document. Declaration [AvailableSinceVersion(7, 8, 302, 60)] void SetPermissions(PdmObjectId inObjectId, List<PdmSecurityUserOrGroupPermissions> inPermissions) Parameters Type Name Description PdmObjectId inObjectId Project, folder or document identifier to set permissions or empty for system permissions. List < PdmSecurityUserOrGroupPermissions > inPermissions Security permissions to set. Remarks This method is available since v7.8.302.060."
  },
  "api/kernel/TopSolid.Kernel.Automating.IPdmWorkflow.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IPdmWorkflow.html",
    "title": "Interface IPdmWorkflow | TopSolid Automation website",
    "keywords": "Interface IPdmWorkflow Gives access to the PDM workflow. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 201, 140)] public interface IPdmWorkflow Remarks This interface is available since v7.7.201.140. Methods ApproveAction(PdmMajorRevisionId, String, List<String>) Approves the last pending workflow action of a major revision. Declaration [AvailableSinceVersion(7, 14, 248, 0)] void ApproveAction(PdmMajorRevisionId inMajorRevisionId, string inComment, List<string> inEmailAddresses) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Major revision to approve action on. System.String inComment Comment. List < System.String > inEmailAddresses Additional e-mail addresses to notify. Remarks This method is available since v7.14.248.000. CancelAction(PdmMajorRevisionId) Cancels a workflow action of a major revision. Declaration [AvailableSinceVersion(7, 14, 248, 0)] void CancelAction(PdmMajorRevisionId inMajorRevisionId) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Major revision to cancel action on. Remarks This method is available since v7.14.248.000. GetPendingRequests() Gets major revision identifiers where there is a pending request to treat. Declaration [AvailableSinceVersion(7, 14, 248, 0)] List<PdmMajorRevisionId> GetPendingRequests() Returns Type Description List < PdmMajorRevisionId > Major revision identifiers where there is a pending request to treat. Remarks This method is available since v7.14.248.000. GetPossibleActions(PdmMajorRevisionId, out List<PdmObjectId>, out List<String>) Get all workflow actions possible of a major revision. Declaration [AvailableSinceVersion(7, 7, 201, 140)] void GetPossibleActions(PdmMajorRevisionId inMajorRevisionId, out List<PdmObjectId> outActionIds, out List<string> outActionNames) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Major revision to analyze. List < PdmObjectId > outActionIds Workflow action identifiers. List < System.String > outActionNames Workflow action names. Remarks This method is available since v7.7.201.140. GetWorkflowActionStates(PdmMajorRevisionId, out List<PdmObjectId>, out List<WorkflowActionState>) Get workflow action states of given major revision corresponding to returned workflow action identifiers. Declaration [AvailableSinceVersion(7, 14, 248, 0)] void GetWorkflowActionStates(PdmMajorRevisionId inMajorRevisionId, out List<PdmObjectId> outWorkflowActionIds, out List<WorkflowActionState> outWorkflowActionStates) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Major revision identifier. List < PdmObjectId > outWorkflowActionIds Workflow action identifiers. List < WorkflowActionState > outWorkflowActionStates Workflow action states. Remarks This method is available since v7.14.248.000. HasWorkflow(PdmObjectId) Tells if a project has a workflow set. Declaration [AvailableSinceVersion(7, 7, 201, 140)] bool HasWorkflow(PdmObjectId inProjectId) Parameters Type Name Description PdmObjectId inProjectId Project identifier to analyze. Returns Type Description System.Boolean The project has a workflow. Remarks This method is available since v7.7.201.140. RefuseAction(PdmMajorRevisionId, String, List<String>) Refuses the last pending workflow action of a major revision. Declaration [AvailableSinceVersion(7, 14, 248, 0)] void RefuseAction(PdmMajorRevisionId inMajorRevisionId, string inComment, List<string> inEmailAddresses) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Major revision to refuse action on. System.String inComment Comment. List < System.String > inEmailAddresses Additional e-mail addresses to notify. Remarks This method is available since v7.14.248.000. StartAction(PdmMajorRevisionId, PdmObjectId) Starts a workflow action of a major revision. Declaration [AvailableSinceVersion(7, 7, 201, 140)] void StartAction(PdmMajorRevisionId inMajorRevisionId, PdmObjectId inWorkflowActionId) Parameters Type Name Description PdmMajorRevisionId inMajorRevisionId Major revision to start action on. PdmObjectId inWorkflowActionId Workflow action to start. Remarks This method is available since v7.7.201.140."
  },
  "api/kernel/TopSolid.Kernel.Automating.IShapes.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IShapes.html",
    "title": "Interface IShapes | TopSolid Automation website",
    "keywords": "Interface IShapes Gives access to shape entities. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IShapes Remarks This interface is available since v7.6. Methods CreateColoringOperation(List<ElementItemId>, Color) Changes the color of the faces. Declaration [AvailableSinceVersion(7, 13, 0, 0)] ElementId CreateColoringOperation(List<ElementItemId> inFaceIds, Color inColor) Parameters Type Name Description List < ElementItemId > inFaceIds Identifier of the faces to modify color. Color inColor Color of the face, or Empty if the face has no color. Returns Type Description ElementId Identifier of the created coloring operation. Remarks This method is available since v7.13. CreateExtrudedShape(DocumentId, SmartSection3D, SmartDirection3D, SmartReal, SmartReal, Boolean, Boolean) Creates an extruded shape operation in a document. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementId CreateExtrudedShape(DocumentId inDocumentId, SmartSection3D inSection, SmartDirection3D inDirection, SmartReal inLength, SmartReal inDraftAngle, bool inIsCentered, bool inIsSurface) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartSection3D inSection Section to extrude. SmartDirection3D inDirection Extrusion direction. SmartReal inLength Extrusion length. SmartReal inDraftAngle Draft angle, or null if none. System.Boolean inIsCentered Extrusion is centered. System.Boolean inIsSurface Makes a surface instead of a solid. Returns Type Description ElementId Identifier of the created shape entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.80. CreateLoftedShape(DocumentId, Boolean, SmartPoint3D, List<SmartProfile3D>, List<SmartPoint3D>, SmartPoint3D, CurveParametricApproximationType, List<SmartProfile3D>, CurveParametricApproximationType, SmartReal, FacesDivisionType, Boolean, Boolean, Boolean) Creates a lofted shape operation in a document. Declaration [AvailableSinceVersion(7, 10, 301, 180)] ElementId CreateLoftedShape(DocumentId inDocumentId, bool inIsPeriodic, SmartPoint3D inStartPoint, List<SmartProfile3D> inLoftedProfiles, List<SmartPoint3D> inLoftedProfilesOrigins, SmartPoint3D inEndPoint, CurveParametricApproximationType inLoftedProfilesSynchronization, List<SmartProfile3D> inGuideProfiles, CurveParametricApproximationType inGuideProfilesSynchronization, SmartReal inIntersectionTolerance, FacesDivisionType inFacesDivision, bool inMatchesSegmentToSegment, bool inSimplifiesGeometry, bool inIsSurface) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Boolean inIsPeriodic Makes a periodic lofted shape (i.e. without start and end). SmartPoint3D inStartPoint Start point, or null if not degenerated to a point at start. List < SmartProfile3D > inLoftedProfiles Lofted profiles. List < SmartPoint3D > inLoftedProfilesOrigins Origins on closed lofted profiles, or null if not closed or use profile start point. SmartPoint3D inEndPoint End point, or null if not degenerated to a point at end. CurveParametricApproximationType inLoftedProfilesSynchronization Lofted profiles synchronization. List < SmartProfile3D > inGuideProfiles Guide profiles, or null if none. CurveParametricApproximationType inGuideProfilesSynchronization Guide profiles synchronization. SmartReal inIntersectionTolerance Tolerance used to search intersections between lofted and guide profiles. FacesDivisionType inFacesDivision Faces division type. System.Boolean inMatchesSegmentToSegment Matches segment to segment instead of profile to profile. System.Boolean inSimplifiesGeometry Simplifies the geometry when possible. System.Boolean inIsSurface Makes a surface instead of a solid. Returns Type Description ElementId Identifier of the created shape entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.10.301.180. CreateRevolvedShape(DocumentId, SmartSection3D, SmartAxis3D, SmartReal, Boolean, Boolean) Creates a revolved shape operation in a document. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementId CreateRevolvedShape(DocumentId inDocumentId, SmartSection3D inSection, SmartAxis3D inAxis, SmartReal inAngle, bool inIsCentered, bool inIsSurface) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartSection3D inSection Section to revolve. SmartAxis3D inAxis Revolution axis. SmartReal inAngle Revolution angle, or null if 360°. System.Boolean inIsCentered Revolution is centered. System.Boolean inIsSurface Makes a surface instead of a solid. Returns Type Description ElementId Identifier of the created shape entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.80. FindNearestPointToPoint(ElementId, Point3D, out ElementItemId, out Double, out Double, out Boolean) Finds the nearest point on a shape to a specified reference point. Declaration [AvailableSinceVersion(7, 10, 300, 60)] Point3D FindNearestPointToPoint(ElementId inElementId, Point3D inPoint, out ElementItemId outItemId, out double outU, out double outV, out bool outIsInside) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Point3D inPoint Reference point. ElementItemId outItemId Identifier of the item of the shape where the nearest point is found (face, edge or vertex as defined by outItemId. ItemType ). System.Double outU Edge parameter of face U-parameter. System.Double outV Face V-parameter. System.Boolean outIsInside Whether the reference point is inside the shape. Returns Type Description Point3D Nearest point on shape to the specified reference point. Remarks This method is available since v7.10.300.60. GetBoundaryEdges(ElementId) Gets the boundary edges of a shape. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<List<ElementItemId>> GetBoundaryEdges(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Returns Type Description List < List < ElementItemId >> Identifiers of the boundary edges of the shape, grouped by connected sets. Remarks This method is available since v7.7. GetEdgeCircleCurve(ElementItemId, out Plane3D, out Double) Gets the circle curve attached to an edge. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetEdgeCircleCurve(ElementItemId inEdgeId, out Plane3D outPlane, out double outRadius) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. Plane3D outPlane Circle plane. System.Double outRadius Circle radius. Remarks This method is available since v7.7. GetEdgeCount(ElementId) Gets the number of edges of a shape. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetEdgeCount(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Returns Type Description System.Int32 Number of edges of the shape. Remarks This method is available since v7.6. GetEdgeCurveParameter(ElementItemId, Point3D, out Double) Gets the parametric value of a specified point on the curve attached to an edge. Declaration [AvailableSinceVersion(7, 10, 300, 60)] Point3D GetEdgeCurveParameter(ElementItemId inEdgeId, Point3D inPoint, out double outT) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. Point3D inPoint Point near edge curve. System.Double outT Parameter of nearest point on edge curve. Returns Type Description Point3D Nearest point to specified point on edge curve. Remarks This method is available since v7.10.300.60. GetEdgeCurveRange(ElementItemId, out Boolean, out Double, out Double) Gets the parametric range of the curve attached to an edge. Declaration [AvailableSinceVersion(7, 10, 300, 60)] void GetEdgeCurveRange(ElementItemId inEdgeId, out bool outIsPeriodic, out double outTMin, out double outTMax) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. System.Boolean outIsPeriodic Whether the curve parameterization in periodic. System.Double outTMin Minimum parametric value, or main period start if periodic. System.Double outTMax Maximum parametric value, or main period end if periodic. Remarks This method is available since v7.10.300.60. GetEdgeCurveType(ElementItemId) Gets the type of the curve attached to an edge. Declaration [AvailableSinceVersion(7, 7, 0, 0)] CurveType GetEdgeCurveType(ElementItemId inEdgeId) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. Returns Type Description CurveType Type of the curve attached to the edge. Remarks This method is available since v7.7. GetEdgeLength(ElementItemId) Gets the length of an edge. Declaration [AvailableSinceVersion(7, 7, 0, 0)] double GetEdgeLength(ElementItemId inEdgeId) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. Returns Type Description System.Double Length of the edge. Remarks This method is available since v7.7. GetEdgeLineCurve(ElementItemId, out Axis3D) Gets the line curve attached to an edge. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetEdgeLineCurve(ElementItemId inEdgeId, out Axis3D outAxis) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. Axis3D outAxis Line axis. Remarks This method is available since v7.7. GetEdgeNormal(ElementItemId, Double) Gets the normal to an edge at a specified parametric value. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Direction3D GetEdgeNormal(ElementItemId inEdgeId, double inT) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. System.Double inT Parameter within edge parametric range. Returns Type Description Direction3D Normal to the edge at the specified parametric value. Remarks The edge normal is the average of the edge faces normal. This method is available since v7.7. GetEdgePoint(ElementItemId, Double) Gets a point on the curve attached to an edge at a specified parametric value. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Point3D GetEdgePoint(ElementItemId inEdgeId, double inT) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. System.Double inT Parameter within edge curve parametric range. Returns Type Description Point3D Point on the edge curve at the specified parametric value. Remarks This method is available since v7.7. GetEdgeRange(ElementItemId, out Double, out Double) Gets the parametric range of an edge. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetEdgeRange(ElementItemId inEdgeId, out double outTMin, out double outTMax) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. System.Double outTMin Minimum parametric value. System.Double outTMax Maximum parametric value. Remarks This method is available since v7.7. GetEdges(ElementId) Gets the edges of a shape. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetEdges(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Returns Type Description List < ElementItemId > Identifiers of the edges of the shape. Remarks This method is available since v7.7. GetEdgeTangent(ElementItemId, Double) Gets the tangent to the curve attached to an edge at a specified parametric value. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Direction3D GetEdgeTangent(ElementItemId inEdgeId, double inT) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. System.Double inT Parameter within edge curve parametric range. Returns Type Description Direction3D Tangent to the edge curve at the specified parametric value. Remarks If the edge is reversed, the orientation of the tangent is the opposite to the parametric first derivative. This method is available since v7.7. GetEdgeVertices(ElementItemId, out ElementItemId, out ElementItemId) Gets the start and end vertices of an edge. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetEdgeVertices(ElementItemId inEdgeId, out ElementItemId outStartVertexId, out ElementItemId outEndVertexId) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. ElementItemId outStartVertexId Identifier of the start vertex, or Empty if none. ElementItemId outEndVertexId Identifier of the end vertex, or Empty if none. Remarks This method is available since v7.7. GetFaceArea(ElementItemId) Gets the area of a face. Declaration [AvailableSinceVersion(7, 13, 0, 0)] double GetFaceArea(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description System.Double Area of the face in SI units. Remarks If the face is reversed, the orientation of the normal is the opposite to the cross product of the U and V parametric first derivatives. This method is available since v7.13. GetFaceColor(ElementItemId) Gets the color of a face. Declaration [AvailableSinceVersion(7, 12, 0, 0)] Color GetFaceColor(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description Color Color of the face, or Empty if the face has no color. Remarks This method is available since v7.12. GetFaceConnectedFaces(ElementItemId) Gets the face connected faces. Declaration [AvailableSinceVersion(7, 13, 0, 0)] List<ElementItemId> GetFaceConnectedFaces(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description List < ElementItemId > Identifiers of the connected faces of the face. Remarks This method is available since v7.13. GetFaceCount(ElementId) Gets the number of faces of a shape. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetFaceCount(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Returns Type Description System.Int32 Number of faces of the shape. Remarks This method is available since v7.6. GetFaceCylinderDirection(ElementItemId) Gets the direction of a cylinder face. Declaration [AvailableSinceVersion(7, 14, 0, 0)] Direction3D GetFaceCylinderDirection(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description Direction3D Direction of the specified cylinder face. Remarks This method is available since v7.14. GetFaceCylinderLength(ElementItemId) Gets the length of a cylinder face. Declaration [AvailableSinceVersion(7, 14, 0, 0)] double GetFaceCylinderLength(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description System.Double Length of the specified cylinder face. Remarks This method is available since v7.14. GetFaceCylinderRadius(ElementItemId) Gets the radius of a cylinder face. Declaration [AvailableSinceVersion(7, 14, 0, 0)] double GetFaceCylinderRadius(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description System.Double Radius of the specified cylinder face. Remarks This method is available since v7.14. GetFaceCylinderSurface(ElementItemId, out Frame3D, out Double) Gets the cylinder surface attached to a face. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetFaceCylinderSurface(ElementItemId inFaceId, out Frame3D outFrame, out double outRadius) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Frame3D outFrame Cylinder frame. System.Double outRadius Cylinder radius. Remarks This method is available since v7.7. GetFaceEdges(ElementItemId) Gets the edges of a face. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetFaceEdges(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description List < ElementItemId > Identifiers of the edges of the face. Remarks This method is available since v7.7. GetFaceEnclosingCoordinates(ElementItemId, out Double, out Double, out Double, out Double, out Double, out Double) Gets the face enclosing coordinates in the absolute frame coordinates. Declaration [AvailableSinceVersion(7, 13, 0, 0)] void GetFaceEnclosingCoordinates(ElementItemId inFaceId, out double outXmin, out double outXmax, out double outYmin, out double outYmax, out double outZmin, out double outZmax) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. System.Double outXmin Xmin. System.Double outXmax Xmax. System.Double outYmin Ymin. System.Double outYmax Ymax. System.Double outZmin Zmin. System.Double outZmax Zmax. Remarks This method is available since v7.13. GetFaceEnclosingCoordinatesWithGivenFrame(ElementItemId, Frame3D, out Double, out Double, out Double, out Double, out Double, out Double) Gets the face enclosing coordinates in the given frame coordinates. Declaration [AvailableSinceVersion(7, 14, 0, 0)] void GetFaceEnclosingCoordinatesWithGivenFrame(ElementItemId inFaceId, Frame3D inFrame, out double outXmin, out double outXmax, out double outYmin, out double outYmax, out double outZmin, out double outZmax) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Frame3D inFrame Frame for enclosing coordinates. System.Double outXmin Xmin. System.Double outXmax Xmax. System.Double outYmin Ymin. System.Double outYmax Ymax. System.Double outZmin Zmin. System.Double outZmax Zmax. Remarks This method is available since v7.14. GetFaceLoops(ElementItemId) Gets the loops of a face. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<int> GetFaceLoops(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description List < System.Int32 > Identifiers of the loops of the face. Remarks This method is available since v7.7. GetFaceMachiningProcess(ElementItemId, out Int32) Gets the machining process of a face. Declaration [AvailableSinceVersion(7, 12, 0, 0)] PdmObjectId GetFaceMachiningProcess(ElementItemId inFaceId, out int outValue) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. System.Int32 outValue Machining process enumeration value, if the face has a machining process. Returns Type Description PdmObjectId PDM object identifier of the machining process definition document of the face, or Empty if the face has no machining process. Remarks This method is available since v7.12. GetFaceNormal(ElementItemId, Double, Double) Gets the normal to the surface attached to a face at specified parametric values. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Direction3D GetFaceNormal(ElementItemId inFaceId, double inU, double inV) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. System.Double inU U parameter within face surface parametric range. System.Double inV V parameter within face surface parametric range. Returns Type Description Direction3D Normal to the face surface at the specified parametric values. Remarks If the face is reversed, the orientation of the normal is the opposite to the cross product of the U and V parametric first derivatives. This method is available since v7.7. GetFacePlaneSurface(ElementItemId, out Plane3D) Gets the plane surface attached to a face. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetFacePlaneSurface(ElementItemId inFaceId, out Plane3D outPlane) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Plane3D outPlane Surface plane. Remarks This method is available since v7.7. GetFacePoint(ElementItemId, Double, Double) Gets a point on the surface attached to a face at specified parametric values. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Point3D GetFacePoint(ElementItemId inFaceId, double inU, double inV) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. System.Double inU U parameter within face surface parametric range. System.Double inV V parameter within face surface parametric range. Returns Type Description Point3D Point on the face surface at the specified parametric values. Remarks This method is available since v7.7. GetFaceRange(ElementItemId, out Double, out Double, out Double, out Double) Gets the parametric range of a face. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetFaceRange(ElementItemId inFaceId, out double outUMin, out double outUMax, out double outVMin, out double outVMax) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. System.Double outUMin Minimum U parametric value. System.Double outUMax Maximum U parametric value. System.Double outVMin Minimum V parametric value. System.Double outVMax Maximum V parametric value. Remarks This method is available since v7.7. GetFaces(ElementId) Gets the faces of a shape. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetFaces(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Returns Type Description List < ElementItemId > Identifiers of the faces of the shape. Remarks This method is available since v7.7. GetFaceSphereSurface(ElementItemId, out Frame3D, out Double) Gets the sphere surface attached to a face. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetFaceSphereSurface(ElementItemId inFaceId, out Frame3D outFrame, out double outRadius) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Frame3D outFrame Sphere frame. System.Double outRadius Sphere radius. Remarks This method is available since v7.7. GetFaceSurfaceParameters(ElementItemId, Point3D, out Double, out Double) Gets the parametric values of a specified point on the surface attached to a face. Declaration [AvailableSinceVersion(7, 10, 300, 60)] Point3D GetFaceSurfaceParameters(ElementItemId inFaceId, Point3D inPoint, out double outU, out double outV) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Point3D inPoint Point near face surface. System.Double outU U parameter of nearest point on face surface. System.Double outV V parameter of nearest point on face surface. Returns Type Description Point3D Nearest point to specified point on face surface. Remarks This method is available since v7.10.300.60. GetFaceSurfaceRange(ElementItemId, out Boolean, out Double, out Double, out Boolean, out Double, out Double) Gets the parametric range of the surface attached to a face. Declaration [AvailableSinceVersion(7, 10, 300, 60)] void GetFaceSurfaceRange(ElementItemId inFaceId, out bool outIsUPeriodic, out double outUMin, out double outUMax, out bool outIsVPeriodic, out double outVMin, out double outVMax) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. System.Boolean outIsUPeriodic Whether the surface parameterization in U-periodic. System.Double outUMin Minimum U parametric value, or main U-period start if U-periodic. System.Double outUMax Maximum U parametric value, or main U-period end if U-periodic. System.Boolean outIsVPeriodic Whether the surface parameterization in V-periodic. System.Double outVMin Minimum V parametric value, or main V-period start if V-periodic. System.Double outVMax Maximum V parametric value, or main V-period end if V-periodic. Remarks This method is available since v7.10.300.60. GetFaceSurfaceType(ElementItemId) Gets the type of the surface attached to a face. Declaration [AvailableSinceVersion(7, 7, 0, 0)] SurfaceType GetFaceSurfaceType(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description SurfaceType Type of the surface attached to the face. Remarks This method is available since v7.7. GetFaceVertices(ElementItemId) Gets the vertices of a face. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetFaceVertices(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description List < ElementItemId > Identifiers of the vertices of the face. Remarks This method is available since v7.7. GetLoopEdges(ElementId, Int32) Gets the edges of a loop. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetLoopEdges(ElementId inElementId, int inLoopId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. System.Int32 inLoopId Identifier of the loop to analyze. Returns Type Description List < ElementItemId > Identifiers of the edges of the loop. Remarks This method is available since v7.7. GetLoopType(ElementId, Int32) Gets the type of a loop. Declaration [AvailableSinceVersion(7, 6, 0, 0)] LoopType GetLoopType(ElementId inElementId, int inLoopId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. System.Int32 inLoopId Identifier of the loop to analyze. Returns Type Description LoopType Type of loop. Remarks This method is available since v7.6. GetShapePublishingDefinition(ElementId) Gets the definition of a shape publishing entity. Declaration [AvailableSinceVersion(7, 8, 302, 80)] SmartShape GetShapePublishingDefinition(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to analyze. Returns Type Description SmartShape Remarks This method is available since v7.8.302.80. GetShapes(DocumentId) Gets the shapes entities that are in the shapes folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetShapes(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Shape entities found. Remarks This method is available since v7.6. GetShapesFolder(DocumentId) Gets the shapes folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetShapesFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the shapes folder entity found. Remarks This method is available since v7.10. GetShapeType(ElementId) Gets the type of a shape entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] ShapeType GetShapeType(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Returns Type Description ShapeType Type of the shape. Remarks This method is available since v7.6. GetShapeVolume(ElementId) Gets the volume of a shape entity. Declaration [AvailableSinceVersion(7, 14, 0, 0)] double GetShapeVolume(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Returns Type Description System.Double Type of the shape. Remarks This method is available since v7.14. GetSharpEdges(ElementId, Double) Gets the sharp edges of a shape. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetSharpEdges(ElementId inElementId, double inAngle) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. System.Double inAngle Minimum angle between face normals along the edge. Returns Type Description List < ElementItemId > Identifiers of the sharp edges of the shape. Remarks This method is available since v7.7. GetSmoothEdges(ElementId, Double) Gets the smooth edges of a shape. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetSmoothEdges(ElementId inElementId, double inAngle) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. System.Double inAngle Maximum angle between face normals along the edge. Returns Type Description List < ElementItemId > Identifiers of the smooth edges of the shape. Remarks This method is available since v7.7. GetVertexCount(ElementId) Gets the number of vertices of a shape. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetVertexCount(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Returns Type Description System.Int32 Number of vertices of the shape. Remarks This method is available since v7.6. GetVertexPoint(ElementItemId) Gets the point attached to a vertex. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Point3D GetVertexPoint(ElementItemId inVertexId) Parameters Type Name Description ElementItemId inVertexId Identifier of the vertex to analyze. Returns Type Description Point3D Vertex point. Remarks This method is available since v7.7. GetVertices(ElementId) Gets the vertices of a shape. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetVertices(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Returns Type Description List < ElementItemId > Identifiers of the vertices of the shape. Remarks This method is available since v7.7. IsEdgeReversed(ElementItemId) Tells whether an edge is reversed. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsEdgeReversed(ElementItemId inEdgeId) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. Returns Type Description System.Boolean Whether the orientation of the edge is the opposite to the parametric orientation of its attached curve. Remarks This method is available since v7.7. IsEdgeSmooth(ElementItemId, Double) Tells whether an edge is smooth. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsEdgeSmooth(ElementItemId inEdgeId, double inAngle) Parameters Type Name Description ElementItemId inEdgeId Identifier of the edge to analyze. System.Double inAngle Maximum angle between face normals along the edge. Returns Type Description System.Boolean Whether the edge is smooth at the specified angle tolerance. Remarks This method is available since v7.7. IsFaceReversed(ElementItemId) Tells whether a face is reversed. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsFaceReversed(ElementItemId inFaceId) Parameters Type Name Description ElementItemId inFaceId Identifier of the face to analyze. Returns Type Description System.Boolean Whether the orientation of the face is the opposite to the parametric orientation of its attached surface. Remarks This method is available since v7.7. MakeShapeItemGeometryAnalysis(ElementItemId, Int32, out List<String>, out List<String>) Make the geometry analysis of a shape item. Declaration [AvailableSinceVersion(7, 14, 0, 0)] void MakeShapeItemGeometryAnalysis(ElementItemId inItemId, int inDecimalDigits, out List<string> outNames, out List<string> outResults) Parameters Type Name Description ElementItemId inItemId Identifier of the shape item to analyze. System.Int32 inDecimalDigits Maximum number of digits after the decimal separator for unit-less values. List < System.String > outNames Analyses localized names (i.e. \"Radius\", \"Length\", ...). List < System.String > outResults Analyses localized corresponding results. Remarks All units of results are in the unit defined by the document. This method is available since v7.14. PublishShape(DocumentId, String, SmartShape) Creates a shape publishing entity in a document. Declaration [AvailableSinceVersion(7, 8, 302, 80)] ElementId PublishShape(DocumentId inDocumentId, string inDescription, SmartShape inDefinition) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inDescription Publishing description. SmartShape inDefinition Publishing definition. Returns Type Description ElementId Identifier of the created publishing entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8.302.80. SearchFaceWithRay(ElementId, Axis3D, Boolean, Boolean, out Point3D) Searches for the first face of a shape that intersects an axis. Declaration [AvailableSinceVersion(7, 7, 0, 0)] ElementItemId SearchFaceWithRay(ElementId inElementId, Axis3D inAxis, bool inUsesHalfAxis, bool inUsesApproximation, out Point3D outIntersection) Parameters Type Name Description ElementId inElementId Identifier of the shape entity to analyze. Axis3D inAxis Intersection axis. System.Boolean inUsesHalfAxis Whether to consider only the part of the axis after its origin. System.Boolean inUsesApproximation Whether to use approximation for faster and less precise result. Point3D outIntersection Intersection point, if intersection found. Returns Type Description ElementItemId Identifier of the first face of the specified shape that intersects the specified axis, or Empty if no intersection found. Remarks This method is available since v7.7. SetShapePublishingDefinition(ElementId, SmartShape) Sets the definition of a shape publishing entity. Declaration [AvailableSinceVersion(7, 8, 302, 80)] void SetShapePublishingDefinition(ElementId inElementId, SmartShape inDefinition) Parameters Type Name Description ElementId inElementId Identifier of the publishing entity to modify. SmartShape inDefinition Publishing new definition. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.8.302.80."
  },
  "api/kernel/TopSolid.Kernel.Automating.ISketches2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ISketches2D.html",
    "title": "Interface ISketches2D | TopSolid Automation website",
    "keywords": "Interface ISketches2D Gives access to 2D sketch entities. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface ISketches2D Remarks This interface is available since v7.6. Properties ModifiedSketch Gets the sketch being modified. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementId ModifiedSketch { get; } Property Value Type Description ElementId Remarks If there is no sketch being modified, Empty is returned. This property is available since v7.7.201.80. Methods CreateArcSegment(ElementItemId, ElementItemId, Point2D, Boolean) Creates a new circular arc segment into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateArcSegment(ElementItemId inStartVertexId, ElementItemId inEndVertexId, Point2D inCenter, bool inTurnsClockwise) Parameters Type Name Description ElementItemId inStartVertexId Identifier of the start vertex. ElementItemId inEndVertexId Identifier of the end vertex. Point2D inCenter Circle center. System.Boolean inTurnsClockwise Turns clockwise around the center when going form start to end if true , anti-clockwise otherwise. Returns Type Description ElementItemId Identifier of the created segment. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. CreateBSplineSegment(List<ElementItemId>, Boolean) Creates a new uniform cubic B-spline segment into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementItemId CreateBSplineSegment(List<ElementItemId> inVertexIds, bool inIsPeriodic) Parameters Type Name Description List < ElementItemId > inVertexIds Identifiers of the vertices defining the B-spline control points. System.Boolean inIsPeriodic Whether the B-spline is periodic. Returns Type Description ElementItemId Identifier of the created segment. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.8. CreateBuildingOperation(ElementId) Creates the building operation of a sketch entity. Declaration [AvailableSinceVersion(7, 11, 0, 0)] ElementId CreateBuildingOperation(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity. Returns Type Description ElementId Identifier of the created building operation. Remarks If the sketch entity has already got a building operation, this method does nothing and returns the identifier of the existing building operation. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.11. CreateCircleSegment(ElementItemId, Double) Creates a new circle segment into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateCircleSegment(ElementItemId inCenterVertexId, double inRadius) Parameters Type Name Description ElementItemId inCenterVertexId Identifier of the center vertex. System.Double inRadius Circle radius. Returns Type Description ElementItemId Identifier of the created segment. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. CreateLineSegment(ElementItemId, ElementItemId) Creates a new line segment into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateLineSegment(ElementItemId inStartVertexId, ElementItemId inEndVertexId) Parameters Type Name Description ElementItemId inStartVertexId Identifier of the start vertex. ElementItemId inEndVertexId Identifier of the end vertex. Returns Type Description ElementItemId Identifier of the created segment. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. CreateProfile(List<ElementItemId>) Creates a new profile into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateProfile(List<ElementItemId> inSegmentIds) Parameters Type Name Description List < ElementItemId > inSegmentIds Identifiers of the segments of the profile. Returns Type Description ElementItemId Identifier of the created profile. Remarks The end vertex of each segment must be the same than the start vertex of the following one. StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. CreateRevolvedSilhouette(SmartShape, SmartAxis3D, Boolean) Creates the revolved silhouette of a shape. Declaration [AvailableSinceVersion(7, 15, 400, 100)] ElementId CreateRevolvedSilhouette(SmartShape inShape, SmartAxis3D inAxis, bool inMerge) Parameters Type Name Description SmartShape inShape Identifier of the shape to analyze. SmartAxis3D inAxis Identifier of the revolution axis. System.Boolean inMerge Tells whether the silhouette must be merged. Returns Type Description ElementId Identifier of the revolved silhouette operation. Remarks StartModification(ElementId) must be called before calling this method. This method must be called inside a Building Operation. This method is available since v7.15.400.100. CreateSection(List<ElementItemId>) Creates a new section into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateSection(List<ElementItemId> inProfileIds) Parameters Type Name Description List < ElementItemId > inProfileIds Identifiers of the profiles of the section. Returns Type Description ElementItemId Identifier of the created section. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. CreateSketchIn2D(DocumentId, SmartPoint2D, Boolean, SmartDirection2D) Creates a sketch in a 2D document. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementId CreateSketchIn2D(DocumentId inDocumentId, SmartPoint2D inOrigin, bool inDefinesXDirection, SmartDirection2D inDirection) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartPoint2D inOrigin Origin point. System.Boolean inDefinesXDirection Defines the X direction if true , otherwise defines the Y direction if false . SmartDirection2D inDirection Reference X or Y direction. Returns Type Description ElementId Identifier of the created sketch entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.80. This method does not create a building operation anymore since v7.11. CreateSketchIn3D(DocumentId, SmartPlane3D, SmartPoint3D, Boolean, SmartDirection3D) Creates a sketch in a 3D document. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementId CreateSketchIn3D(DocumentId inDocumentId, SmartPlane3D inPlane, SmartPoint3D inOrigin, bool inDefinesXDirection, SmartDirection3D inDirection) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartPlane3D inPlane Support plane. SmartPoint3D inOrigin Origin point. System.Boolean inDefinesXDirection Defines the X direction if true , otherwise defines the Y direction if false . SmartDirection3D inDirection Reference X or Y direction. Returns Type Description ElementId Identifier of the created sketch entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.80. This method does not create a building operation anymore since v7.11. CreateVertex(Point2D) Creates a new vertex into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateVertex(Point2D inPoint) Parameters Type Name Description Point2D inPoint Vertex point. Returns Type Description ElementItemId Identifier of the created vertex. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. DeleteItem(ElementItemId) Deletes an item of the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void DeleteItem(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the item to delete. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. DeleteItems(List<ElementItemId>) Deletes items of the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void DeleteItems(List<ElementItemId> inItemIds) Parameters Type Name Description List < ElementItemId > inItemIds Identifiers of the items to delete. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. EndModification() Ends performing modifications on a sketch. Declaration [AvailableSinceVersion(7, 7, 201, 80)] void EndModification() Remarks This method must be called after the StartModification(ElementId) method has been called. This method is available since v7.7.201.80. FixItem(ElementItemId) Fix a segment or a vertex in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void FixItem(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to fix. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. GetBuildingOperation(ElementId) Gets the building operation of a sketch entity. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementId GetBuildingOperation(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description ElementId Identifier of the building operation, or Empty if the sketch does not have a building operation. Remarks This method is available since v7.7.201.80. GetFrame(ElementId) Gets the definition frame of a sketch in a 2D document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Frame2D GetFrame(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description Frame2D Definition frame of the sketch. Remarks This method is available since v7.6. GetPlane(ElementId) Gets the definition plane of a sketch in a 3D document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Plane3D GetPlane(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description Plane3D Definition plane of the sketch. Remarks This method is available since v7.6. GetProfileCount(ElementId) Gets the number of profiles of a sketch. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetProfileCount(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description System.Int32 Number of profiles of the sketch. Remarks This method is available since v7.6. GetProfiles(ElementId) Gets the profiles of a sketch. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetProfiles(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description List < ElementItemId > Identifiers of the profiles of the sketch. Remarks This method is available since v7.7. GetProfileSegments(ElementItemId) Gets the segments of a profile. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetProfileSegments(ElementItemId inProfileId) Parameters Type Name Description ElementItemId inProfileId Identifier of the profile to analyze. Returns Type Description List < ElementItemId > Identifiers of the segments of the profile. Remarks This method is available since v7.7. GetSectionCount(ElementId) Gets the number of sections of a sketch. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetSectionCount(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description System.Int32 Number of sections of the sketch. Remarks This method is available since v7.6. GetSectionProfiles(ElementItemId) Gets the profiles of a section. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetSectionProfiles(ElementItemId inSectionId) Parameters Type Name Description ElementItemId inSectionId Identifier of the section to analyze. Returns Type Description List < ElementItemId > Identifiers of the profiles of the section. Remarks This method is available since v7.7. GetSections(ElementId) Gets the sections of a sketch. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetSections(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description List < ElementItemId > Identifiers of the sections of the sketch. Remarks This method is available since v7.7. GetSegmentCenter(ElementItemId) Gets the center of a segment. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId GetSegmentCenter(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Returns Type Description ElementItemId Identifier of the vertex defined as being the center of the segment, or Empty if none. Remarks A center may only be defined when the segment curve is a circle or an ellipse. This method is available since v7.7.201.80. GetSegmentCircleCurve(ElementItemId, out Frame2D, out Double) Gets the circle curve attached to a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetSegmentCircleCurve(ElementItemId inSegmentId, out Frame2D outFrame, out double outRadius) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Frame2D outFrame Circle frame. System.Double outRadius Circle radius. Remarks This method is available since v7.7. GetSegmentCount(ElementId) Gets the number of segments of a sketch. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetSegmentCount(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description System.Int32 Number of segments of the sketch. Remarks This method is available since v7.6. GetSegmentCurveRange(ElementItemId, out Double, out Double) Gets the parametric range of the curve attached to a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetSegmentCurveRange(ElementItemId inSegmentId, out double outTs, out double outTe) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. System.Double outTs Start parameter value. System.Double outTe End parameter value. Remarks This method is available since v7.7. GetSegmentCurveType(ElementItemId) Gets the type of the curve attached to a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] CurveType GetSegmentCurveType(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Returns Type Description CurveType Type of the curve attached to the segment. Remarks This method is available since v7.7. GetSegmentEllipseCurve(ElementItemId, out Frame2D, out Double, out Double) Gets the ellipse curve attached to a segment. Declaration [AvailableSinceVersion(7, 7, 201, 80)] void GetSegmentEllipseCurve(ElementItemId inSegmentId, out Frame2D outFrame, out double outRadiusX, out double outRadiusY) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Frame2D outFrame Ellipse frame. System.Double outRadiusX Ellipse radius along frame X axis. System.Double outRadiusY Ellipse radius along frame Y axis. Remarks This method is available since v7.7.201.80. GetSegmentLineCurve(ElementItemId, out Axis2D) Gets the line curve attached to a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetSegmentLineCurve(ElementItemId inSegmentId, out Axis2D outAxis) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Axis2D outAxis Line axis. Remarks This method is available since v7.7. GetSegmentMiddle(ElementItemId) Gets the middle of a segment. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId GetSegmentMiddle(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Returns Type Description ElementItemId Identifier of the vertex defined as being the middle of the segment, or Empty if none. Remarks A middle may only be defined when the segment curve is a line. This method is available since v7.7.201.80. GetSegmentPoint(ElementItemId, Double) Gets a point on a segment at a specified parametric value. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Point2D GetSegmentPoint(ElementItemId inSegmentId, double inT) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. System.Double inT Parameter within segment parametric range. Returns Type Description Point2D Point on the segment at the specified parametric value. Remarks This method is available since v7.7. GetSegmentRange(ElementItemId, out Double, out Double) Gets the parametric range of a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetSegmentRange(ElementItemId inSegmentId, out double outTMin, out double outTMax) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. System.Double outTMin Minimum parametric value. System.Double outTMax Maximum parametric value. Remarks This method is available since v7.7. GetSegments(ElementId) Gets the segments of a sketch. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetSegments(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description List < ElementItemId > Identifiers of the segments of the sketch. Remarks This method is available since v7.7. GetSegmentTangent(ElementItemId, Double) Gets the tangent of a segment at a specified parametric value. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Direction2D GetSegmentTangent(ElementItemId inSegmentId, double inT) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. System.Double inT Parameter within segment parametric range. Returns Type Description Direction2D Tangent to the segment at the specified parametric value. Remarks If the segment is reversed, the orientation of the tangent is the opposite to the parametric first derivative. This method is available since v7.7. GetSegmentVertices(ElementItemId, out ElementItemId, out ElementItemId) Gets the vertices of a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetSegmentVertices(ElementItemId inSegmentId, out ElementItemId outStartVertexId, out ElementItemId outEndVertexId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. ElementItemId outStartVertexId Identifier of the start vertex, or Empty if none. ElementItemId outEndVertexId Identifier of the end vertex, or Empty if none. Remarks This method is available since v7.7. GetSketches(DocumentId) Gets the sketches entities that are in the sketches folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetSketches(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Sketch entities found. Remarks This method is available since v7.6. GetSketchesFolder(DocumentId) Gets the sketches folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetSketchesFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the sketches folder entity found. Remarks This method is available since v7.10. GetVertexCount(ElementId) Gets the number of vertices of a sketch. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetVertexCount(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description System.Int32 Number of vertices of the sketch. Remarks This method is available since v7.6. GetVertexPoint(ElementItemId) Gets the point attached to a vertex. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Point2D GetVertexPoint(ElementItemId inVertexId) Parameters Type Name Description ElementItemId inVertexId Identifier of the vertex to analyze. Returns Type Description Point2D Vertex point. Remarks This method is available since v7.7. GetVertices(ElementId) Gets the vertices of a sketch. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetVertices(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description List < ElementItemId > Identifiers of the vertices of the sketch. Remarks This method is available since v7.7. IsItemFixed(ElementItemId) Tells whether a segment or a vertex is fixed. Declaration [AvailableSinceVersion(7, 7, 201, 80)] bool IsItemFixed(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to analyze. Returns Type Description System.Boolean Whether the segment or the vertex is fixed. Remarks This method is available since v7.7.201.80. IsItemInternal(ElementItemId) Tells whether a segment or a vertex is internal. Declaration [AvailableSinceVersion(7, 7, 201, 80)] bool IsItemInternal(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to analyze. Returns Type Description System.Boolean Whether the segment or the vertex is internal. Remarks This method is available since v7.7.201.80. IsProfileClosed(ElementItemId) Tells whether a profile is closed. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsProfileClosed(ElementItemId inProfileId) Parameters Type Name Description ElementItemId inProfileId Identifier of the profile to analyze. Returns Type Description System.Boolean Whether the profile is closed. Remarks This method is available since v7.7. IsSegmentConstruction(ElementItemId) Tells whether a segment is construction. Declaration [AvailableSinceVersion(7, 7, 201, 80)] bool IsSegmentConstruction(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Returns Type Description System.Boolean Whether the segment is construction. Remarks This method is available since v7.7.201.80. IsSegmentReversed(ElementItemId) Tells whether a segment is reversed. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsSegmentReversed(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Returns Type Description System.Boolean Whether the orientation of the segment is the opposite to the parametric orientation of its attached curve. Remarks This method is available since v7.7. IsSketch(ElementId) Tells whether an element is a sketch entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsSketch(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element a sketch entity. Remarks This method is available since v7.6. IsVertexTemporary(ElementItemId) Tells whether a vertex is temporary. Declaration [AvailableSinceVersion(7, 7, 201, 80)] bool IsVertexTemporary(ElementItemId inVertexId) Parameters Type Name Description ElementItemId inVertexId Identifier of the vertex to analyze. Returns Type Description System.Boolean Whether the vertex is temporary. Remarks This method is available since v7.7.201.80. MakeItemInternal(ElementItemId) Makes a segment or a vertex internal in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeItemInternal(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. MakeItemNotInternal(ElementItemId) Makes a segment or a vertex not internal in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeItemNotInternal(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. MakeSegmentConstruction(ElementItemId) Makes a segment construction in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeSegmentConstruction(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. MakeSegmentNotConstruction(ElementItemId) Makes a segment not construction in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeSegmentNotConstruction(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. MakeVertexNotTemporary(ElementItemId) Makes a vertex not temporary in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeVertexNotTemporary(ElementItemId inVertexId) Parameters Type Name Description ElementItemId inVertexId Identifier of the vertex to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. MakeVertexTemporary(ElementItemId) Makes a vertex temporary in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeVertexTemporary(ElementItemId inVertexId) Parameters Type Name Description ElementItemId inVertexId Identifier of the vertex to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. SetSegmentCenter(ElementItemId, ElementItemId) Sets the center of a segment in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void SetSegmentCenter(ElementItemId inSegmentId, ElementItemId inVertexId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to modify. ElementItemId inVertexId Identifier of the vertex defined as being the center of the segment, or Empty if none. Remarks A center may only be defined when the segment curve is a circle or an ellipse. StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. SetSegmentMiddle(ElementItemId, ElementItemId) Sets the middle of a segment in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void SetSegmentMiddle(ElementItemId inSegmentId, ElementItemId inVertexId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to modify. ElementItemId inVertexId Identifier of the vertex defined as being the middle of the segment, or Empty if none. Remarks A middle may only be defined when the segment curve is a line. StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. StartModification(ElementId) Starts performing modifications on a sketch. Declaration [AvailableSinceVersion(7, 7, 201, 80)] void StartModification(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to modify. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.80. UnfixItem(ElementItemId) Unfix a segment or a vertex in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void UnfixItem(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to unfix. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80."
  },
  "api/kernel/TopSolid.Kernel.Automating.ISketches3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ISketches3D.html",
    "title": "Interface ISketches3D | TopSolid Automation website",
    "keywords": "Interface ISketches3D Gives access to 3D sketch entities. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface ISketches3D Remarks This interface is available since v7.6. Properties ModifiedSketch Gets the sketch being modified. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementId ModifiedSketch { get; } Property Value Type Description ElementId Remarks If there is no sketch being modified, Empty is returned. This property is available since v7.7.201.80. Methods CreateArcSegment(ElementItemId, ElementItemId, Point3D, Direction3D) Creates a new circular arc segment into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateArcSegment(ElementItemId inStartVertexId, ElementItemId inEndVertexId, Point3D inCenter, Direction3D inNormal) Parameters Type Name Description ElementItemId inStartVertexId Identifier of the start vertex. ElementItemId inEndVertexId Identifier of the end vertex. Point3D inCenter Circle center. Direction3D inNormal Circle plane normal direction. Returns Type Description ElementItemId Identifier of the created segment. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. CreateBSplineSegment(List<ElementItemId>, Boolean) Creates a new uniform cubic B-spline segment into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 8, 0, 0)] ElementItemId CreateBSplineSegment(List<ElementItemId> inVertexIds, bool inIsPeriodic) Parameters Type Name Description List < ElementItemId > inVertexIds Identifiers of the vertices defining the B-spline control points. System.Boolean inIsPeriodic Whether the B-spline is periodic. Returns Type Description ElementItemId Identifier of the created segment. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.8. CreateBuildingOperation(ElementId) Creates the building operation of a sketch entity. Declaration [AvailableSinceVersion(7, 11, 0, 0)] ElementId CreateBuildingOperation(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity. Returns Type Description ElementId Identifier of the created building operation. Remarks If the sketch entity has already got a building operation, this method does nothing and returns the identifier of the existing building operation. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.11. CreateCircleSegment(ElementItemId, Direction3D, Double) Creates a new circle segment into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateCircleSegment(ElementItemId inCenterVertexId, Direction3D inNormal, double inRadius) Parameters Type Name Description ElementItemId inCenterVertexId Identifier of the center vertex. Direction3D inNormal Circle plane normal direction. System.Double inRadius Circle radius. Returns Type Description ElementItemId Identifier of the created segment. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. CreateLineSegment(ElementItemId, ElementItemId) Creates a new line segment into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateLineSegment(ElementItemId inStartVertexId, ElementItemId inEndVertexId) Parameters Type Name Description ElementItemId inStartVertexId Identifier of the start vertex. ElementItemId inEndVertexId Identifier of the end vertex. Returns Type Description ElementItemId Identifier of the created segment. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. CreateProfile(List<ElementItemId>) Creates a new profile into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateProfile(List<ElementItemId> inSegmentIds) Parameters Type Name Description List < ElementItemId > inSegmentIds Identifiers of the segments of the profile. Returns Type Description ElementItemId Identifier of the created profile. Remarks The end vertex of each segment must be the same than the start vertex of the following one. StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. CreateSketch(DocumentId, SmartPlane3D, SmartPoint3D, Boolean, SmartDirection3D) Creates a sketch. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementId CreateSketch(DocumentId inDocumentId, SmartPlane3D inPlane, SmartPoint3D inOrigin, bool inDefinesXDirection, SmartDirection3D inDirection) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. SmartPlane3D inPlane Support plane. SmartPoint3D inOrigin Origin point. System.Boolean inDefinesXDirection Defines the X direction if true , otherwise defines the Y direction if false . SmartDirection3D inDirection Reference X or Y direction. Returns Type Description ElementId Identifier of the created sketch entity. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.80. This method does not create a building operation anymore since v7.11. CreateVertex(Point3D) Creates a new vertex into the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId CreateVertex(Point3D inPoint) Parameters Type Name Description Point3D inPoint Vertex point. Returns Type Description ElementItemId Identifier of the created vertex. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. DeleteItem(ElementItemId) Deletes an item of the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void DeleteItem(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the item to delete. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. DeleteItems(List<ElementItemId>) Deletes items of the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void DeleteItems(List<ElementItemId> inItemIds) Parameters Type Name Description List < ElementItemId > inItemIds Identifiers of the items to delete. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. EndModification() Ends performing modifications on a sketch. Declaration [AvailableSinceVersion(7, 7, 201, 80)] void EndModification() Remarks This method must be called after the StartModification(ElementId) method has been called. This method is available since v7.7.201.80. FixItem(ElementItemId) Fix a segment or a vertex in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void FixItem(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to fix. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. GetBuildingOperation(ElementId) Gets the building operation of a sketch entity. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementId GetBuildingOperation(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description ElementId Identifier of the building operation, or Empty if the sketch does not have a building operation. Remarks This method is available since v7.7.201.80. GetFrame(ElementId) Gets the definition frame of a sketch. Declaration [AvailableSinceVersion(7, 6, 0, 0)] Frame3D GetFrame(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description Frame3D Definition frame of the sketch. Remarks This method is available since v7.6. GetProfileCount(ElementId) Gets the number of profiles of a sketch. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetProfileCount(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description System.Int32 Number of profiles of the sketch. Remarks This method is available since v7.6. GetProfiles(ElementId) Gets the profiles of a sketch. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetProfiles(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description List < ElementItemId > Identifiers of the profiles of the sketch. Remarks This method is available since v7.7. GetProfileSegments(ElementItemId) Gets the segments of a profile. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetProfileSegments(ElementItemId inProfileId) Parameters Type Name Description ElementItemId inProfileId Identifier of the profile to analyze. Returns Type Description List < ElementItemId > Identifiers of the segments of the profile. Remarks This method is available since v7.7. GetSegmentCenter(ElementItemId) Gets the center of a segment. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId GetSegmentCenter(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Returns Type Description ElementItemId Identifier of the vertex defined as being the center of the segment, or Empty if none. Remarks A center may only be defined when the segment curve is a circle or an ellipse. This method is available since v7.7.201.80. GetSegmentCircleCurve(ElementItemId, out Plane3D, out Double) Gets the circle curve attached to a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetSegmentCircleCurve(ElementItemId inSegmentId, out Plane3D outPlane, out double outRadius) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Plane3D outPlane Circle plane. System.Double outRadius Circle radius. Remarks This method is available since v7.7. GetSegmentCount(ElementId) Gets the number of segments of a sketch. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetSegmentCount(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description System.Int32 Number of segments of the sketch. Remarks This method is available since v7.6. GetSegmentCurveRange(ElementItemId, out Double, out Double) Gets the parametric range of the curve attached to a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetSegmentCurveRange(ElementItemId inSegmentId, out double outTs, out double outTe) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. System.Double outTs Start parameter value. System.Double outTe End parameter value. Remarks This method is available since v7.7. GetSegmentCurveType(ElementItemId) Gets the type of the curve attached to a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] CurveType GetSegmentCurveType(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Returns Type Description CurveType Type of the curve attached to the segment. Remarks This method is available since v7.7. GetSegmentEllipseCurve(ElementItemId, out Plane3D, out Double, out Double) Gets the ellipse curve attached to a segment. Declaration [AvailableSinceVersion(7, 7, 201, 80)] void GetSegmentEllipseCurve(ElementItemId inSegmentId, out Plane3D outPlane, out double outRadiusX, out double outRadiusY) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Plane3D outPlane Ellipse plane. System.Double outRadiusX Ellipse radius along plane X axis. System.Double outRadiusY Ellipse radius along plane Y axis. Remarks This method is available since v7.7.201.80. GetSegmentLineCurve(ElementItemId, out Axis3D) Gets the line curve attached to a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetSegmentLineCurve(ElementItemId inSegmentId, out Axis3D outAxis) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Axis3D outAxis Line axis. Remarks This method is available since v7.7. GetSegmentMiddle(ElementItemId) Gets the middle of a segment. Declaration [AvailableSinceVersion(7, 7, 201, 80)] ElementItemId GetSegmentMiddle(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Returns Type Description ElementItemId Identifier of the vertex defined as being the middle of the segment, or Empty if none. Remarks A middle may only be defined when the segment curve is a line. This method is available since v7.7.201.80. GetSegmentPoint(ElementItemId, Double) Gets a point on a segment at a specified parametric value. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Point3D GetSegmentPoint(ElementItemId inSegmentId, double inT) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. System.Double inT Parameter within segment parametric range. Returns Type Description Point3D Point on the segment at the specified parametric value. Remarks This method is available since v7.7. GetSegmentRange(ElementItemId, out Double, out Double) Gets the parametric range of a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetSegmentRange(ElementItemId inSegmentId, out double outTMin, out double outTMax) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. System.Double outTMin Minimum parametric value. System.Double outTMax Maximum parametric value. Remarks This method is available since v7.7. GetSegments(ElementId) Gets the segments of a sketch. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetSegments(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description List < ElementItemId > Identifiers of the segments of the sketch. Remarks This method is available since v7.7. GetSegmentTangent(ElementItemId, Double) Gets the tangent of a segment at a specified parametric value. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Direction3D GetSegmentTangent(ElementItemId inSegmentId, double inT) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. System.Double inT Parameter within segment parametric range. Returns Type Description Direction3D Tangent to the segment at the specified parametric value. Remarks If the segment is reversed, the orientation of the tangent is the opposite to the parametric first derivative. This method is available since v7.7. GetSegmentVertices(ElementItemId, out ElementItemId, out ElementItemId) Gets the vertices of a segment. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetSegmentVertices(ElementItemId inSegmentId, out ElementItemId outStartVertexId, out ElementItemId outEndVertexId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. ElementItemId outStartVertexId Identifier of the start vertex, or Empty if none. ElementItemId outEndVertexId Identifier of the end vertex, or Empty if none. Remarks This method is available since v7.7. GetSketches(DocumentId) Gets the sketches entities that are in the sketches folder of a document. Declaration [AvailableSinceVersion(7, 6, 0, 0)] List<ElementId> GetSketches(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Sketch entities found. Remarks This method is available since v7.6. GetSketchesFolder(DocumentId) Gets the sketches folder entity of a document. Declaration [AvailableSinceVersion(7, 10, 0, 0)] ElementId GetSketchesFolder(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the sketches folder entity found. Remarks This method is available since v7.10. GetVertexCount(ElementId) Gets the number of vertices of a sketch. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetVertexCount(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description System.Int32 Number of vertices of the sketch. Remarks This method is available since v7.6. GetVertexPoint(ElementItemId) Gets the point attached to a vertex. Declaration [AvailableSinceVersion(7, 7, 0, 0)] Point3D GetVertexPoint(ElementItemId inVertexId) Parameters Type Name Description ElementItemId inVertexId Identifier of the vertex to analyze. Returns Type Description Point3D Vertex point. Remarks This method is available since v7.7. GetVertices(ElementId) Gets the vertices of a sketch. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementItemId> GetVertices(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to analyze. Returns Type Description List < ElementItemId > Identifiers of the vertices of the sketch. Remarks This method is available since v7.7. IsItemFixed(ElementItemId) Tells whether a segment or a vertex is fixed. Declaration [AvailableSinceVersion(7, 7, 201, 80)] bool IsItemFixed(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to analyze. Returns Type Description System.Boolean Whether the segment or the vertex is fixed. Remarks This method is available since v7.7.201.80. IsItemInternal(ElementItemId) Tells whether a segment or a vertex is internal. Declaration [AvailableSinceVersion(7, 7, 201, 80)] bool IsItemInternal(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to analyze. Returns Type Description System.Boolean Whether the segment or the vertex is internal. Remarks This method is available since v7.7.201.80. IsProfileClosed(ElementItemId) Tells whether a profile is closed. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsProfileClosed(ElementItemId inProfileId) Parameters Type Name Description ElementItemId inProfileId Identifier of the profile to analyze. Returns Type Description System.Boolean Whether the profile is closed. Remarks This method is available since v7.7. IsSegmentConstruction(ElementItemId) Tells whether a segment is construction. Declaration [AvailableSinceVersion(7, 7, 201, 80)] bool IsSegmentConstruction(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Returns Type Description System.Boolean Whether the segment is construction. Remarks This method is available since v7.7.201.80. IsSegmentReversed(ElementItemId) Tells whether a segment is reversed. Declaration [AvailableSinceVersion(7, 7, 0, 0)] bool IsSegmentReversed(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to analyze. Returns Type Description System.Boolean Whether the orientation of the segment is the opposite to the parametric orientation of its attached curve. Remarks This method is available since v7.7. IsSketch(ElementId) Tells whether an element is a sketch entity. Declaration [AvailableSinceVersion(7, 6, 0, 0)] bool IsSketch(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the element to analyze. Returns Type Description System.Boolean The element a sketch entity. Remarks This method is available since v7.6. IsVertexTemporary(ElementItemId) Tells whether a vertex is temporary. Declaration [AvailableSinceVersion(7, 7, 201, 80)] bool IsVertexTemporary(ElementItemId inVertexId) Parameters Type Name Description ElementItemId inVertexId Identifier of the vertex to analyze. Returns Type Description System.Boolean Whether the vertex is temporary. Remarks This method is available since v7.7.201.80. MakeItemInternal(ElementItemId) Makes a segment or a vertex internal in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeItemInternal(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. MakeItemNotInternal(ElementItemId) Makes a segment or a vertex not internal in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeItemNotInternal(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. MakeSegmentConstruction(ElementItemId) Makes a segment construction in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeSegmentConstruction(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. MakeSegmentNotConstruction(ElementItemId) Makes a segment not construction in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeSegmentNotConstruction(ElementItemId inSegmentId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. MakeVertexNotTemporary(ElementItemId) Makes a vertex not temporary in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeVertexNotTemporary(ElementItemId inVertexId) Parameters Type Name Description ElementItemId inVertexId Identifier of the vertex to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. MakeVertexTemporary(ElementItemId) Makes a vertex temporary in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void MakeVertexTemporary(ElementItemId inVertexId) Parameters Type Name Description ElementItemId inVertexId Identifier of the vertex to modify. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. SetSegmentCenter(ElementItemId, ElementItemId) Sets the center of a segment in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void SetSegmentCenter(ElementItemId inSegmentId, ElementItemId inVertexId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to modify. ElementItemId inVertexId Identifier of the vertex defined as being the center of the segment, or Empty if none. Remarks A center may only be defined when the segment curve is a circle or an ellipse. StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. SetSegmentMiddle(ElementItemId, ElementItemId) Sets the middle of a segment in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void SetSegmentMiddle(ElementItemId inSegmentId, ElementItemId inVertexId) Parameters Type Name Description ElementItemId inSegmentId Identifier of the segment to modify. ElementItemId inVertexId Identifier of the vertex defined as being the middle of the segment, or Empty if none. Remarks A middle may only be defined when the segment curve is a line. StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80. StartModification(ElementId) Starts performing modifications on a sketch. Declaration [AvailableSinceVersion(7, 7, 201, 80)] void StartModification(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of the sketch entity to modify. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7.201.80. UnfixItem(ElementItemId) Unfix a segment or a vertex in the ModifiedSketch . Declaration [AvailableSinceVersion(7, 7, 201, 80)] void UnfixItem(ElementItemId inItemId) Parameters Type Name Description ElementItemId inItemId Identifier of the segment or the vertex to unfix. Remarks StartModification(ElementId) must be called before calling this method. This method is available since v7.7.201.80."
  },
  "api/kernel/TopSolid.Kernel.Automating.ItemLabel.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ItemLabel.html",
    "title": "Struct ItemLabel | TopSolid Automation website",
    "keywords": "Struct ItemLabel Represents an element item label. Implements System.IEquatable < ItemLabel > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct ItemLabel : IEquatable<ItemLabel> Remarks An item label uniquely identifies an item within a specified element. This structure is available since v7.6. Constructors ItemLabel(Byte, Int32, String, String) Initializes a new instance of the ItemLabel structure. Declaration public ItemLabel(byte inType, int inId, string inMoniker, string inName) Parameters Type Name Description System.Byte inType Type of item, or 0 if none. System.Int32 inId Identifier of the item within its element, or 0 if empty. System.String inMoniker Moniker associated to the item that will survive some modification. System.String inName Item name, or null if none. Fields Empty Empty label. Declaration public static readonly ItemLabel Empty Field Value Type Description ItemLabel Frame2DOrigin Label of 2D frame origin. Declaration public static readonly ItemLabel Frame2DOrigin Field Value Type Description ItemLabel Frame2DXAxis Label of 2D frame X axis. Declaration public static readonly ItemLabel Frame2DXAxis Field Value Type Description ItemLabel Frame2DYAxis Label of 2D frame Y axis. Declaration public static readonly ItemLabel Frame2DYAxis Field Value Type Description ItemLabel Frame3DOrigin Label of 3D frame origin. Declaration public static readonly ItemLabel Frame3DOrigin Field Value Type Description ItemLabel Frame3DXAxis Label of 3D frame X axis. Declaration public static readonly ItemLabel Frame3DXAxis Field Value Type Description ItemLabel Frame3DXYPlane Label of 3D frame XY plane. Declaration public static readonly ItemLabel Frame3DXYPlane Field Value Type Description ItemLabel Frame3DXZPlane Label of 3D frame XZ plane. Declaration public static readonly ItemLabel Frame3DXZPlane Field Value Type Description ItemLabel Frame3DYAxis Label of 3D frame Y axis. Declaration public static readonly ItemLabel Frame3DYAxis Field Value Type Description ItemLabel Frame3DYZPlane Label of 3D frame YZ plane. Declaration public static readonly ItemLabel Frame3DYZPlane Field Value Type Description ItemLabel Frame3DZAxis Label of 3D frame Z axis. Declaration public static readonly ItemLabel Frame3DZAxis Field Value Type Description ItemLabel Properties Id Gets the identifier of the item within its element, or 0 if empty. Declaration public readonly int Id { get; } Property Value Type Description System.Int32 IsEmpty Tells whether the item label is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean Moniker Gets the moniker associated to the item. Declaration public readonly string Moniker { get; } Property Value Type Description System.String Name Gets the item name. Declaration public readonly string Name { get; } Property Value Type Description System.String Type Gets the type of the item, or 0 if none. Declaration public readonly byte Type { get; } Property Value Type Description System.Byte Remarks Some types are defined in the ItemType enum. Methods Equals(Object) Declaration public override bool Equals(object inObject) Parameters Type Name Description System.Object inObject Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(ItemLabel) Declaration public bool Equals(ItemLabel other) Parameters Type Name Description ItemLabel other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators Equality(ItemLabel, ItemLabel) Tells whether two item labels are equal. Declaration public static bool operator ==(ItemLabel inItemLabel1, ItemLabel inItemLabel2) Parameters Type Name Description ItemLabel inItemLabel1 First item label. ItemLabel inItemLabel2 Second item label. Returns Type Description System.Boolean Item labels are equal. Inequality(ItemLabel, ItemLabel) Tells whether two item labels are different. Declaration public static bool operator !=(ItemLabel inItemLabel1, ItemLabel inItemLabel2) Parameters Type Name Description ItemLabel inItemLabel1 First item label. ItemLabel inItemLabel2 Second item label. Returns Type Description System.Boolean Item labels are different. Implements System.IEquatable<T>"
  },
  "api/kernel/TopSolid.Kernel.Automating.ItemType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ItemType.html",
    "title": "Enum ItemType | TopSolid Automation website",
    "keywords": "Enum ItemType Defines various types of element items. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 10, 300, 60)] public enum ItemType Remarks This enum is available since v7.10.300.60. Fields Name Description None No element item. ShapeEdge Shape edge. ShapeFace Shape face. ShapeVertex Shape vertex. SketchBlock Sketch block. SketchGroup Sketch group. SketchProfile Sketch profile. SketchSection Sketch section. SketchSegment Sketch segment. SketchSurface Sketch surface. SketchVertex Sketch vertex."
  },
  "api/kernel/TopSolid.Kernel.Automating.ITextures.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ITextures.html",
    "title": "Interface ITextures | TopSolid Automation website",
    "keywords": "Interface ITextures Gives access to methods to read or write in a texture document. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 16, 0, 0)] public interface ITextures Remarks This interface is available since v7.16. Methods GetAngularScale(DocumentId) Gets the angular scale. Declaration [AvailableSinceVersion(7, 16, 400, 100)] double GetAngularScale(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description System.Double Remarks This method must be called for Cylindrical or Spherical type. This method is available since v7.16. GetCategory(DocumentId) Gets the texture category of a texture document. Declaration [AvailableSinceVersion(7, 16, 0, 0)] TextureCategoryType GetCategory(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description TextureCategoryType The texture category. Remarks This method is available since v7.16. GetMapping(DocumentId) Gets the texture mapping type of a texture document. Declaration [AvailableSinceVersion(7, 16, 0, 0)] TextureMappingType GetMapping(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description TextureMappingType The texture mapping type. Remarks This method is available since v7.16. GetRedWayRotationAngle(DocumentId) Gets the RedWay rotation angle. Declaration [AvailableSinceVersion(7, 16, 400, 100)] double GetRedWayRotationAngle(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description System.Double Remarks This method is available since v7.16. GetTextureScale(DocumentId) Gets the texture scale. Declaration [AvailableSinceVersion(7, 16, 400, 100)] double GetTextureScale(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description System.Double Remarks This method is available since v7.16. GetTransparentColor(DocumentId) Gets the texture transparent color. Declaration [AvailableSinceVersion(7, 16, 400, 100)] Color GetTransparentColor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description Color Remarks This method is available since v7.16. GetVerticalAngularScale(DocumentId) Gets the vertical angular scale. Declaration [AvailableSinceVersion(7, 16, 400, 100)] double GetVerticalAngularScale(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description System.Double Remarks This method must be called for Cylindrical or Spherical type. This method is available since v7.16. GetVerticalScale(DocumentId) Gets the vertical scale. Declaration [AvailableSinceVersion(7, 16, 400, 100)] double GetVerticalScale(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description System.Double Remarks This method must be called for Cylindrical or RedWay type. This method is available since v7.16. GetWoodColor(DocumentId) Gets the wood color. Declaration [AvailableSinceVersion(7, 16, 400, 100)] Color GetWoodColor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description Color Remarks This method is available since v7.16. GetWoodPerturbation(DocumentId) Gets the wood perturbation or also called Gnarl. Declaration [AvailableSinceVersion(7, 16, 400, 100)] double GetWoodPerturbation(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description System.Double Remarks This method is available since v7.16. GetWoodRingColor(DocumentId) Gets the wood ring color. Declaration [AvailableSinceVersion(7, 16, 400, 100)] Color GetWoodRingColor(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description Color Remarks This method is available since v7.16. GetWoodRingFuzzIn(DocumentId) Gets the wood ring Fuzz-In. Declaration [AvailableSinceVersion(7, 16, 400, 100)] double GetWoodRingFuzzIn(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description System.Double Remarks This method is available since v7.16. GetWoodRingFuzzOut(DocumentId) Gets the wood ring Fuzz-Out. Declaration [AvailableSinceVersion(7, 16, 400, 100)] double GetWoodRingFuzzOut(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description System.Double Remarks This method is available since v7.16. GetWoodRingWidth(DocumentId) Gets the wood ring width. Declaration [AvailableSinceVersion(7, 16, 400, 100)] double GetWoodRingWidth(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyse. Returns Type Description System.Double Remarks This method is available since v7.16. SetAngularScale(DocumentId, Double) Sets the angular scale. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetAngularScale(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks This method must be called for Cylindrical or Spherical type. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetCategory(DocumentId, TextureCategoryType) Sets the texture category of a texture document. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetCategory(DocumentId inDocumentId, TextureCategoryType inTextureCategoryType) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. TextureCategoryType inTextureCategoryType The texture category. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetMapping(DocumentId, TextureMappingType) Sets the texture mapping type of a texture document. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetMapping(DocumentId inDocumentId, TextureMappingType inMappingType) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. TextureMappingType inMappingType Type of the mapping. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetPicture(DocumentId, String) Sets the texture picture. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetPicture(DocumentId inDocumentId, string inPictureFullPath) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inPictureFullPath File path of the picture. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRedWayBumpFile(DocumentId, String) Sets the redway bump file. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetRedWayBumpFile(DocumentId inDocumentId, string inFullPath) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inFullPath File path of the picture. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRedWayColorFile(DocumentId, String) Sets the redway color file. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetRedWayColorFile(DocumentId inDocumentId, string inFullPath) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inFullPath File path of the picture. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRedWayRealisticFile(DocumentId, String) Sets the redway realistic file. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetRedWayRealisticFile(DocumentId inDocumentId, string inFullPath) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inFullPath File path of the picture. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRedWayRealTimeFile(DocumentId, String) Sets the redway real-time file. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetRedWayRealTimeFile(DocumentId inDocumentId, string inFullPath) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inFullPath File path of the picture. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRedWayRotationAngle(DocumentId, Double) Sets the RedWay rotation angle. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetRedWayRotationAngle(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRedWaySpecularityFile(DocumentId, String) Sets the redway specularity file. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetRedWaySpecularityFile(DocumentId inDocumentId, string inFullPath) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inFullPath File path of the picture. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetRedWayTransparencyFile(DocumentId, String) Sets the redway transparency file. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetRedWayTransparencyFile(DocumentId inDocumentId, string inFullPath) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.String inFullPath File path of the picture. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetTextureScale(DocumentId, Double) Sets the texture scale. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetTextureScale(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetTransparentColor(DocumentId, Color) Sets the texture transparent color. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetTransparentColor(DocumentId inDocumentId, Color inColor) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Color inColor Wanted color. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetVerticalAngularScale(DocumentId, Double) Sets the vertical angular scale. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetVerticalAngularScale(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks This method must be called for Cylindrical or Spherical type. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetVerticalScale(DocumentId, Double) Sets the vertical scale. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetVerticalScale(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks This method must be called for Cylindrical or RedWay type. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetWoodColor(DocumentId, Color) Sets the wood color. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetWoodColor(DocumentId inDocumentId, Color inColor) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Color inColor Wanted color. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetWoodPerturbation(DocumentId, Double) Sets the wood perturbation or also called Gnarl. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetWoodPerturbation(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetWoodRingColor(DocumentId, Color) Sets the wood ring color. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetWoodRingColor(DocumentId inDocumentId, Color inColor) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Color inColor Wanted color. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetWoodRingFuzzIn(DocumentId, Double) Sets the wood ring Fuzz-In. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetWoodRingFuzzIn(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetWoodRingFuzzOut(DocumentId, Double) Sets the wood ring Fuzz-Out. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetWoodRingFuzzOut(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16. SetWoodRingWidth(DocumentId, Double) Sets the wood ring width. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SetWoodRingWidth(DocumentId inDocumentId, double inValue) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Double inValue Wanted value. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.16."
  },
  "api/kernel/TopSolid.Kernel.Automating.IUnits.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IUnits.html",
    "title": "Interface IUnits | TopSolid Automation website",
    "keywords": "Interface IUnits Gives access to units. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public interface IUnits Remarks This interface is available since v7.6. Methods ConvertFromSI(UnitType, Int32, Double) Converts a value from SI unit to a specified unit. Declaration [AvailableSinceVersion(7, 6, 0, 0)] double ConvertFromSI(UnitType inUnitType, int inUnitIndex, double inValue) Parameters Type Name Description UnitType inUnitType Unit type. System.Int32 inUnitIndex Unit index. System.Double inValue Value in SI to convert into the specified unit. Returns Type Description System.Double Converted value. Remarks This method is available since v7.6. ConvertToSI(UnitType, Int32, Double) Converts a value from a specified unit to SI unit. Declaration [AvailableSinceVersion(7, 6, 0, 0)] double ConvertToSI(UnitType inUnitType, int inUnitIndex, double inValue) Parameters Type Name Description UnitType inUnitType Unit type. System.Int32 inUnitIndex Unit index. System.Double inValue Value in the specified unit to convert into SI unit. Returns Type Description System.Double Converted value. Remarks This method is available since v7.6. GetUnitCount(UnitType) Gets the number of units of a specified type. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int GetUnitCount(UnitType inUnitType) Parameters Type Name Description UnitType inUnitType Unit type. Returns Type Description System.Int32 Number of available units. Remarks The indexes of the available units go from 0 to Count-1 . This method is available since v7.6. GetUnitSymbol(UnitType, Int32) Gets the symbol of a unit in English. Declaration [AvailableSinceVersion(7, 6, 0, 0)] string GetUnitSymbol(UnitType inUnitType, int inUnitIndex) Parameters Type Name Description UnitType inUnitType Unit type. System.Int32 inUnitIndex Unit index. Returns Type Description System.String Symbol of the unit in English. Remarks This method is available since v7.6. SearchUnit(UnitType, String) Searches for a unit of a specified type and symbol. Declaration [AvailableSinceVersion(7, 6, 0, 0)] int SearchUnit(UnitType inUnitType, string inSymbol) Parameters Type Name Description UnitType inUnitType Unit type. System.String inSymbol Unit symbol in English. Returns Type Description System.Int32 Index of the unit found or -1 if not found. Remarks This method is available since v7.6."
  },
  "api/kernel/TopSolid.Kernel.Automating.IUser.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IUser.html",
    "title": "Interface IUser | TopSolid Automation website",
    "keywords": "Interface IUser Gives access to the user. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public interface IUser Remarks This interface is available since v7.7. Properties SelectedEntity Gets the entity selected by the user. Declaration [AvailableSinceVersion(7, 9, 300, 80)] ElementId SelectedEntity { get; } Property Value Type Description ElementId Remarks If one (and only one) entity is selected by the user, this property returns its identifier, otherwise Empty is returned. This property is available since v7.9.300.80. SelectedOperation Gets the operation selected by the user. Declaration [AvailableSinceVersion(7, 9, 300, 80)] ElementId SelectedOperation { get; } Property Value Type Description ElementId Remarks If one (and only one) operation is selected by the user, this property returns its identifier, otherwise Empty is returned. This property is available since v7.9.300.80. Methods AskAxis3D(UserQuestion, Boolean, SmartAxis3D, out SmartAxis3D) Asks the user for a 3D axis. Declaration [AvailableSinceVersion(7, 7, 0, 0)] UserAnswerType AskAxis3D(UserQuestion inQuestion, bool inIsOriented, SmartAxis3D inSuggestion, out SmartAxis3D outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. System.Boolean inIsOriented Whether to ask for orientation. SmartAxis3D inSuggestion Suggested answer, or null if none. SmartAxis3D outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) may be called before calling this method to allow the user to create or modify entities during the interaction. This method is available since v7.7. AskDirection3D(UserQuestion, Boolean, SmartDirection3D, out SmartDirection3D) Asks the user for a 3D direction. Declaration [AvailableSinceVersion(7, 7, 0, 0)] UserAnswerType AskDirection3D(UserQuestion inQuestion, bool inIsOriented, SmartDirection3D inSuggestion, out SmartDirection3D outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. System.Boolean inIsOriented Whether to ask for orientation. SmartDirection3D inSuggestion Suggested answer, or null if none. SmartDirection3D outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) may be called before calling this method to allow the user to create or modify entities during the interaction. This method is available since v7.7. AskEdge(UserQuestion, ElementItemId, out ElementItemId) Asks the user for an edge. Declaration [AvailableSinceVersion(7, 7, 0, 0)] UserAnswerType AskEdge(UserQuestion inQuestion, ElementItemId inSuggestion, out ElementItemId outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. ElementItemId inSuggestion Suggested answer, or Empty if none. ElementItemId outAnswer User answer, or Empty if none. Returns Type Description UserAnswerType Type of user answer. Remarks This method is available since v7.7. AskEdgeList(UserQuestion, List<ElementItemId>, out List<ElementItemId>) Asks the user for an edge list. Declaration [AvailableSinceVersion(7, 13, 0, 0)] UserAnswerType AskEdgeList(UserQuestion inQuestion, List<ElementItemId> inSuggestions, out List<ElementItemId> outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. List < ElementItemId > inSuggestions Suggested answer, or null if none. List < ElementItemId > outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks This method is available since v7.13. AskEdgeWithPickingAxis(UserQuestion, ElementItemId, out ElementItemId, out Axis3D) Asks the user for an edge with picking axis. Declaration [AvailableSinceVersion(7, 10, 300, 60)] UserAnswerType AskEdgeWithPickingAxis(UserQuestion inQuestion, ElementItemId inSuggestion, out ElementItemId outAnswer, out Axis3D outPickingAxis) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. ElementItemId inSuggestion Suggested answer, or Empty if none. ElementItemId outAnswer User answer, or Empty if none. Axis3D outPickingAxis User picking axis when answer is not empty and not equal to suggestion. Returns Type Description UserAnswerType Type of user answer. Remarks This method is available since v7.10.300.60. AskFace(UserQuestion, ElementItemId, out ElementItemId) Asks the user for a face. Declaration [AvailableSinceVersion(7, 7, 0, 0)] UserAnswerType AskFace(UserQuestion inQuestion, ElementItemId inSuggestion, out ElementItemId outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. ElementItemId inSuggestion Suggested answer, or Empty if none. ElementItemId outAnswer User answer, or Empty if none. Returns Type Description UserAnswerType Type of user answer. Remarks This method is available since v7.7. AskFaceList(UserQuestion, List<ElementItemId>, out List<ElementItemId>) Asks the user for a face list. Declaration [AvailableSinceVersion(7, 13, 0, 0)] UserAnswerType AskFaceList(UserQuestion inQuestion, List<ElementItemId> inSuggestions, out List<ElementItemId> outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. List < ElementItemId > inSuggestions Suggested answer, or null if none. List < ElementItemId > outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks This method is available since v7.13. AskFaceWithPickingAxis(UserQuestion, ElementItemId, out ElementItemId, out Axis3D) Asks the user for a face with picking axis. Declaration [AvailableSinceVersion(7, 10, 300, 60)] UserAnswerType AskFaceWithPickingAxis(UserQuestion inQuestion, ElementItemId inSuggestion, out ElementItemId outAnswer, out Axis3D outPickingAxis) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. ElementItemId inSuggestion Suggested answer, or Empty if none. ElementItemId outAnswer User answer, or Empty if none. Axis3D outPickingAxis User picking axis when answer is not empty and not equal to suggestion. Returns Type Description UserAnswerType Type of user answer. Remarks This method is available since v7.10.300.60. AskFrame3D(UserQuestion, Boolean, SmartFrame3D, out SmartFrame3D) Asks the user for a 3D frame. Declaration [AvailableSinceVersion(7, 7, 0, 0)] UserAnswerType AskFrame3D(UserQuestion inQuestion, bool inIsOriented, SmartFrame3D inSuggestion, out SmartFrame3D outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. System.Boolean inIsOriented Whether to ask for orientation. SmartFrame3D inSuggestion Suggested answer, or null if none. SmartFrame3D outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) may be called before calling this method to allow the user to create or modify entities during the interaction. This method is available since v7.7. AskFrame3DList(UserQuestion, List<SmartFrame3D>, out List<SmartFrame3D>) Asks the user for a 3D frame list. Declaration [AvailableSinceVersion(7, 13, 0, 0)] UserAnswerType AskFrame3DList(UserQuestion inQuestion, List<SmartFrame3D> inSuggestions, out List<SmartFrame3D> outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. List < SmartFrame3D > inSuggestions Suggested answer, or null if none. List < SmartFrame3D > outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) may be called before calling this method to allow the user to create or modify entities during the interaction. This method is available since v7.13. AskInteger(UserQuestion, Int32, Int32, SmartInteger, out SmartInteger) Asks the user for an integer value. Declaration [AvailableSinceVersion(7, 7, 0, 0)] UserAnswerType AskInteger(UserQuestion inQuestion, int inMinValue, int inMaxValue, SmartInteger inSuggestion, out SmartInteger outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. System.Int32 inMinValue Minimum value. System.Int32 inMaxValue Maximum value. SmartInteger inSuggestion Suggested answer, or null if none. SmartInteger outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) may be called before calling this method to allow the user to create or modify entities during the interaction. This method is available since v7.7. AskPlane3D(UserQuestion, Boolean, SmartPlane3D, out SmartPlane3D) Asks the user for a 3D plane. Declaration [AvailableSinceVersion(7, 7, 0, 0)] UserAnswerType AskPlane3D(UserQuestion inQuestion, bool inIsOriented, SmartPlane3D inSuggestion, out SmartPlane3D outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. System.Boolean inIsOriented Whether to ask for orientation. SmartPlane3D inSuggestion Suggested answer, or null if none. SmartPlane3D outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) may be called before calling this method to allow the user to create or modify entities during the interaction. This method is available since v7.7. AskPoint3D(UserQuestion, SmartPoint3D, out SmartPoint3D) Asks the user for a 3D point. Declaration [AvailableSinceVersion(7, 7, 0, 0)] UserAnswerType AskPoint3D(UserQuestion inQuestion, SmartPoint3D inSuggestion, out SmartPoint3D outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. SmartPoint3D inSuggestion Suggested answer, or null if none. SmartPoint3D outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) may be called before calling this method to allow the user to create or modify entities during the interaction. This method is available since v7.7. AskPoint3DList(UserQuestion, List<SmartPoint3D>, out List<SmartPoint3D>) Asks the user for a 3D point list. Declaration [AvailableSinceVersion(7, 13, 0, 0)] UserAnswerType AskPoint3DList(UserQuestion inQuestion, List<SmartPoint3D> inSuggestions, out List<SmartPoint3D> outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. List < SmartPoint3D > inSuggestions Suggested answer, or null if none. List < SmartPoint3D > outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) may be called before calling this method to allow the user to create or modify entities during the interaction. This method is available since v7.13. AskReal(UserQuestion, UnitType, Double, Double, SmartReal, out SmartReal) Asks the user for a real value. Declaration [AvailableSinceVersion(7, 7, 0, 0)] UserAnswerType AskReal(UserQuestion inQuestion, UnitType inUnitType, double inMinValue, double inMaxValue, SmartReal inSuggestion, out SmartReal outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. UnitType inUnitType Unit type of the real value. System.Double inMinValue Minimum value, in SI unit. System.Double inMaxValue Maximum value, in SI unit. SmartReal inSuggestion Suggested answer, or null if none. SmartReal outAnswer User answer, or null if none. Returns Type Description UserAnswerType Type of user answer. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) may be called before calling this method to allow the user to create or modify entities during the interaction. This method is available since v7.7. AskShape(UserQuestion, ElementId, out ElementId) Asks the user for a shape. Declaration [AvailableSinceVersion(7, 10, 300, 60)] UserAnswerType AskShape(UserQuestion inQuestion, ElementId inSuggestion, out ElementId outAnswer) Parameters Type Name Description UserQuestion inQuestion Question asked to the user. ElementId inSuggestion Suggested answer, or Empty if none. ElementId outAnswer User answer, or Empty if none. Returns Type Description UserAnswerType Type of user answer. Remarks This method is available since v7.10.300.60. SelectSelection(ElementId) Selects a selection entity. Declaration [AvailableSinceVersion(7, 16, 0, 0)] void SelectSelection(ElementId inSelection) Parameters Type Name Description ElementId inSelection The selection entity to select."
  },
  "api/kernel/TopSolid.Kernel.Automating.IVisualization3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.IVisualization3D.html",
    "title": "Interface IVisualization3D | TopSolid Automation website",
    "keywords": "Interface IVisualization3D Gives access to 3D visualization. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public interface IVisualization3D Remarks This interface is available since v7.7. Methods GetActiveView(DocumentId) Gets the active graphic view of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] int GetActiveView(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Int32 Identifier of the active graphic view of the document. Remarks This method is available since v7.7. GetBackCamera(DocumentId) Gets the back camera entity of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] ElementId GetBackCamera(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the back camera entity found. Remarks This method is available since v7.7. GetBottomCamera(DocumentId) Gets the bottom camera entity of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] ElementId GetBottomCamera(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the bottom camera entity found. Remarks This method is available since v7.7. GetCameraDefinition(ElementId, out Point3D, out Direction3D, out Direction3D, out Double, out Double) Gets the definition of a camera entity. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetCameraDefinition(ElementId inElementId, out Point3D outEyePosition, out Direction3D outLookAtDirection, out Direction3D outUpDirection, out double outFieldAngle, out double outFieldRadius) Parameters Type Name Description ElementId inElementId Identifier of the camera entity to analyze. Point3D outEyePosition Eye position. Direction3D outLookAtDirection Direction3D outUpDirection System.Double outFieldAngle Field angle for perspective projection, or 0 if orthographic projection. System.Double outFieldRadius Field radius for orthographic projection, or distance between camera origin and projection plane if perspective projection. Remarks This method is available since v7.7. GetCameras(DocumentId) Gets the cameras entities that are in the cameras folder of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<ElementId> GetCameras(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < ElementId > Cameras entities found. Remarks This method is available since v7.7. GetConicalCamera(DocumentId) Gets the conical camera entity of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] ElementId GetConicalCamera(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the conical camera entity found. Remarks This method is available since v7.7. GetDefaultDocumentPreviewParameters(DocumentId, out Int32, out ElementId, out RenderMode) Gets the document's default preview parameters. Declaration [AvailableSinceVersion(7, 14, 300, 140)] void GetDefaultDocumentPreviewParameters(DocumentId inDocumentId, out int outSizeOfPreview, out ElementId outPreviewCamera, out RenderMode outPreviewRenderMode) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.Int32 outSizeOfPreview Size of the preview. ElementId outPreviewCamera Preview camera if the document is of Geometric type. RenderMode outPreviewRenderMode Preview render mode if the document is of Geometric type. Remarks This method is available since v7.14.300.140. GetDocumentPreviewMode(DocumentId) Gets the document preview mode. Declaration [AvailableSinceVersion(7, 14, 300, 140)] PreviewMode GetDocumentPreviewMode(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description PreviewMode Preview mode of the document. Remarks This method is available since v7.14.300.140. GetFrontCamera(DocumentId) Gets the front camera entity of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] ElementId GetFrontCamera(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the front camera entity found. Remarks This method is available since v7.7. GetIsometricCamera(DocumentId) Gets the isometric camera entity of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] ElementId GetIsometricCamera(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the isometric camera entity found. Remarks This method is available since v7.7. GetLeftCamera(DocumentId) Gets the left camera entity of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] ElementId GetLeftCamera(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the left camera entity found. Remarks This method is available since v7.7. GetPerspectiveCamera(DocumentId) Gets the perspective camera entity of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] ElementId GetPerspectiveCamera(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the perspective camera entity found. Remarks This method is available since v7.7. GetRightCamera(DocumentId) Gets the right camera entity of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] ElementId GetRightCamera(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the right camera entity found. Remarks This method is available since v7.7. GetTopCamera(DocumentId) Gets the top camera entity of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] ElementId GetTopCamera(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description ElementId Identifier of the top camera entity found. Remarks This method is available since v7.7. GetViewCamera(DocumentId, Int32, out Point3D, out Direction3D, out Direction3D, out Double, out Double) Gets the camera of a graphic view of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetViewCamera(DocumentId inDocumentId, int inViewId, out Point3D outEyePosition, out Direction3D outLookAtDirection, out Direction3D outUpDirection, out double outFieldAngle, out double outFieldRadius) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.Int32 inViewId Identifier of the graphic view to analyze. Point3D outEyePosition Position of the eye. Direction3D outLookAtDirection Eye looking direction. Direction3D outUpDirection Vertical upwards direction. System.Double outFieldAngle Field angle for perspective projection, or 0 if orthographic projection. System.Double outFieldRadius Field radius for orthographic projection, or distance between camera origin and projection plane if perspective projection. Remarks This method is available since v7.7. GetViewCount(DocumentId) Gets the number of graphic views of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] int GetViewCount(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description System.Int32 Number of graphic views of the document. Remarks This method is available since v7.7. GetViewRectangle(DocumentId, Int32, out Int32, out Int32, out Int32, out Int32) Gets the screen rectangle of the graphic view of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void GetViewRectangle(DocumentId inDocumentId, int inViewId, out int outXMin, out int outXMax, out int outYMin, out int outYMax) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.Int32 inViewId Identifier of the graphic view to analyze. System.Int32 outXMin Left side coordinate. System.Int32 outXMax Right side coordinate. System.Int32 outYMin Bottom side coordinate. System.Int32 outYMax Top side coordinate. Remarks Rectangle is expressed in GDI screen coordinates (origin at top-left of screen). This method is available since v7.7. GetViewRenderMode(DocumentId, Int32) Gets the render mode of a graphic view of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] RenderMode GetViewRenderMode(DocumentId inDocumentId, int inViewId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. System.Int32 inViewId Identifier of the graphic view to analyze. Returns Type Description RenderMode View render mode. Remarks This method is available since v7.7. GetViews(DocumentId) Gets the graphic views of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] List<int> GetViews(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to analyze. Returns Type Description List < System.Int32 > Identifiers of the graphic views of the document. Remarks This method is available since v7.7. RedrawView(DocumentId, Int32) Redraws a graphic view of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void RedrawView(DocumentId inDocumentId, int inViewId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Int32 inViewId Identifier of the graphic view to redraw. Remarks This method is available since v7.7. SetActiveView(DocumentId, Int32) Sets the active graphic view of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void SetActiveView(DocumentId inDocumentId, int inViewId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Int32 inViewId Identifier of the active graphic view of the document. Remarks This method is available since v7.7. SetDefaultDocumentPreviewParameters(DocumentId, Int32, ElementId, RenderMode) Sets the document's default preview parameters. Declaration [AvailableSinceVersion(7, 14, 300, 140)] void SetDefaultDocumentPreviewParameters(DocumentId inDocumentId, int inSizeOfPreview, ElementId inPreviewCamera, RenderMode inPreviewRenderMode) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Int32 inSizeOfPreview Size of the preview. ElementId inPreviewCamera Preview camera. RenderMode inPreviewRenderMode Preview render mode. Only Realistic, RealisticWithEdges and GouraudWithEdges are available for this method. Remarks This method is available since v7.14.300.140. SetStandardCamerasDefinitions(DocumentId, Direction3D, Direction3D) Sets the definitions of the standard cameras entities. Declaration [AvailableSinceVersion(7, 11, 0, 0)] void SetStandardCamerasDefinitions(DocumentId inDocumentId, Direction3D inHorizontalDirection, Direction3D inVerticalDirection) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. Direction3D inHorizontalDirection Horizontal direction. Direction3D inVerticalDirection Vertical direction. Remarks The standard \"Top Camera\" will be set so that when applied to a view the inHorizontalDirection is actually horizontal on the screen oriented from left to right, and the inVerticalDirection is normal to the screen oriented towards the user. The other standard cameras will be set accordingly. StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.11. SetViewCamera(DocumentId, Int32, Point3D, Direction3D, Direction3D, Double, Double) Sets the camera of a graphic view of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void SetViewCamera(DocumentId inDocumentId, int inViewId, Point3D inEyePosition, Direction3D inLookAtDirection, Direction3D inUpDirection, double inFieldAngle, double inFieldRadius) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Int32 inViewId Identifier of the graphic view to modify. Point3D inEyePosition Position of the eye. Direction3D inLookAtDirection Eye looking direction. Direction3D inUpDirection Vertical upwards direction. System.Double inFieldAngle Field angle for perspective projection, or 0 if orthographic projection. System.Double inFieldRadius Field radius for orthographic projection, or distance between camera origin and projection plane if perspective projection. Remarks StartModification(String, Boolean) and EnsureIsDirty(ref DocumentId) must be called before calling this method. This method is available since v7.7. SetViewRenderMode(DocumentId, Int32, RenderMode) Sets the render mode of a graphic view of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void SetViewRenderMode(DocumentId inDocumentId, int inViewId, RenderMode inRenderMode) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Int32 inViewId Identifier of the graphic view to modify. RenderMode inRenderMode View render mode. Remarks This method is available since v7.7. ZoomToFitView(DocumentId, Int32) Performs a \"Zoom to Fit\" on a graphic view of a document. Declaration [AvailableSinceVersion(7, 7, 0, 0)] void ZoomToFitView(DocumentId inDocumentId, int inViewId) Parameters Type Name Description DocumentId inDocumentId Identifier of the document to modify. System.Int32 inViewId Identifier of the graphic view to modify. Remarks This method is available since v7.7."
  },
  "api/kernel/TopSolid.Kernel.Automating.KeyValue.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.KeyValue.html",
    "title": "Struct KeyValue | TopSolid Automation website",
    "keywords": "Struct KeyValue Represents a key-value string pair. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public struct KeyValue Remarks This structure is available since v7.8. Constructors KeyValue(String, String) Initializes a new instance of the KeyValue structure. Declaration public KeyValue(string inKey, string inValue) Parameters Type Name Description System.String inKey Key, or null if empty. System.String inValue Value, or null if empty. Fields Empty Empty key-value pair. Declaration public static readonly KeyValue Empty Field Value Type Description KeyValue Key Key, or null if empty. Declaration public string Key Field Value Type Description System.String Value Value, or null if empty. Declaration public string Value Field Value Type Description System.String Properties IsEmpty Tells whether the key-value pair is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean"
  },
  "api/kernel/TopSolid.Kernel.Automating.License.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.License.html",
    "title": "Struct License | TopSolid Automation website",
    "keywords": "Struct License Represents a license. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 16, 400, 20)] public struct License Remarks This structure is available since v7.16. Constructors License(LicenseType, String, String, String, Boolean, String, UInt32, UInt32) Initializes a new instance of the License structure. Declaration public License(LicenseType inLicenseType, string inProvider, string inName, string inVersion, bool inIsActive, string inLicenseUser, uint inModule, uint inGroup) Parameters Type Name Description LicenseType inLicenseType License type. System.String inProvider Provider. System.String inName License name. System.String inVersion Version. System.Boolean inIsActive Is license active. System.String inLicenseUser User of the floating license. System.UInt32 inModule Module. System.UInt32 inGroup Group. Fields ExpirationDate Expiration date. Declaration public DateTime? ExpirationDate Field Value Type Description System.Nullable < System.DateTime > Group Group number. Declaration public uint Group Field Value Type Description System.UInt32 IsActive Is license active. Declaration public bool IsActive Field Value Type Description System.Boolean LicensedTo Licensed to. Declaration public string LicensedTo Field Value Type Description System.String LicenseType License type (Standalone, floating, user). Declaration public LicenseType LicenseType Field Value Type Description LicenseType LicenseUser License user (for floating). Declaration public string LicenseUser Field Value Type Description System.String Module Module number. Declaration public uint Module Field Value Type Description System.UInt32 Name Name. Declaration public string Name Field Value Type Description System.String Provider Provider. Declaration public string Provider Field Value Type Description System.String Status Status. Declaration public string Status Field Value Type Description System.String Version Version. Declaration public string Version Field Value Type Description System.String"
  },
  "api/kernel/TopSolid.Kernel.Automating.LicenseType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.LicenseType.html",
    "title": "Enum LicenseType | TopSolid Automation website",
    "keywords": "Enum LicenseType Defines the various types of licenses. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 16, 400, 20)] public enum LicenseType Remarks This enum is available since v7.16. Fields Name Description ClsFloating Cls Floating. ClsStandalone Cls Standalone. ClsUser Cls User. Floating Floating. Standalone Standalone. Unknown Unknown."
  },
  "api/kernel/TopSolid.Kernel.Automating.LoopType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.LoopType.html",
    "title": "Enum LoopType | TopSolid Automation website",
    "keywords": "Enum LoopType Defines the various types loops. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum LoopType Remarks This enum is available since v7.6. Fields Name Description Inner Loop is a simple hole. LikelyInner An apparent hole in a doubly closed surface. LikelyOuter An apparently peripheral loop on a doubly closed surface. None Not a loop. Outer Simple peripheral loop. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.ModifierType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ModifierType.html",
    "title": "Enum ModifierType | TopSolid Automation website",
    "keywords": "Enum ModifierType Defines the various types of modifier. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public enum ModifierType Remarks This enum is available since v7.17.000.000. Fields Name Description AnyCrossSection Any cross section [ACS] AnyLongitudinalSection Any longitudinal section [ALS] CommonZone Common zone (CZ) ContactFeature Contact Feature [CF] FreeState Free state condition (F). LeastMaterial Least material condition (L). MajorDiameter Major Diameter [MD] Manual Manual modifier. MaximumMaterial Maximum material condition (M). MinorDiameter Minor Diameter [LD] None No modifier. OrientationOnly Orientation constraint only PitchDiameter Pitch Diameter [PD] Plane Plane [PL] Point Point [PT] ProjectedTolerance Projected tolerance (P). StraightLine Straight Line [SL] VariableDistance Variable Distance [DV]"
  },
  "api/kernel/TopSolid.Kernel.Automating.ParameterRelayType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ParameterRelayType.html",
    "title": "Enum ParameterRelayType | TopSolid Automation website",
    "keywords": "Enum ParameterRelayType Defines the various types of parameter relays. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 303, 120)] public enum ParameterRelayType Remarks This enum is available since v7.8.303.120. Fields Name Description External External. Internal Internal. None Not a relay. Project Project."
  },
  "api/kernel/TopSolid.Kernel.Automating.ParameterType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ParameterType.html",
    "title": "Enum ParameterType | TopSolid Automation website",
    "keywords": "Enum ParameterType Defines the various types of parameter entities. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum ParameterType Remarks This enum is available since v7.6. Fields Name Description Boolean Boolean. Code Code. Color Color. DateTime Date. Enumeration Enumeration. Family Family. Integer Integer. None Not a parameter. Real Real. Text Text. Tolerance User enumeration. Unclassified Unclassified type. UserEnumeration User enumeration."
  },
  "api/kernel/TopSolid.Kernel.Automating.PdmLifeCycleMainState.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PdmLifeCycleMainState.html",
    "title": "Enum PdmLifeCycleMainState | TopSolid Automation website",
    "keywords": "Enum PdmLifeCycleMainState Defines the different life cycle main states of an item major revision. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 9, 302, 160)] public enum PdmLifeCycleMainState : byte Remarks This enum is available since v7.7. Fields Name Description Deleted Deleted state. Design Design state. None No state. Obsolete Obsolete state. Validated Validated state."
  },
  "api/kernel/TopSolid.Kernel.Automating.PdmMajorRevisionId.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PdmMajorRevisionId.html",
    "title": "Struct PdmMajorRevisionId | TopSolid Automation website",
    "keywords": "Struct PdmMajorRevisionId Represents a PDM major revision identifier. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct PdmMajorRevisionId Remarks This structure is available since v7.6. Constructors PdmMajorRevisionId(String) Initializes a new instance of the PdmMajorRevisionId structure. Declaration public PdmMajorRevisionId(string inPdmMajorRevisionId) Parameters Type Name Description System.String inPdmMajorRevisionId PDM major revision identifier, or null if empty. Fields Empty Empty identifier. Declaration public static readonly PdmMajorRevisionId Empty Field Value Type Description PdmMajorRevisionId Properties Id Gets the PDM major revision identifier. Declaration public readonly string Id { get; } Property Value Type Description System.String IsEmpty Tells whether the major revision identifier is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean"
  },
  "api/kernel/TopSolid.Kernel.Automating.PdmMinorRevisionId.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PdmMinorRevisionId.html",
    "title": "Struct PdmMinorRevisionId | TopSolid Automation website",
    "keywords": "Struct PdmMinorRevisionId Represents a PDM minor revision id. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct PdmMinorRevisionId Remarks This structure is available since v7.6. Constructors PdmMinorRevisionId(String) Initializes a new instance of the PdmMinorRevisionId structure. Declaration public PdmMinorRevisionId(string inPdmMinorRevisionId) Parameters Type Name Description System.String inPdmMinorRevisionId PDM minor revision id, or null if empty. Fields Empty Empty identifier. Declaration public static readonly PdmMinorRevisionId Empty Field Value Type Description PdmMinorRevisionId Properties Id Gets the PDM minor revision id. Declaration public readonly string Id { get; } Property Value Type Description System.String IsEmpty Tells whether the minor revision id is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean"
  },
  "api/kernel/TopSolid.Kernel.Automating.PdmObjectId.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PdmObjectId.html",
    "title": "Struct PdmObjectId | TopSolid Automation website",
    "keywords": "Struct PdmObjectId Represents a PDM object identifier. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct PdmObjectId Remarks This structure is available since v7.6. Constructors PdmObjectId(String) Initializes a new instance of the PdmObjectId structure. Declaration public PdmObjectId(string inPdmObjectId) Parameters Type Name Description System.String inPdmObjectId PDM object identifier, or null if empty. Fields Empty Empty identifier. Declaration public static readonly PdmObjectId Empty Field Value Type Description PdmObjectId Properties Id Gets the PDM object identifier. Declaration public readonly string Id { get; } Property Value Type Description System.String IsEmpty Tells whether the identifier is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean"
  },
  "api/kernel/TopSolid.Kernel.Automating.PdmObjectState.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PdmObjectState.html",
    "title": "Enum PdmObjectState | TopSolid Automation website",
    "keywords": "Enum PdmObjectState Defines the various states of a PDM object. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum PdmObjectState Remarks This enum is available since v7.6. Fields Name Description CheckedIn CheckedIn state. Default Default state. Deleted Object is deleted. ExclusiveModification Exclusive modification state. IsLockedBecauseModifiedData Locked because data modified. LockedBecauseToAnnihilate Locked because to annihilate state. LockedBecauseToDelete Locked because to delete state. MultipleModification Multiple modification state. New New state. NotUpToDateBecauseDraggedAndDropped Position in treeview is not up-to-date because object has been dragged and dropped somewhere else. Obsolete Obsolete (last major revision is obsolete). ToAnnihilate To annihilate state. ToDelete To delete state. Validated Validated (last major revision is validated)."
  },
  "api/kernel/TopSolid.Kernel.Automating.PdmObjectType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PdmObjectType.html",
    "title": "Enum PdmObjectType | TopSolid Automation website",
    "keywords": "Enum PdmObjectType Defines the various types of PDM objects. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 301, 120)] public enum PdmObjectType Remarks This enum is available since v7.6.301.120. Fields Name Description FavoritesDefaultFolder Favorites default folder. FavoritesFolder Favorites folder. Folder Folder. LibraryProject Library project. RecycleBinFolder Recycle bin folder. ResourceProject Resource project. Shortcut Shortcut. TemplatesDefaultFolder Templates default folder. TemplatesFolder Templates folder. TopSolidDocument TopSolid document. Unknown Unknown type. UnknownDocument Unknown type of document. WorkingProject Working project."
  },
  "api/kernel/TopSolid.Kernel.Automating.PdmProjectFolderId.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PdmProjectFolderId.html",
    "title": "Struct PdmProjectFolderId | TopSolid Automation website",
    "keywords": "Struct PdmProjectFolderId Represents a PDM project folder identifier. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 9, 0, 0)] public struct PdmProjectFolderId Remarks This structure is available since v7.9. Constructors PdmProjectFolderId(String) Initializes a new instance of the PdmProjectFolderId structure. Declaration public PdmProjectFolderId(string pdmProjectFolderId) Parameters Type Name Description System.String pdmProjectFolderId PDM project folder identifier, or null if empty. Fields Empty Empty identifier. Declaration public static readonly PdmProjectFolderId Empty Field Value Type Description PdmProjectFolderId Properties Id Gets the PDM project folder identifier. Declaration public readonly string Id { get; } Property Value Type Description System.String IsEmpty Tells whether the identifier is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean"
  },
  "api/kernel/TopSolid.Kernel.Automating.PdmRight.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PdmRight.html",
    "title": "Enum PdmRight | TopSolid Automation website",
    "keywords": "Enum PdmRight Defines the various PDM rights. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax public enum PdmRight Fields Name Description Administrate Administrate right. Create Create right. Delete Delete right Export Export right. ExportForDelivery Export for delivery. LifeCycleStateChange Life cycle state change right Modify Modify right. ModifyReferences Modify references right. Print Print right PublishToERP Publish to ERP right Read Read right."
  },
  "api/kernel/TopSolid.Kernel.Automating.PdmSecurityPermission.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PdmSecurityPermission.html",
    "title": "Enum PdmSecurityPermission | TopSolid Automation website",
    "keywords": "Enum PdmSecurityPermission Defines the various permissions of a security. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public enum PdmSecurityPermission Remarks This enum is available since v7.8. Fields Name Description Denied Denied. Granted Granted. Unspecified Unspecified."
  },
  "api/kernel/TopSolid.Kernel.Automating.PdmSecurityUserOrGroupPermissions.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PdmSecurityUserOrGroupPermissions.html",
    "title": "Struct PdmSecurityUserOrGroupPermissions | TopSolid Automation website",
    "keywords": "Struct PdmSecurityUserOrGroupPermissions Represents a security user or group list of permissions. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public struct PdmSecurityUserOrGroupPermissions Remarks This structure is available since v7.8. Constructors PdmSecurityUserOrGroupPermissions(String) Initializes a new instance of the Plane3D structure with a specified user. Declaration public PdmSecurityUserOrGroupPermissions(string inUserAccountId) Parameters Type Name Description System.String inUserAccountId User account identifier to create permissions on. PdmSecurityUserOrGroupPermissions(PdmObjectId) Initializes a new instance of the PdmSecurityUserOrGroupPermissions structure with a specified user group. Declaration public PdmSecurityUserOrGroupPermissions(PdmObjectId inUserGroupId) Parameters Type Name Description PdmObjectId inUserGroupId User group identifier to create permissions on. Fields AdministratePermission Enable user to administrate all project permissions, Unspecified must be left for folder and document permissions. Declaration public PdmSecurityPermission AdministratePermission Field Value Type Description PdmSecurityPermission ChangeLifeCycleStatePermission Enable user to change life cycle of a document. Declaration public PdmSecurityPermission ChangeLifeCycleStatePermission Field Value Type Description PdmSecurityPermission CreatePermission Enable user to create news folders or documents, Unspecified must be left for document permissions. Declaration public PdmSecurityPermission CreatePermission Field Value Type Description PdmSecurityPermission DeletePermission Enable user to delete a project, folder or document. Declaration public PdmSecurityPermission DeletePermission Field Value Type Description PdmSecurityPermission ExportForDeliveryPermission Enable to export for delivery a project, folder or document. Declaration public PdmSecurityPermission ExportForDeliveryPermission Field Value Type Description PdmSecurityPermission ExportPermission Enable user to export a document. Declaration public PdmSecurityPermission ExportPermission Field Value Type Description PdmSecurityPermission ModifyPermission Enable user to modify a project, folder or document. Declaration public PdmSecurityPermission ModifyPermission Field Value Type Description PdmSecurityPermission ModifyReferencesPermission Enable user to modify project references, Unspecified must be left for folder and document permissions. Declaration public PdmSecurityPermission ModifyReferencesPermission Field Value Type Description PdmSecurityPermission PrintPermission Enable user to print a document. Declaration public PdmSecurityPermission PrintPermission Field Value Type Description PdmSecurityPermission PublishToPlmPermission Enable user to publish a document to PLM. Declaration public PdmSecurityPermission PublishToPlmPermission Field Value Type Description PdmSecurityPermission ReadPermission Enable user to read a project, folder or document. Declaration public PdmSecurityPermission ReadPermission Field Value Type Description PdmSecurityPermission UserAccountId User account identifier, string empty when user group is selected. Declaration public string UserAccountId Field Value Type Description System.String UserGroupId User group identifier, empty when user is selected. Declaration public PdmObjectId UserGroupId Field Value Type Description PdmObjectId Methods IsUserGroup() Tells if user group security is defined, opposite would be user security. Declaration public bool IsUserGroup() Returns Type Description System.Boolean User group security used."
  },
  "api/kernel/TopSolid.Kernel.Automating.Plane3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Plane3D.html",
    "title": "Struct Plane3D | TopSolid Automation website",
    "keywords": "Struct Plane3D Represents a geometric 3D plane. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Plane3D Remarks This structure is available since v7.6. Constructors Plane3D(Point3D, Direction3D, Direction3D) Initializes a new instance of the Plane3D structure with a specified origin and directions. Declaration public Plane3D(Point3D inOrigin, Direction3D inXDirection, Direction3D inYDirection) Parameters Type Name Description Point3D inOrigin Plane origin. Direction3D inXDirection Plane X direction. Direction3D inYDirection Plane Y direction, orthogonal to inXDirection . Fields Origin Plane origin. Declaration public Point3D Origin Field Value Type Description Point3D OXY (O,+X,+Y) absolute plane. Declaration public static readonly Plane3D OXY Field Value Type Description Plane3D OXZ (O,+X,+Z) absolute plane. Declaration public static readonly Plane3D OXZ Field Value Type Description Plane3D OYX (O,+Y,+X) absolute plane. Declaration public static readonly Plane3D OYX Field Value Type Description Plane3D OYZ (O,+Y,+Z) absolute plane. Declaration public static readonly Plane3D OYZ Field Value Type Description Plane3D OZX (O,+Z,+X) absolute plane. Declaration public static readonly Plane3D OZX Field Value Type Description Plane3D OZY (O,+Z,+Y) absolute plane. Declaration public static readonly Plane3D OZY Field Value Type Description Plane3D XDirection Plane X direction. Declaration public Direction3D XDirection Field Value Type Description Direction3D YDirection Plane Y direction, orthogonal to XDirection . Declaration public Direction3D YDirection Field Value Type Description Direction3D Properties Normal Gets the plane normal direction. Declaration public readonly Direction3D Normal { get; } Property Value Type Description Direction3D Remarks The plane normal direction is equal to the cross product of the plane X and Y directions. Methods ToAbsolute(Axis2D) Converts an axis with coordinates expressed in this plane into the same axis with coordinates expressed in the absolute frame. Declaration public Axis3D ToAbsolute(Axis2D inAxis) Parameters Type Name Description Axis2D inAxis Axis with coordinates expressed in this plane. Returns Type Description Axis3D Axis with coordinates expressed in the absolute frame. ToAbsolute(Direction2D) Converts a direction with coordinates expressed in this plane into the same direction with coordinates expressed in the absolute frame. Declaration public Direction3D ToAbsolute(Direction2D inDirection) Parameters Type Name Description Direction2D inDirection Direction with coordinates expressed in this plane. Returns Type Description Direction3D Direction with coordinates expressed in the absolute frame. ToAbsolute(Frame2D) Converts a frame with coordinates expressed in this plane into the same frame with coordinates expressed in the absolute frame. Declaration public Frame3D ToAbsolute(Frame2D inFrame) Parameters Type Name Description Frame2D inFrame Frame with coordinates expressed in this frame. Returns Type Description Frame3D Frame with coordinates expressed in the absolute frame. ToAbsolute(Point2D) Converts a point with coordinates expressed in this plane into the same point with coordinates expressed in the absolute frame. Declaration public Point3D ToAbsolute(Point2D inPoint) Parameters Type Name Description Point2D inPoint Point with coordinates expressed in this plane. Returns Type Description Point3D Point with coordinates expressed in the absolute frame. ToAbsolute(Vector2D) Converts a vector with coordinates expressed in this plane into the same vector with coordinates expressed in the absolute frame. Declaration public Vector3D ToAbsolute(Vector2D inVector) Parameters Type Name Description Vector2D inVector Vector with coordinates expressed in this plane. Returns Type Description Vector3D Vector with coordinates expressed in the absolute frame."
  },
  "api/kernel/TopSolid.Kernel.Automating.Point2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Point2D.html",
    "title": "Struct Point2D | TopSolid Automation website",
    "keywords": "Struct Point2D Represents a geometric 2D point. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Point2D Remarks This structure is available since v7.6. Constructors Point2D(Double, Double) Initializes a new instance of the Point2D structure with its coordinates. Declaration public Point2D(double inX, double inY) Parameters Type Name Description System.Double inX X coordinate. System.Double inY Y coordinate. Fields P0 Origin point, i.e. (0,0). Declaration public static readonly Point2D P0 Field Value Type Description Point2D PX X unit point, i.e. (1,0). Declaration public static readonly Point2D PX Field Value Type Description Point2D PY Y unit point, i.e. (0,1). Declaration public static readonly Point2D PY Field Value Type Description Point2D X X coordinate. Declaration public double X Field Value Type Description System.Double Y Y coordinate. Declaration public double Y Field Value Type Description System.Double Methods CoincidesWith(Point2D) Tells whether this point coincides with another point. Declaration public bool CoincidesWith(Point2D inPoint) Parameters Type Name Description Point2D inPoint Point to compare with. Returns Type Description System.Boolean This point coincides with the specified point. Remarks Two points are considered coincident if they are less than LinearPrecision apart. Operators Addition(Point2D, Point2D) Adds two points. Declaration public static Point2D operator +(Point2D inPoint1, Point2D inPoint2) Parameters Type Name Description Point2D inPoint1 Left hand side point. Point2D inPoint2 Right hand side point. Returns Type Description Point2D Sum point. Addition(Point2D, Vector2D) Adds a point and a vector. Declaration public static Point2D operator +(Point2D inPoint, Vector2D inVector) Parameters Type Name Description Point2D inPoint Left hand side point. Vector2D inVector Right hand side vector. Returns Type Description Point2D Translated point. BitwiseOr(Point2D, Point2D) Computes the vector from one point to another point. Declaration public static Vector2D operator |(Point2D inPoint1, Point2D inPoint2) Parameters Type Name Description Point2D inPoint1 First point. Point2D inPoint2 Second point. Returns Type Description Vector2D Vector from first point to second point. Division(Point2D, Double) Divides a point by a double value. Declaration public static Point2D operator /(Point2D inPoint, double inD) Parameters Type Name Description Point2D inPoint Left hand side point. System.Double inD Right hand side double value. Returns Type Description Point2D Scaled point. Multiply(Double, Point2D) Multiplies a double value and a point. Declaration public static Point2D operator *(double inD, Point2D inPoint) Parameters Type Name Description System.Double inD Left hand side double value. Point2D inPoint Right hand side point. Returns Type Description Point2D Multiplied point. Multiply(Point2D, Double) Multiplies a point and a double value. Declaration public static Point2D operator *(Point2D inPoint, double inD) Parameters Type Name Description Point2D inPoint Left hand side point. System.Double inD Right hand side double value. Returns Type Description Point2D Multiplied point. Subtraction(Point2D, Vector2D) Subtracts a point and a vector. Declaration public static Point2D operator -(Point2D inPoint, Vector2D inVector) Parameters Type Name Description Point2D inPoint Left hand side point. Vector2D inVector Right hand side vector. Returns Type Description Point2D Translated point."
  },
  "api/kernel/TopSolid.Kernel.Automating.Point3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Point3D.html",
    "title": "Struct Point3D | TopSolid Automation website",
    "keywords": "Struct Point3D Represents a geometric 3D point. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Point3D Remarks This structure is available since v7.6. Constructors Point3D(Double, Double, Double) Initializes a new instance of the Point3D structure with its coordinates. Declaration public Point3D(double inX, double inY, double inZ) Parameters Type Name Description System.Double inX X coordinate. System.Double inY Y coordinate. System.Double inZ Z coordinate. Fields P0 Origin point, i.e. (0,0,0). Declaration public static readonly Point3D P0 Field Value Type Description Point3D PX X unit point, i.e. (1,0,0). Declaration public static readonly Point3D PX Field Value Type Description Point3D PY Y unit point, i.e. (0,1,0). Declaration public static readonly Point3D PY Field Value Type Description Point3D PZ Z unit point, i.e. (0,0,1). Declaration public static readonly Point3D PZ Field Value Type Description Point3D X X coordinate. Declaration public double X Field Value Type Description System.Double Y Y coordinate. Declaration public double Y Field Value Type Description System.Double Z Z coordinate. Declaration public double Z Field Value Type Description System.Double Methods CoincidesWith(Point3D) Tells whether this point coincides with another point. Declaration public bool CoincidesWith(Point3D inPoint) Parameters Type Name Description Point3D inPoint Point to compare with. Returns Type Description System.Boolean This point coincides with the specified point. Remarks Two points are considered coincident if they are less than LinearPrecision apart. Operators Addition(Point3D, Point3D) Adds two points. Declaration public static Point3D operator +(Point3D inPoint1, Point3D inPoint2) Parameters Type Name Description Point3D inPoint1 Left hand side point. Point3D inPoint2 Right hand side point. Returns Type Description Point3D Sum point. Addition(Point3D, Vector3D) Adds a point and a vector. Declaration public static Point3D operator +(Point3D inPoint, Vector3D inVector) Parameters Type Name Description Point3D inPoint Left hand side point. Vector3D inVector Right hand side vector. Returns Type Description Point3D Translated point. BitwiseOr(Point3D, Point3D) Computes the vector from one point to another point. Declaration public static Vector3D operator |(Point3D inPoint1, Point3D inPoint2) Parameters Type Name Description Point3D inPoint1 First point. Point3D inPoint2 Second point. Returns Type Description Vector3D Vector from first point to second point. Division(Point3D, Double) Divides a point by a double value. Declaration public static Point3D operator /(Point3D inPoint, double inD) Parameters Type Name Description Point3D inPoint Left hand side point. System.Double inD Right hand side double value. Returns Type Description Point3D Scaled point. Multiply(Double, Point3D) Multiplies a double value and a point. Declaration public static Point3D operator *(double inD, Point3D inPoint) Parameters Type Name Description System.Double inD Left hand side double value. Point3D inPoint Right hand side point. Returns Type Description Point3D Multiplied point. Multiply(Point3D, Double) Multiplies a point and a double value. Declaration public static Point3D operator *(Point3D inPoint, double inD) Parameters Type Name Description Point3D inPoint Left hand side point. System.Double inD Right hand side double value. Returns Type Description Point3D Multiplied point. Subtraction(Point3D, Vector3D) Subtracts a point and a vector. Declaration public static Point3D operator -(Point3D inPoint, Vector3D inVector) Parameters Type Name Description Point3D inPoint Left hand side point. Vector3D inVector Right hand side vector. Returns Type Description Point3D Translated point."
  },
  "api/kernel/TopSolid.Kernel.Automating.PreviewMode.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PreviewMode.html",
    "title": "Enum PreviewMode | TopSolid Automation website",
    "keywords": "Enum PreviewMode Defines the various types of document preview modes. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 13, 300, 220)] public enum PreviewMode Remarks This enum is available since v7.13.300.220 Fields Name Description Default Default. Empty Empty. ImageFromFile Image from a file. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.PrintColorMapping.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PrintColorMapping.html",
    "title": "Enum PrintColorMapping | TopSolid Automation website",
    "keywords": "Enum PrintColorMapping Defines the color mapping when printing. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum PrintColorMapping Remarks This enum is available since v7.6. Fields Name Description BlackAndWhite Converts to black and white. Color Prints colors. GreyLevels Converts to grey levels."
  },
  "api/kernel/TopSolid.Kernel.Automating.Property.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Property.html",
    "title": "Class Property | TopSolid Automation website",
    "keywords": "Class Property Represents a general property. Inheritance System.Object Property BooleanProperty CodeProperty DateTimeProperty DocumentProperty EnumerationProperty IntegerProperty RealProperty TextProperty UserEnumerationProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 12, 0, 0)] public abstract class Property Remarks This class is available since v7.12. Properties Type Gets the property type. Declaration public abstract PropertyType Type { get; } Property Value Type Description PropertyType"
  },
  "api/kernel/TopSolid.Kernel.Automating.PropertyDefinition.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PropertyDefinition.html",
    "title": "Struct PropertyDefinition | TopSolid Automation website",
    "keywords": "Struct PropertyDefinition Represents a property definition. Implements System.IEquatable < PropertyDefinition > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 12, 0, 0)] public struct PropertyDefinition : IEquatable<PropertyDefinition> Remarks This structure is available since v7.12. Constructors PropertyDefinition(String, String) Initializes a new instance of the PropertyDefinition structure. Declaration public PropertyDefinition(string inDomain, string inName) Parameters Type Name Description System.String inDomain Property domain. System.String inName Property name. Fields Domain Property domain, or null if empty. Declaration public string Domain Field Value Type Description System.String Empty Empty definition. Declaration public static readonly PropertyDefinition Empty Field Value Type Description PropertyDefinition Name Property name, or null if empty. Declaration public string Name Field Value Type Description System.String Properties IsEmpty Tells whether the property definition is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description System.Boolean Methods Equals(Object) Declaration public override bool Equals(object inObject) Parameters Type Name Description System.Object inObject Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) Equals(PropertyDefinition) Declaration public bool Equals(PropertyDefinition other) Parameters Type Name Description PropertyDefinition other Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators Equality(PropertyDefinition, PropertyDefinition) Tells whether two property definitions are equal. Declaration public static bool operator ==(PropertyDefinition inPropertyDefinition1, PropertyDefinition inPropertyDefinition2) Parameters Type Name Description PropertyDefinition inPropertyDefinition1 First property definition. PropertyDefinition inPropertyDefinition2 Second property definition. Returns Type Description System.Boolean Property definitions are equal. Inequality(PropertyDefinition, PropertyDefinition) Tells whether two property definitions are different. Declaration public static bool operator !=(PropertyDefinition inPropertyDefinition1, PropertyDefinition inPropertyDefinition2) Parameters Type Name Description PropertyDefinition inPropertyDefinition1 First property definition. PropertyDefinition inPropertyDefinition2 Second property definition. Returns Type Description System.Boolean Property definitions are different. Implements System.IEquatable<T>"
  },
  "api/kernel/TopSolid.Kernel.Automating.PropertyType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.PropertyType.html",
    "title": "Enum PropertyType | TopSolid Automation website",
    "keywords": "Enum PropertyType Defines the various types of properties. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public enum PropertyType Remarks This enum is available since v7.8. Fields Name Description Boolean Boolean. Code Document (available since v7.17). DateTime Date and time. Document Document (available since v7.17). Enumeration Enumeration (available since v7.12). Integer Integer. None Undefined type. Real Real. Text Text. Unclassified Unclassified type. UserEnumeration User defined enumeration (available since v7.12)."
  },
  "api/kernel/TopSolid.Kernel.Automating.Real.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Real.html",
    "title": "Struct Real | TopSolid Automation website",
    "keywords": "Struct Real Represents a real value with units. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 9, 0, 0)] public struct Real Remarks This structure is available since v7.9. Constructors Real(UnitType, String, Double) Initializes a new instance of the Real structure. Declaration public Real(UnitType inUnitType, string inUnitSymbol, double inValue) Parameters Type Name Description UnitType inUnitType Type of units. System.String inUnitSymbol Unit symbol in English. System.Double inValue Value in SI units. Fields UnitSymbol Unit symbol in English. Declaration public string UnitSymbol Field Value Type Description System.String UnitType Unit type. Declaration public UnitType UnitType Field Value Type Description UnitType Value Value in SI units. Declaration public double Value Field Value Type Description System.Double"
  },
  "api/kernel/TopSolid.Kernel.Automating.RealParameterConstraintsMode.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.RealParameterConstraintsMode.html",
    "title": "Enum RealParameterConstraintsMode | TopSolid Automation website",
    "keywords": "Enum RealParameterConstraintsMode Defines the various modes of real parameter constraints. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public enum RealParameterConstraintsMode Remarks This enum is available since v7.17.000.000. Fields Name Description Check Check that the constraints are satisfied at specified tolerance. CheckAndAdjust Check that the constraints are satisfied at specified tolerance and adjust at zero tolerance. None Not used. Solve Solve the constraints."
  },
  "api/kernel/TopSolid.Kernel.Automating.RealParameterDiscretizationMode.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.RealParameterDiscretizationMode.html",
    "title": "Enum RealParameterDiscretizationMode | TopSolid Automation website",
    "keywords": "Enum RealParameterDiscretizationMode Defines the various modes of real parameter constraints. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public enum RealParameterDiscretizationMode Remarks This enum is available since v7.17.000.000. Fields Name Description InferiorValue Use inferior discrete value. NearestValue Use nearest discrete value. None No discretization. SuperiorValue Use superior discrete value."
  },
  "api/kernel/TopSolid.Kernel.Automating.RealProperty.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.RealProperty.html",
    "title": "Class RealProperty | TopSolid Automation website",
    "keywords": "Class RealProperty Represents a real property. Inheritance System.Object Property RealProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 12, 0, 0)] public class RealProperty : Property Remarks This class is available since v7.12. Constructors RealProperty(Real) Initializes a new instance of the RealProperty class. Declaration public RealProperty(Real inValue) Parameters Type Name Description Real inValue Value. Fields Value Value. Declaration public Real Value Field Value Type Description Real Properties Type Gets the property type. Declaration public override PropertyType Type { get; } Property Value Type Description PropertyType Overrides Property.Type"
  },
  "api/kernel/TopSolid.Kernel.Automating.RenderMode.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.RenderMode.html",
    "title": "Enum RenderMode | TopSolid Automation website",
    "keywords": "Enum RenderMode Defines the various types of graphic views render modes. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public enum RenderMode Remarks This enum is available since v7.7. Fields Name Description Constant Constant shading. DashedHiddenEdges Hidden-line rendering with dashed hidden edges. Gouraud Gouraud shading. GouraudWithDashedHiddenEdges Gouraud shading with dashed hidden edges. GouraudWithEdges Gouraud shading with edges and wireframe. GouraudWithEdgesAndSilhouettes Gouraud shading with edges and silhouettes. GouraudWithHiddenWireframe Gouraud shading with hidden wireframe. HiddenEdges Hidden-line rendering. Realistic Realistic rendering. RealisticWithEdges Realistic rendering with edges. RealisticWithEffects Realistic rendering with effects. RealisticWithEffectsAndEdges Realistic rendering with effects and edges. Wireframe Wireframe rendering. Zebra Zebra analysis."
  },
  "api/kernel/TopSolid.Kernel.Automating.ScriptType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ScriptType.html",
    "title": "Enum ScriptType | TopSolid Automation website",
    "keywords": "Enum ScriptType Defines the various types of scripts. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 400, 220)] public enum ScriptType Remarks This enum is available since v7.17. Fields Name Description CSharp CSharp None No script type defined. VB VB.NET"
  },
  "api/kernel/TopSolid.Kernel.Automating.ShapeType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ShapeType.html",
    "title": "Enum ShapeType | TopSolid Automation website",
    "keywords": "Enum ShapeType Defines the various types of shapes. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum ShapeType Remarks This enum is available since v7.6. Fields Name Description Empty Empty. Sheet Sheet. Solid Solid. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartAxis2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartAxis2D.html",
    "title": "Class SmartAxis2D | TopSolid Automation website",
    "keywords": "Class SmartAxis2D Represents a 2D smart axis. Inheritance System.Object SmartObject SmartAxis2D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public class SmartAxis2D : SmartObject Remarks This class is available since v7.7. Constructors SmartAxis2D(Axis2D, Double, Double) Initializes a new instance of the SmartAxis2D class of type Basic . Declaration public SmartAxis2D(Axis2D inGeometry, double inExtentXMin, double inExtentXMax) Parameters Type Name Description Axis2D inGeometry Geometry. System.Double inExtentXMin Minimum X coordinate of extent. System.Double inExtentXMax Maximum X coordinate of extent. SmartAxis2D(ElementId, Boolean) Initializes a new instance of the SmartAxis2D class of type Element . Declaration public SmartAxis2D(ElementId inElementId, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. System.Boolean inIsReversed Provided axis direction is to be reversed. SmartAxis2D(ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartAxis2D class of type Item . Declaration public SmartAxis2D(ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. System.Boolean inIsReversed Provided axis direction is to be reversed. SmartAxis2D(SmartAxis2DType, Nullable<Axis2D>, Nullable<Double>, Nullable<Double>, ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartAxis2D class. Declaration public SmartAxis2D(SmartAxis2DType inType, Axis2D? inGeometry, double? inExtentMin, double? inExtentMax, ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description SmartAxis2DType inType Type of smart axis. System.Nullable < Axis2D > inGeometry Geometry, or null if unknown. System.Nullable < System.Double > inExtentMin Minimum axis coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentMax Maximum axis coordinate of extent, or null if unknown. ElementId inElementId Identifier of providing element, or Empty if none. ItemLabel inItemLabel Label of providing element item, or Empty if none. System.Boolean inIsReversed Provided axis direction is to be reversed. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId ExtentMax Maximum axis coordinate of extent, or null if unknown. Declaration public double? ExtentMax Field Value Type Description System.Nullable < System.Double > ExtentMin Minimum axis coordinate of extent, or null if unknown. Declaration public double? ExtentMin Field Value Type Description System.Nullable < System.Double > Geometry Geometry, or null if unknown. Declaration public Axis2D? Geometry Field Value Type Description System.Nullable < Axis2D > IsReversed Whether the provided axis direction is to be reversed. Declaration public bool IsReversed Field Value Type Description System.Boolean ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel OX (O,+X) absolute axis. Declaration public static readonly SmartAxis2D OX Field Value Type Description SmartAxis2D OY (O,+Y) absolute axis. Declaration public static readonly SmartAxis2D OY Field Value Type Description SmartAxis2D Type Type of smart axis. Declaration public SmartAxis2DType Type Field Value Type Description SmartAxis2DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartAxis2DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartAxis2DType.html",
    "title": "Enum SmartAxis2DType | TopSolid Automation website",
    "keywords": "Enum SmartAxis2DType Defines the various types of 2D smart axes. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public enum SmartAxis2DType Remarks This enum is available since v7.7. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartAxis3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartAxis3D.html",
    "title": "Class SmartAxis3D | TopSolid Automation website",
    "keywords": "Class SmartAxis3D Represents a 3D smart axis. Inheritance System.Object SmartObject SmartAxis3D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public class SmartAxis3D : SmartObject Remarks This class is available since v7.6. Constructors SmartAxis3D(Axis3D, Double, Double) Initializes a new instance of the SmartAxis3D class of type Basic . Declaration public SmartAxis3D(Axis3D inGeometry, double inExtentXMin, double inExtentXMax) Parameters Type Name Description Axis3D inGeometry Geometry. System.Double inExtentXMin Minimum X coordinate of extent. System.Double inExtentXMax Maximum X coordinate of extent. SmartAxis3D(ElementId, Boolean) Initializes a new instance of the SmartAxis3D class of type Element . Declaration public SmartAxis3D(ElementId inElementId, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. System.Boolean inIsReversed Provided axis direction is to be reversed. SmartAxis3D(ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartAxis3D class of type Item . Declaration public SmartAxis3D(ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. System.Boolean inIsReversed Provided axis direction is to be reversed. SmartAxis3D(SmartAxis3DType, Nullable<Axis3D>, Nullable<Double>, Nullable<Double>, ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartAxis3D class. Declaration public SmartAxis3D(SmartAxis3DType inType, Axis3D? inGeometry, double? inExtentMin, double? inExtentMax, ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description SmartAxis3DType inType Type of smart axis. System.Nullable < Axis3D > inGeometry Geometry, or null if unknown. System.Nullable < System.Double > inExtentMin Minimum axis coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentMax Maximum axis coordinate of extent, or null if unknown. ElementId inElementId Identifier of providing element, or Empty if none. ItemLabel inItemLabel Label of providing element item, or Empty if none. System.Boolean inIsReversed Provided axis direction is to be reversed. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId ExtentMax Maximum axis coordinate of extent, or null if unknown. Declaration public double? ExtentMax Field Value Type Description System.Nullable < System.Double > ExtentMin Minimum axis coordinate of extent, or null if unknown. Declaration public double? ExtentMin Field Value Type Description System.Nullable < System.Double > Geometry Geometry, or null if unknown. Declaration public Axis3D? Geometry Field Value Type Description System.Nullable < Axis3D > IsReversed Whether the provided axis direction is to be reversed. Declaration public bool IsReversed Field Value Type Description System.Boolean ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel OX (O,+X) absolute axis. Declaration public static readonly SmartAxis3D OX Field Value Type Description SmartAxis3D OY (O,+Y) absolute axis. Declaration public static readonly SmartAxis3D OY Field Value Type Description SmartAxis3D OZ (O,+Z) absolute axis. Declaration public static readonly SmartAxis3D OZ Field Value Type Description SmartAxis3D Type Type of smart axis. Declaration public SmartAxis3DType Type Field Value Type Description SmartAxis3DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartAxis3DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartAxis3DType.html",
    "title": "Enum SmartAxis3DType | TopSolid Automation website",
    "keywords": "Enum SmartAxis3DType Defines the various types of 3D smart axes. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum SmartAxis3DType Remarks This enum is available since v7.6. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartBoolean.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartBoolean.html",
    "title": "Class SmartBoolean | TopSolid Automation website",
    "keywords": "Class SmartBoolean Represents a smart Boolean value. Inheritance System.Object SmartObject SmartBoolean Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public class SmartBoolean : SmartObject Remarks This class is available since v7.6. Constructors SmartBoolean(Boolean) Initializes a new instance of the SmartBoolean class of type Basic . Declaration public SmartBoolean(bool inValue) Parameters Type Name Description System.Boolean inValue Value. SmartBoolean(String) Initializes a new instance of the SmartBoolean class of type Formula . Declaration public SmartBoolean(string inFormula) Parameters Type Name Description System.String inFormula Formula. SmartBoolean(String, ScriptType) Initializes a new instance of the SmartBoolean class of type Formula . Declaration public SmartBoolean(string inFormula, ScriptType inScriptType) Parameters Type Name Description System.String inFormula Formula. ScriptType inScriptType ScripType SmartBoolean(ElementId) Initializes a new instance of the SmartBoolean class of type Element . Declaration public SmartBoolean(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartBoolean(ElementId, ItemLabel) Initializes a new instance of the SmartBoolean class of type Item . Declaration public SmartBoolean(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. SmartBoolean(SmartBooleanType, Nullable<Boolean>, ElementId, ItemLabel, String) Initializes a new instance of the SmartBoolean class. Declaration public SmartBoolean(SmartBooleanType inType, bool? inValue, ElementId inElementId, ItemLabel inItemLabel, string inFormula) Parameters Type Name Description SmartBooleanType inType Type of smart Boolean. System.Nullable < System.Boolean > inValue Value, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.String inFormula Formula, or null for none. SmartBoolean(SmartBooleanType, Nullable<Boolean>, ElementId, ItemLabel, String, ScriptType) Initializes a new instance of the SmartBoolean class. Declaration public SmartBoolean(SmartBooleanType inType, bool? inValue, ElementId inElementId, ItemLabel inItemLabel, string inFormula, ScriptType inScriptType) Parameters Type Name Description SmartBooleanType inType Type of smart Boolean. System.Nullable < System.Boolean > inValue Value, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.String inFormula Formula, or null for none. ScriptType inScriptType ScripType Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId Formula Formula, or null if none. Declaration public string Formula Field Value Type Description System.String ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel ScriptType Type of script. Declaration public ScriptType ScriptType Field Value Type Description ScriptType Type Type of smart Boolean. Declaration public SmartBooleanType Type Field Value Type Description SmartBooleanType Value Value, or null if unknown. Declaration public bool? Value Field Value Type Description System.Nullable < System.Boolean >"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartBooleanType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartBooleanType.html",
    "title": "Enum SmartBooleanType | TopSolid Automation website",
    "keywords": "Enum SmartBooleanType Defines the various types of smart Boolean values. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum SmartBooleanType Remarks This enum is available since v7.6. Fields Name Description Basic Basic. Element Provided by an element. Formula Formula. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartCode.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartCode.html",
    "title": "Class SmartCode | TopSolid Automation website",
    "keywords": "Class SmartCode Represents a smart code. Inheritance System.Object SmartObject SmartCode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public class SmartCode : SmartObject Remarks This class is available since v7.17. Constructors SmartCode(String) Initializes a new instance of the SmartCode class of type Basic . Declaration public SmartCode(string inValue) Parameters Type Name Description System.String inValue The value. SmartCode(ElementId) Initializes a new instance of the SmartCode class of type Element . Declaration public SmartCode(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId Type Type of code. Declaration public SmartCodeType Type Field Value Type Description SmartCodeType Value Value, or null if unknown. Declaration public string Value Field Value Type Description System.String"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartCodeType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartCodeType.html",
    "title": "Enum SmartCodeType | TopSolid Automation website",
    "keywords": "Enum SmartCodeType Defines the various types of smart codes. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public enum SmartCodeType Remarks This enum is available since v7.17. Fields Name Description Basic Basic. Element Provided by an element. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartDirection2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartDirection2D.html",
    "title": "Class SmartDirection2D | TopSolid Automation website",
    "keywords": "Class SmartDirection2D Represents a 2D smart direction. Inheritance System.Object SmartObject SmartDirection2D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public class SmartDirection2D : SmartObject Remarks This class is available since v7.7. Constructors SmartDirection2D(Direction2D, Point2D) Initializes a new instance of the SmartDirection2D class of type Basic . Declaration public SmartDirection2D(Direction2D inGeometry, Point2D inHelpPoint) Parameters Type Name Description Direction2D inGeometry Direction geometry. Point2D inHelpPoint Help point. SmartDirection2D(ElementId, Boolean) Initializes a new instance of the SmartDirection2D class of type Element . Declaration public SmartDirection2D(ElementId inElementId, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. System.Boolean inIsReversed Provided direction is to be reversed. SmartDirection2D(ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartDirection2D class of type Item . Declaration public SmartDirection2D(ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. System.Boolean inIsReversed Provided direction is to be reversed. SmartDirection2D(SmartDirection2DType, Nullable<Direction2D>, Nullable<Point2D>, ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartDirection2D class. Declaration public SmartDirection2D(SmartDirection2DType inType, Direction2D? inGeometry, Point2D? inHelpPoint, ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description SmartDirection2DType inType Type of smart direction. System.Nullable < Direction2D > inGeometry Geometry, or null if unknown. System.Nullable < Point2D > inHelpPoint Help point, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.Boolean inIsReversed Provided direction is to be reversed. Fields DX Positive X direction, i.e. (1,0). Declaration public static readonly SmartDirection2D DX Field Value Type Description SmartDirection2D DY Positive Y direction, i.e. (0,1). Declaration public static readonly SmartDirection2D DY Field Value Type Description SmartDirection2D ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId Geometry Direction geometry, or null if unknown. Declaration public Direction2D? Geometry Field Value Type Description System.Nullable < Direction2D > HelpPoint Help point, or null if unknown. Declaration public Point2D? HelpPoint Field Value Type Description System.Nullable < Point2D > IsReversed Whether the provided direction is to be reversed. Declaration public bool IsReversed Field Value Type Description System.Boolean ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel Type Type of smart direction. Declaration public SmartDirection2DType Type Field Value Type Description SmartDirection2DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartDirection2DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartDirection2DType.html",
    "title": "Enum SmartDirection2DType | TopSolid Automation website",
    "keywords": "Enum SmartDirection2DType Defines the various types of 2D smart directions. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public enum SmartDirection2DType Remarks This enum is available since v7.7. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartDirection3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartDirection3D.html",
    "title": "Class SmartDirection3D | TopSolid Automation website",
    "keywords": "Class SmartDirection3D Represents a 3D smart direction. Inheritance System.Object SmartObject SmartDirection3D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public class SmartDirection3D : SmartObject Remarks This class is available since v7.6. Constructors SmartDirection3D(Direction3D, Point3D) Initializes a new instance of the SmartDirection3D class of type Basic . Declaration public SmartDirection3D(Direction3D inGeometry, Point3D inHelpPoint) Parameters Type Name Description Direction3D inGeometry Direction geometry. Point3D inHelpPoint Help point. SmartDirection3D(ElementId, Boolean) Initializes a new instance of the SmartDirection3D class of type Element . Declaration public SmartDirection3D(ElementId inElementId, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. System.Boolean inIsReversed Provided direction is to be reversed. SmartDirection3D(ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartDirection3D class of type Item . Declaration public SmartDirection3D(ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. System.Boolean inIsReversed Provided direction is to be reversed. SmartDirection3D(SmartDirection3DType, Nullable<Direction3D>, Nullable<Point3D>, ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartDirection3D class. Declaration public SmartDirection3D(SmartDirection3DType inType, Direction3D? inGeometry, Point3D? inHelpPoint, ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description SmartDirection3DType inType Type of smart direction. System.Nullable < Direction3D > inGeometry Geometry, or null if unknown. System.Nullable < Point3D > inHelpPoint Help point, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.Boolean inIsReversed Provided direction is to be reversed. Fields DX Positive X direction, i.e. (1,0,0). Declaration public static readonly SmartDirection3D DX Field Value Type Description SmartDirection3D DY Positive Y direction, i.e. (0,1,0). Declaration public static readonly SmartDirection3D DY Field Value Type Description SmartDirection3D DZ Positive Z direction, i.e. (0,0,1). Declaration public static readonly SmartDirection3D DZ Field Value Type Description SmartDirection3D ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId Geometry Direction geometry, or null if unknown. Declaration public Direction3D? Geometry Field Value Type Description System.Nullable < Direction3D > HelpPoint Help point, or null if unknown. Declaration public Point3D? HelpPoint Field Value Type Description System.Nullable < Point3D > IsReversed Whether the provided direction is to be reversed. Declaration public bool IsReversed Field Value Type Description System.Boolean ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel Type Type of smart direction. Declaration public SmartDirection3DType Type Field Value Type Description SmartDirection3DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartDirection3DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartDirection3DType.html",
    "title": "Enum SmartDirection3DType | TopSolid Automation website",
    "keywords": "Enum SmartDirection3DType Defines the various types of 3D smart directions. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum SmartDirection3DType Remarks This enum is available since v7.6. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartDocument.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartDocument.html",
    "title": "Class SmartDocument | TopSolid Automation website",
    "keywords": "Class SmartDocument Represents a smart document value. Inheritance System.Object SmartObject SmartDocument SmartFamily SmartTexture Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public abstract class SmartDocument : SmartObject Remarks This class is available since v7.17. Constructors SmartDocument(DocumentId) Initializes a new instance of the SmartDocument class of type Basic Declaration public SmartDocument(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. SmartDocument(DocumentId, DocumentReferenceType) Initializes a new instance of the SmartDocument class of type Basic Declaration public SmartDocument(DocumentId inDocumentId, DocumentReferenceType inReferenceType) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. DocumentReferenceType inReferenceType Document reference type of the SmartDocument. SmartDocument(ElementId) Initializes a new instance of the SmartDocument class of type Element . Declaration public SmartDocument(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartDocument(ElementId, DocumentReferenceType) Initializes a new instance of the SmartDocument class of type Element . Declaration public SmartDocument(ElementId inElementId, DocumentReferenceType inReferenceType) Parameters Type Name Description ElementId inElementId Identifier of providing element. DocumentReferenceType inReferenceType Document reference type of the SmartDocument. Fields Document Document of the smart object. Declaration public DocumentId Document Field Value Type Description DocumentId ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId ReferenceType Providing element item label, or empty if none. Declaration public DocumentReferenceType ReferenceType Field Value Type Description DocumentReferenceType Type Type of smart document. Declaration public SmartDocumentType Type Field Value Type Description SmartDocumentType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartDocumentType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartDocumentType.html",
    "title": "Enum SmartDocumentType | TopSolid Automation website",
    "keywords": "Enum SmartDocumentType Defines the various types of smart document. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public enum SmartDocumentType Remarks This enum is available since v7.17.000.000. Fields Name Description Basic Basic. Element Provided by an element. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartEnumeration.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartEnumeration.html",
    "title": "Class SmartEnumeration | TopSolid Automation website",
    "keywords": "Class SmartEnumeration Represents a smart enumeration value. Inheritance System.Object SmartObject SmartEnumeration Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public class SmartEnumeration : SmartObject Remarks This class is available since v7.8. Constructors SmartEnumeration(Guid, Int32) Initializes a new instance of the SmartEnumeration class of type Basic . Declaration public SmartEnumeration(Guid inEnumGuid, int inValue) Parameters Type Name Description System.Guid inEnumGuid Enumeration GUID. System.Int32 inValue Value. SmartEnumeration(ElementId) Initializes a new instance of the SmartEnumeration class of type Element . Declaration public SmartEnumeration(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartEnumeration(ElementId, ItemLabel) Initializes a new instance of the SmartEnumeration class of type Item . Declaration public SmartEnumeration(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. SmartEnumeration(SmartEnumerationType, Guid, Nullable<Int32>, ElementId, ItemLabel) Initializes a new instance of the SmartEnumeration class. Declaration public SmartEnumeration(SmartEnumerationType inType, Guid inEnumGuid, int? inValue, ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description SmartEnumerationType inType Type of smart enumeration. System.Guid inEnumGuid Enumeration GUID. System.Nullable < System.Int32 > inValue Value, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId EnumGuid Enumeration GUID. Declaration public Guid EnumGuid Field Value Type Description System.Guid ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel Type Type of smart enumeration. Declaration public SmartEnumerationType Type Field Value Type Description SmartEnumerationType Value Value, or null if unknown. Declaration public int? Value Field Value Type Description System.Nullable < System.Int32 >"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartEnumerationType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartEnumerationType.html",
    "title": "Enum SmartEnumerationType | TopSolid Automation website",
    "keywords": "Enum SmartEnumerationType Defines the various types of smart enumeration values. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public enum SmartEnumerationType Remarks This enum is available since v7.8. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartFamily.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartFamily.html",
    "title": "Class SmartFamily | TopSolid Automation website",
    "keywords": "Class SmartFamily Represents a smart family. Inheritance System.Object SmartObject SmartDocument SmartFamily Inherited Members SmartDocument.Type SmartDocument.Document SmartDocument.ElementId SmartDocument.ReferenceType System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public class SmartFamily : SmartDocument Remarks This class is available since v7.17. Constructors SmartFamily(DocumentId) Initializes a new instance of the SmartFamily class of type Basic Declaration public SmartFamily(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. SmartFamily(DocumentId, DocumentReferenceType) Initializes a new instance of the SmartFamily class of type Basic Declaration public SmartFamily(DocumentId inDocumentId, DocumentReferenceType inReferenceType) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. DocumentReferenceType inReferenceType Document reference type of the SmartDocument. SmartFamily(ElementId) Initializes a new instance of the SmartFamily class of type Element . Declaration public SmartFamily(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartFamily(ElementId, DocumentReferenceType) Initializes a new instance of the SmartFamily class of type Element . Declaration public SmartFamily(ElementId inElementId, DocumentReferenceType inReferenceType) Parameters Type Name Description ElementId inElementId Identifier of providing element. DocumentReferenceType inReferenceType Document reference type of the SmartDocument."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartFrame2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartFrame2D.html",
    "title": "Class SmartFrame2D | TopSolid Automation website",
    "keywords": "Class SmartFrame2D Represents a 2D smart frame. Inheritance System.Object SmartObject SmartFrame2D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public class SmartFrame2D : SmartObject Remarks This class is available since v7.7. Constructors SmartFrame2D(ElementId) Initializes a new instance of the SmartFrame2D class of type Element . Declaration public SmartFrame2D(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartFrame2D(ElementId, ItemLabel) Initializes a new instance of the SmartFrame2D class of type Item . Declaration public SmartFrame2D(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. SmartFrame2D(Frame2D, Double, Double, Double, Double) Initializes a new instance of the SmartFrame2D class of type Basic . Declaration public SmartFrame2D(Frame2D inGeometry, double inExtentXMin, double inExtentXMax, double inExtentYMin, double inExtentYMax) Parameters Type Name Description Frame2D inGeometry Geometry. System.Double inExtentXMin Minimum X coordinate of extent. System.Double inExtentXMax Maximum X coordinate of extent. System.Double inExtentYMin Minimum Y coordinate of extent. System.Double inExtentYMax Maximum Y coordinate of extent. SmartFrame2D(SmartFrame2DType, Nullable<Frame2D>, Nullable<Double>, Nullable<Double>, Nullable<Double>, Nullable<Double>, ElementId, ItemLabel) Initializes a new instance of the SmartFrame2D class. Declaration public SmartFrame2D(SmartFrame2DType inType, Frame2D? inGeometry, double? inExtentXMin, double? inExtentXMax, double? inExtentYMin, double? inExtentYMax, ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description SmartFrame2DType inType Type of smart frame. System.Nullable < Frame2D > inGeometry Geometry, or null if unknown. System.Nullable < System.Double > inExtentXMin Minimum X coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentXMax Maximum X coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentYMin Minimum Y coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentYMax Maximum Y coordinate of extent, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId ExtentXMax Maximum X frame coordinate of extent, or null if unknown. Declaration public double? ExtentXMax Field Value Type Description System.Nullable < System.Double > ExtentXMin Minimum X frame coordinate of extent, or null if unknown. Declaration public double? ExtentXMin Field Value Type Description System.Nullable < System.Double > ExtentYMax Maximum Y frame coordinate of extent, or null if unknown. Declaration public double? ExtentYMax Field Value Type Description System.Nullable < System.Double > ExtentYMin Minimum Y frame coordinate of extent, or null if unknown. Declaration public double? ExtentYMin Field Value Type Description System.Nullable < System.Double > Geometry Geometry, or null if unknown. Declaration public Frame2D? Geometry Field Value Type Description System.Nullable < Frame2D > ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel OXY (O,+X,+Y) absolute frame. Declaration public static readonly SmartFrame2D OXY Field Value Type Description SmartFrame2D Type Type of smart frame. Declaration public SmartFrame2DType Type Field Value Type Description SmartFrame2DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartFrame2DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartFrame2DType.html",
    "title": "Enum SmartFrame2DType | TopSolid Automation website",
    "keywords": "Enum SmartFrame2DType Defines the various types of 2D smart frames. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public enum SmartFrame2DType Remarks This enum is available since v7.7. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartFrame3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartFrame3D.html",
    "title": "Class SmartFrame3D | TopSolid Automation website",
    "keywords": "Class SmartFrame3D Represents a 3D smart frame. Inheritance System.Object SmartObject SmartFrame3D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public class SmartFrame3D : SmartObject Remarks This class is available since v7.6. Constructors SmartFrame3D(ElementId, Boolean) Initializes a new instance of the SmartFrame3D class of type Element . Declaration public SmartFrame3D(ElementId inElementId, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. System.Boolean inIsReversed Provided frame Z direction is to be reversed. SmartFrame3D(ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartFrame3D class of type Item . Declaration public SmartFrame3D(ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. System.Boolean inIsReversed Provided frame Z direction is to be reversed. SmartFrame3D(Frame3D, Double, Double, Double, Double, Double, Double) Initializes a new instance of the SmartFrame3D class of type Basic . Declaration public SmartFrame3D(Frame3D inGeometry, double inExtentXMin, double inExtentXMax, double inExtentYMin, double inExtentYMax, double inExtentZMin, double inExtentZMax) Parameters Type Name Description Frame3D inGeometry Geometry. System.Double inExtentXMin Minimum X coordinate of extent. System.Double inExtentXMax Maximum X coordinate of extent. System.Double inExtentYMin Minimum Y coordinate of extent. System.Double inExtentYMax Maximum Y coordinate of extent. System.Double inExtentZMin Minimum Z coordinate of extent. System.Double inExtentZMax Maximum Z coordinate of extent. SmartFrame3D(SmartFrame3D, SmartAxis3D, SmartReal) Initializes a new instance of the SmartFrame3D class as a pivoted frame. Declaration public SmartFrame3D(SmartFrame3D inReferenceFrame, SmartAxis3D inRotationAxis, SmartReal inRotationAngle) Parameters Type Name Description SmartFrame3D inReferenceFrame Reference frame. SmartAxis3D inRotationAxis Rotation axis. SmartReal inRotationAngle Rotation angle. SmartFrame3D(SmartFrame3D, SmartDirection3D, SmartReal) Initializes a new instance of the SmartFrame3D class as an offset frame. Declaration public SmartFrame3D(SmartFrame3D inReferenceFrame, SmartDirection3D inDirection, SmartReal inDistance) Parameters Type Name Description SmartFrame3D inReferenceFrame Reference frame. SmartDirection3D inDirection Direction. SmartReal inDistance Offset distance. SmartFrame3D(SmartFrame3DType, Nullable<Frame3D>, Nullable<Double>, Nullable<Double>, Nullable<Double>, Nullable<Double>, Nullable<Double>, Nullable<Double>, ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartFrame3D class. Declaration public SmartFrame3D(SmartFrame3DType inType, Frame3D? inGeometry, double? inExtentXMin, double? inExtentXMax, double? inExtentYMin, double? inExtentYMax, double? inExtentZMin, double? inExtentZMax, ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description SmartFrame3DType inType Type of smart frame. System.Nullable < Frame3D > inGeometry Geometry, or null if unknown. System.Nullable < System.Double > inExtentXMin Minimum X coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentXMax Maximum X coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentYMin Minimum Y coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentYMax Maximum Y coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentZMin Minimum Z coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentZMax Maximum Z coordinate of extent, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.Boolean inIsReversed Provided frame Z direction is to be reversed. SmartFrame3D(SmartPlane3D, SmartPlane3D, SmartPlane3D, SmartReal, SmartReal) Initializes a new instance of the SmartFrame3D class as frame by three planes. Declaration public SmartFrame3D(SmartPlane3D inOXYPlane, SmartPlane3D inFirstPlane, SmartPlane3D inSecondPlane, SmartReal inFirstDistance, SmartReal inSecondDistance) Parameters Type Name Description SmartPlane3D inOXYPlane Oxy plane. SmartPlane3D inFirstPlane First plane. SmartPlane3D inSecondPlane Sec�nd plane. SmartReal inFirstDistance Distance to the first plane. SmartReal inSecondDistance Distance to the second plane. SmartFrame3D(SmartPlane3D, SmartPoint3D, SmartAxis3D, SmartDirection3D) Initializes a new instance of the SmartFrame3D class as frame on a plane. Declaration public SmartFrame3D(SmartPlane3D inOXYPlane, SmartPoint3D inProjectedPoint, SmartAxis3D inIntersectionAxis, SmartDirection3D inXDirection) Parameters Type Name Description SmartPlane3D inOXYPlane Oxy plane. SmartPoint3D inProjectedPoint Projected Point SmartAxis3D inIntersectionAxis Intersection axis. SmartDirection3D inXDirection X Direction. SmartFrame3D(SmartPoint3D, SmartDirection3D, Boolean, SmartDirection3D) Initializes a new instance of the SmartFrame3D class using a point and two directions. Declaration public SmartFrame3D(SmartPoint3D inOriginPoint, SmartDirection3D inXDirection, bool inIsYDirection, SmartDirection3D inYOrZDirection) Parameters Type Name Description SmartPoint3D inOriginPoint The origin point. SmartDirection3D inXDirection The x direction. System.Boolean inIsYDirection If set to true [in is y direction]. SmartDirection3D inYOrZDirection The y or z direction. SmartFrame3D(SmartPoint3D, SmartPoint3D, SmartPoint3D) Initializes a new instance of the SmartFrame3D class as frame by three points. Declaration public SmartFrame3D(SmartPoint3D inOrigin, SmartPoint3D inPointTowardsX, SmartPoint3D inPointTowardsY) Parameters Type Name Description SmartPoint3D inOrigin Origin point. SmartPoint3D inPointTowardsX Point towards X. SmartPoint3D inPointTowardsY Point towards Y. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId ExtentXMax Maximum X frame coordinate of extent, or null if unknown. Declaration public double? ExtentXMax Field Value Type Description System.Nullable < System.Double > ExtentXMin Minimum X frame coordinate of extent, or null if unknown. Declaration public double? ExtentXMin Field Value Type Description System.Nullable < System.Double > ExtentYMax Maximum Y frame coordinate of extent, or null if unknown. Declaration public double? ExtentYMax Field Value Type Description System.Nullable < System.Double > ExtentYMin Minimum Y frame coordinate of extent, or null if unknown. Declaration public double? ExtentYMin Field Value Type Description System.Nullable < System.Double > ExtentZMax Maximum Z frame coordinate of extent, or null if unknown. Declaration public double? ExtentZMax Field Value Type Description System.Nullable < System.Double > ExtentZMin Minimum Z frame coordinate of extent, or null if unknown. Declaration public double? ExtentZMin Field Value Type Description System.Nullable < System.Double > Geometry Geometry, or null if unknown. Declaration public Frame3D? Geometry Field Value Type Description System.Nullable < Frame3D > IsReversed Whether the provided frame Z direction is to be reversed. Declaration public bool IsReversed Field Value Type Description System.Boolean ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel OXYZ (O,+X,+Y,+Z) absolute frame. Declaration public static readonly SmartFrame3D OXYZ Field Value Type Description SmartFrame3D Type Type of smart frame. Declaration public SmartFrame3DType Type Field Value Type Description SmartFrame3DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartFrame3DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartFrame3DType.html",
    "title": "Enum SmartFrame3DType | TopSolid Automation website",
    "keywords": "Enum SmartFrame3DType Defines the various types of 3D smart frames. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum SmartFrame3DType Remarks This enum is available since v7.6. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Provided Provided. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartInteger.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartInteger.html",
    "title": "Class SmartInteger | TopSolid Automation website",
    "keywords": "Class SmartInteger Represents a smart integer value. Inheritance System.Object SmartObject SmartInteger Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public class SmartInteger : SmartObject Remarks This class is available since v7.6. Constructors SmartInteger(Int32) Initializes a new instance of the SmartInteger class of type Basic . Declaration public SmartInteger(int inValue) Parameters Type Name Description System.Int32 inValue Value. SmartInteger(String) Initializes a new instance of the SmartInteger class of type Formula . Declaration public SmartInteger(string inFormula) Parameters Type Name Description System.String inFormula Formula. SmartInteger(String, ScriptType) Initializes a new instance of the SmartInteger class of type Formula . Declaration public SmartInteger(string inFormula, ScriptType inScriptType) Parameters Type Name Description System.String inFormula Formula. ScriptType inScriptType ScripType SmartInteger(ElementId) Initializes a new instance of the SmartInteger class of type Element . Declaration public SmartInteger(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartInteger(ElementId, ItemLabel) Initializes a new instance of the SmartInteger class of type Item . Declaration public SmartInteger(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. SmartInteger(SmartIntegerType, Nullable<Int32>, ElementId, ItemLabel, String) Initializes a new instance of the SmartInteger class. Declaration public SmartInteger(SmartIntegerType inType, int? inValue, ElementId inElementId, ItemLabel inItemLabel, string inFormula) Parameters Type Name Description SmartIntegerType inType Type of smart integer. System.Nullable < System.Int32 > inValue Value, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.String inFormula Formula, or null for none. SmartInteger(SmartIntegerType, Nullable<Int32>, ElementId, ItemLabel, String, ScriptType) Initializes a new instance of the SmartInteger class. Declaration public SmartInteger(SmartIntegerType inType, int? inValue, ElementId inElementId, ItemLabel inItemLabel, string inFormula, ScriptType inScriptType) Parameters Type Name Description SmartIntegerType inType Type of smart integer. System.Nullable < System.Int32 > inValue Value, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.String inFormula Formula, or null for none. ScriptType inScriptType ScripType Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId Formula Formula, or null if none. Declaration public string Formula Field Value Type Description System.String ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel ScriptType Type of script. Declaration public ScriptType ScriptType Field Value Type Description ScriptType Type Type of smart integer. Declaration public SmartIntegerType Type Field Value Type Description SmartIntegerType Value Value, or null if unknown. Declaration public int? Value Field Value Type Description System.Nullable < System.Int32 >"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartIntegerType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartIntegerType.html",
    "title": "Enum SmartIntegerType | TopSolid Automation website",
    "keywords": "Enum SmartIntegerType Defines the various types of smart integer values. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum SmartIntegerType Remarks This enum is available since v7.6. Fields Name Description Basic Basic. Element Provided by an element. Formula Formula. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartObject.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartObject.html",
    "title": "Class SmartObject | TopSolid Automation website",
    "keywords": "Class SmartObject Represents a general smart object. Inheritance System.Object SmartObject SmartAxis2D SmartAxis3D SmartBoolean SmartCode SmartDirection2D SmartDirection3D SmartDocument SmartEnumeration SmartFrame2D SmartFrame3D SmartInteger SmartPlane3D SmartPoint2D SmartPoint3D SmartProfile2D SmartProfile3D SmartReal SmartSection3D SmartShape SmartText SmartUserEnumeration Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public abstract class SmartObject Remarks This class is available since v7.6."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartPlane3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartPlane3D.html",
    "title": "Class SmartPlane3D | TopSolid Automation website",
    "keywords": "Class SmartPlane3D Represents a 3D smart plane. Inheritance System.Object SmartObject SmartPlane3D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public class SmartPlane3D : SmartObject Remarks This class is available since v7.6. Constructors SmartPlane3D(ElementId, Boolean) Initializes a new instance of the SmartPlane3D class of type Element . Declaration public SmartPlane3D(ElementId inElementId, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. System.Boolean inIsReversed Provided plane Z direction is to be reversed. SmartPlane3D(ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartPlane3D class of type Item . Declaration public SmartPlane3D(ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. System.Boolean inIsReversed Provided plane Z direction is to be reversed. SmartPlane3D(Plane3D, Double, Double, Double, Double) Initializes a new instance of the SmartPlane3D class of type Basic . Declaration public SmartPlane3D(Plane3D inGeometry, double inExtentXMin, double inExtentXMax, double inExtentYMin, double inExtentYMax) Parameters Type Name Description Plane3D inGeometry Geometry. System.Double inExtentXMin Minimum X coordinate of extent. System.Double inExtentXMax Maximum X coordinate of extent. System.Double inExtentYMin Minimum Y coordinate of extent. System.Double inExtentYMax Maximum Y coordinate of extent. SmartPlane3D(SmartPlane3DType, Nullable<Plane3D>, Nullable<Double>, Nullable<Double>, Nullable<Double>, Nullable<Double>, ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartPlane3D class. Declaration public SmartPlane3D(SmartPlane3DType inType, Plane3D? inGeometry, double? inExtentXMin, double? inExtentXMax, double? inExtentYMin, double? inExtentYMax, ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description SmartPlane3DType inType Type of smart plane. System.Nullable < Plane3D > inGeometry Geometry, or null if unknown. System.Nullable < System.Double > inExtentXMin Minimum X coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentXMax Maximum X coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentYMin Minimum Y coordinate of extent, or null if unknown. System.Nullable < System.Double > inExtentYMax Maximum Y coordinate of extent, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.Boolean inIsReversed Provided plane Z direction is to be reversed. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId ExtentXMax Maximum X plane coordinate of extent, or null if unknown. Declaration public double? ExtentXMax Field Value Type Description System.Nullable < System.Double > ExtentXMin Minimum X plane coordinate of extent, or null if unknown. Declaration public double? ExtentXMin Field Value Type Description System.Nullable < System.Double > ExtentYMax Maximum Y plane coordinate of extent, or null if unknown. Declaration public double? ExtentYMax Field Value Type Description System.Nullable < System.Double > ExtentYMin Minimum Y plane coordinate of extent, or null if unknown. Declaration public double? ExtentYMin Field Value Type Description System.Nullable < System.Double > Geometry Geometry, or null if unknown. Declaration public Plane3D? Geometry Field Value Type Description System.Nullable < Plane3D > IsReversed Whether the provided plane Z direction is to be reversed. Declaration public bool IsReversed Field Value Type Description System.Boolean ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel OXY (O,+X,+Y) absolute plane. Declaration public static readonly SmartPlane3D OXY Field Value Type Description SmartPlane3D OXZ (O,+X,+Z) absolute plane. Declaration public static readonly SmartPlane3D OXZ Field Value Type Description SmartPlane3D OYX (O,+Y,+X) absolute plane. Declaration public static readonly SmartPlane3D OYX Field Value Type Description SmartPlane3D OYZ (O,+Y,+Z) absolute plane. Declaration public static readonly SmartPlane3D OYZ Field Value Type Description SmartPlane3D OZX (O,+Z,+X) absolute plane. Declaration public static readonly SmartPlane3D OZX Field Value Type Description SmartPlane3D OZY (O,+Z,+Y) absolute plane. Declaration public static readonly SmartPlane3D OZY Field Value Type Description SmartPlane3D Type Type of plane. Declaration public SmartPlane3DType Type Field Value Type Description SmartPlane3DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartPlane3DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartPlane3DType.html",
    "title": "Enum SmartPlane3DType | TopSolid Automation website",
    "keywords": "Enum SmartPlane3DType Defines the various types of 3D smart planes. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum SmartPlane3DType Remarks This enum is available since v7.6. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartPoint2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartPoint2D.html",
    "title": "Class SmartPoint2D | TopSolid Automation website",
    "keywords": "Class SmartPoint2D Represents a 2D smart point. Inheritance System.Object SmartObject SmartPoint2D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public class SmartPoint2D : SmartObject Remarks This class is available since v7.7. Constructors SmartPoint2D(ElementId) Initializes a new instance of the SmartPoint2D class of type Element . Declaration public SmartPoint2D(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartPoint2D(ElementId, ItemLabel) Initializes a new instance of the SmartPoint2D class of type Item . Declaration public SmartPoint2D(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. SmartPoint2D(Point2D) Initializes a new instance of the SmartPoint2D class of type Basic . Declaration public SmartPoint2D(Point2D inGeometry) Parameters Type Name Description Point2D inGeometry Geometry. SmartPoint2D(SmartPoint2DType, Nullable<Point2D>, ElementId, ItemLabel) Initializes a new instance of the SmartPoint2D class. Declaration public SmartPoint2D(SmartPoint2DType inType, Point2D? inGeometry, ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description SmartPoint2DType inType Type of smart point. System.Nullable < Point2D > inGeometry Geometry, or null if unknown. ElementId inElementId Identifier of providing element, or Empty if none. ItemLabel inItemLabel Label of providing element item, or Empty if none. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId Geometry Geometry, or null if unknown. Declaration public Point2D? Geometry Field Value Type Description System.Nullable < Point2D > ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel P0 Origin point, i.e. (0,0). Declaration public static readonly SmartPoint2D P0 Field Value Type Description SmartPoint2D Type Type of point. Declaration public SmartPoint2DType Type Field Value Type Description SmartPoint2DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartPoint2DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartPoint2DType.html",
    "title": "Enum SmartPoint2DType | TopSolid Automation website",
    "keywords": "Enum SmartPoint2DType Defines the various types of 2D smart points. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public enum SmartPoint2DType Remarks This enum is available since v7.7. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartPoint3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartPoint3D.html",
    "title": "Class SmartPoint3D | TopSolid Automation website",
    "keywords": "Class SmartPoint3D Represents a 3D smart point. Inheritance System.Object SmartObject SmartPoint3D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public class SmartPoint3D : SmartObject Remarks This class is available since v7.6. Constructors SmartPoint3D(ElementId) Initializes a new instance of the SmartPoint3D class of type Element . Declaration public SmartPoint3D(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartPoint3D(ElementId, ItemLabel) Initializes a new instance of the SmartPoint3D class of type Item . Declaration public SmartPoint3D(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. SmartPoint3D(Point3D) Initializes a new instance of the SmartPoint3D class of type Basic . Declaration public SmartPoint3D(Point3D inGeometry) Parameters Type Name Description Point3D inGeometry Geometry. SmartPoint3D(SmartPoint3DType, Nullable<Point3D>, ElementId, ItemLabel) Initializes a new instance of the SmartPoint3D class. Declaration public SmartPoint3D(SmartPoint3DType inType, Point3D? inGeometry, ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description SmartPoint3DType inType Type of smart point. System.Nullable < Point3D > inGeometry Geometry, or null if unknown. ElementId inElementId Identifier of providing element, or Empty if none. ItemLabel inItemLabel Label of providing element item, or Empty if none. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId Geometry Geometry, or null if unknown. Declaration public Point3D? Geometry Field Value Type Description System.Nullable < Point3D > ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel P0 Origin point, i.e. (0,0,0). Declaration public static readonly SmartPoint3D P0 Field Value Type Description SmartPoint3D Type Type of point. Declaration public SmartPoint3DType Type Field Value Type Description SmartPoint3DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartPoint3DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartPoint3DType.html",
    "title": "Enum SmartPoint3DType | TopSolid Automation website",
    "keywords": "Enum SmartPoint3DType Defines the various types of 3D smart points. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum SmartPoint3DType Remarks This enum is available since v7.6. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartProfile2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartProfile2D.html",
    "title": "Class SmartProfile2D | TopSolid Automation website",
    "keywords": "Class SmartProfile2D Represents a 2D smart profile. Inheritance System.Object SmartObject SmartProfile2D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public class SmartProfile2D : SmartObject Remarks This class is available since v7.17. Constructors SmartProfile2D(ElementId, Boolean) Initializes a new instance of the SmartProfile2D class of type Element . Declaration public SmartProfile2D(ElementId inElementId, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. System.Boolean inIsReversed Provided profile orientation is to be reversed. SmartProfile2D(ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartProfile2D class of type Item . Declaration public SmartProfile2D(ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. System.Boolean inIsReversed Provided profile orientation is to be reversed. SmartProfile2D(SmartProfile2DType, ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartProfile2D class. Declaration public SmartProfile2D(SmartProfile2DType inType, ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description SmartProfile2DType inType Type of smart profile. ElementId inElementId Identifier of providing element, or Empty if none. ItemLabel inItemLabel Label of providing element item, or Empty if none. System.Boolean inIsReversed Provided profile orientation is to be reversed. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId IsReversed Whether the provided profile orientation is to be reversed. Declaration public bool IsReversed Field Value Type Description System.Boolean ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel Type Type of profile. Declaration public SmartProfile2DType Type Field Value Type Description SmartProfile2DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartProfile2DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartProfile2DType.html",
    "title": "Enum SmartProfile2DType | TopSolid Automation website",
    "keywords": "Enum SmartProfile2DType Defines the various types of 2D smart profiles. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public enum SmartProfile2DType Remarks This enum is available since v7.17. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartProfile3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartProfile3D.html",
    "title": "Class SmartProfile3D | TopSolid Automation website",
    "keywords": "Class SmartProfile3D Represents a 3D smart profile. Inheritance System.Object SmartObject SmartProfile3D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public class SmartProfile3D : SmartObject Remarks This class is available since v7.7. Constructors SmartProfile3D(ElementId, Boolean) Initializes a new instance of the SmartProfile3D class of type Element . Declaration public SmartProfile3D(ElementId inElementId, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. System.Boolean inIsReversed Provided profile orientation is to be reversed. SmartProfile3D(ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartProfile3D class of type Item . Declaration public SmartProfile3D(ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. System.Boolean inIsReversed Provided profile orientation is to be reversed. SmartProfile3D(SmartProfile3DType, ElementId, ItemLabel, Boolean) Initializes a new instance of the SmartProfile3D class. Declaration public SmartProfile3D(SmartProfile3DType inType, ElementId inElementId, ItemLabel inItemLabel, bool inIsReversed) Parameters Type Name Description SmartProfile3DType inType Type of smart profile. ElementId inElementId Identifier of providing element, or Empty if none. ItemLabel inItemLabel Label of providing element item, or Empty if none. System.Boolean inIsReversed Provided profile orientation is to be reversed. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId IsReversed Whether the provided profile orientation is to be reversed. Declaration public bool IsReversed Field Value Type Description System.Boolean ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel Type Type of profile. Declaration public SmartProfile3DType Type Field Value Type Description SmartProfile3DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartProfile3DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartProfile3DType.html",
    "title": "Enum SmartProfile3DType | TopSolid Automation website",
    "keywords": "Enum SmartProfile3DType Defines the various types of 3D smart profiles. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public enum SmartProfile3DType Remarks This enum is available since v7.7. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartReal.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartReal.html",
    "title": "Class SmartReal | TopSolid Automation website",
    "keywords": "Class SmartReal Represents a smart real value. Inheritance System.Object SmartObject SmartReal Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public class SmartReal : SmartObject Remarks This class is available since v7.6. Constructors SmartReal(ElementId) Initializes a new instance of the SmartReal class of type Element . Declaration public SmartReal(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartReal(ElementId, ItemLabel) Initializes a new instance of the SmartReal class of type Item . Declaration public SmartReal(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. SmartReal(SmartRealType, UnitType, String, Nullable<Double>, ElementId, ItemLabel, String) Initializes a new instance of the SmartReal class. Declaration public SmartReal(SmartRealType inType, UnitType inUnitType, string inUnitSymbol, double? inValue, ElementId inElementId, ItemLabel inItemLabel, string inFormula) Parameters Type Name Description SmartRealType inType Type of smart real. UnitType inUnitType Type of units, or None if unknown. System.String inUnitSymbol Unit symbol in English, or null if unknown. System.Nullable < System.Double > inValue Value in SI units, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.String inFormula Formula, or null for none. SmartReal(SmartRealType, UnitType, String, Nullable<Double>, ElementId, ItemLabel, String, ScriptType) Initializes a new instance of the SmartReal class. Declaration public SmartReal(SmartRealType inType, UnitType inUnitType, string inUnitSymbol, double? inValue, ElementId inElementId, ItemLabel inItemLabel, string inFormula, ScriptType inScriptType) Parameters Type Name Description SmartRealType inType Type of smart real. UnitType inUnitType Type of units, or None if unknown. System.String inUnitSymbol Unit symbol in English, or null if unknown. System.Nullable < System.Double > inValue Value in SI units, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.String inFormula Formula, or null for none. ScriptType inScriptType Type of script. SmartReal(UnitType, Double) Initializes a new instance of the SmartReal class of type Basic . Declaration public SmartReal(UnitType inUnitType, double inValue) Parameters Type Name Description UnitType inUnitType Type of units. System.Double inValue Value in SI units. SmartReal(UnitType, Double, String) Initializes a new instance of the SmartReal class of type Basic with tolerance. Declaration public SmartReal(UnitType inUnitType, double inValue, string inTolerance) Parameters Type Name Description UnitType inUnitType Type of units. System.Double inValue Value in SI units. System.String inTolerance Tolerance. SmartReal(UnitType, String) Initializes a new instance of the SmartReal class of type Formula . Declaration public SmartReal(UnitType inUnitType, string inFormula) Parameters Type Name Description UnitType inUnitType Type of units. System.String inFormula Formula. SmartReal(UnitType, String, String) Initializes a new instance of the SmartReal class of type Formula with tolerance. Declaration public SmartReal(UnitType inUnitType, string inFormula, string inTolerance) Parameters Type Name Description UnitType inUnitType Type of units. System.String inFormula Formula. System.String inTolerance Tolerance. SmartReal(UnitType, String, String, ScriptType) Initializes a new instance of the SmartReal class of type Formula with tolerance and script. Declaration public SmartReal(UnitType inUnitType, string inFormula, string inTolerance, ScriptType inScriptType) Parameters Type Name Description UnitType inUnitType Type of units. System.String inFormula Formula. System.String inTolerance Tolerance. ScriptType inScriptType Type of script. SmartReal(UnitType, String, ScriptType) Initializes a new instance of the SmartReal class of type Formula . Declaration public SmartReal(UnitType inUnitType, string inFormula, ScriptType inScriptType) Parameters Type Name Description UnitType inUnitType Type of units. System.String inFormula Formula. ScriptType inScriptType Type of script. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId Formula Formula, or null if none. Declaration public string Formula Field Value Type Description System.String ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel ScriptType Type of script. Declaration public ScriptType ScriptType Field Value Type Description ScriptType Tolerance Tolerance, or null if none. Declaration public string Tolerance Field Value Type Description System.String Type Type of smart real. Declaration public SmartRealType Type Field Value Type Description SmartRealType UnitSymbol Unit symbol in English, or null if unknown. Declaration public string UnitSymbol Field Value Type Description System.String UnitType Unit type, or None if unknown. Declaration public UnitType UnitType Field Value Type Description UnitType Value Value in SI units, or null if unknown. Declaration public double? Value Field Value Type Description System.Nullable < System.Double >"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartRealType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartRealType.html",
    "title": "Enum SmartRealType | TopSolid Automation website",
    "keywords": "Enum SmartRealType Defines the various types of smart real values. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum SmartRealType Remarks This enum is available since v7.6. Fields Name Description Basic Basic. Element Provided by an element. Formula Formula. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartSection3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartSection3D.html",
    "title": "Class SmartSection3D | TopSolid Automation website",
    "keywords": "Class SmartSection3D Represents a 3D smart section. Inheritance System.Object SmartObject SmartSection3D Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public class SmartSection3D : SmartObject Remarks This class is available since v7.7. Constructors SmartSection3D(ElementId) Initializes a new instance of the SmartSection3D class of type Element . Declaration public SmartSection3D(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartSection3D(ElementId, ItemLabel) Initializes a new instance of the SmartSection3D class of type Item . Declaration public SmartSection3D(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. SmartSection3D(SmartSection3DType, ElementId, ItemLabel) Initializes a new instance of the SmartSection3D class. Declaration public SmartSection3D(SmartSection3DType inType, ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description SmartSection3DType inType Type of smart section. ElementId inElementId Identifier of providing element, or Empty if none. ItemLabel inItemLabel Label of providing element item, or Empty if none. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel Type Type of section. Declaration public SmartSection3DType Type Field Value Type Description SmartSection3DType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartSection3DType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartSection3DType.html",
    "title": "Enum SmartSection3DType | TopSolid Automation website",
    "keywords": "Enum SmartSection3DType Defines the various types of 3D smart sections. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public enum SmartSection3DType Remarks This enum is available since v7.7. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartShape.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartShape.html",
    "title": "Class SmartShape | TopSolid Automation website",
    "keywords": "Class SmartShape Represents a smart shape. Inheritance System.Object SmartObject SmartShape Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 302, 80)] public class SmartShape : SmartObject Remarks This class is available since v7.8.302.80. Constructors SmartShape(ElementId) Initializes a new instance of the SmartShape class of type Element . Declaration public SmartShape(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartShape(SmartShapeType, ElementId) Initializes a new instance of the SmartShape class. Declaration public SmartShape(SmartShapeType inType, ElementId inElementId) Parameters Type Name Description SmartShapeType inType Type of smart shape. ElementId inElementId Identifier of providing element, or Empty if none. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId Type Type of shape. Declaration public SmartShapeType Type Field Value Type Description SmartShapeType"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartShapeType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartShapeType.html",
    "title": "Enum SmartShapeType | TopSolid Automation website",
    "keywords": "Enum SmartShapeType Defines the various types of smart shapes. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 302, 80)] public enum SmartShapeType Remarks This enum is available since v7.8.302.80. Fields Name Description Basic Basic. Element Provided by an element. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartText.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartText.html",
    "title": "Class SmartText | TopSolid Automation website",
    "keywords": "Class SmartText Represents a smart text value. Inheritance System.Object SmartObject SmartText Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public class SmartText : SmartObject Remarks This class is available since v7.8. Constructors SmartText(String) Initializes a new instance of the SmartText class of type Basic . Declaration public SmartText(string inValue) Parameters Type Name Description System.String inValue Value. SmartText(ElementId) Initializes a new instance of the SmartText class of type Element . Declaration public SmartText(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartText(ElementId, ItemLabel) Initializes a new instance of the SmartText class of type Item . Declaration public SmartText(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. SmartText(SmartTextType, String, ElementId, ItemLabel, String) Initializes a new instance of the SmartText class. Declaration public SmartText(SmartTextType inType, string inValue, ElementId inElementId, ItemLabel inItemLabel, string inFormula) Parameters Type Name Description SmartTextType inType Type of smart text. System.String inValue Value, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.String inFormula Formula, or null for none. Examples How to create a text parameter made by concatenating the values of two existing text parameters named \"t1\" and \"t2\": SmartText smartText = new SmartText(SmartTextType.Formula, null, ElementId.Empty, ItemLabel.Empty, \"t1 & t2\"); ElementId eltId = TopSolidHost.Parameters.CreateSmartTextParameter(docId, smartText); SmartText(SmartTextType, String, ElementId, ItemLabel, String, ScriptType) Initializes a new instance of the SmartText class. Declaration public SmartText(SmartTextType inType, string inValue, ElementId inElementId, ItemLabel inItemLabel, string inFormula, ScriptType inScriptType) Parameters Type Name Description SmartTextType inType Type of smart text. System.String inValue Value, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. System.String inFormula Formula, or null for none. ScriptType inScriptType ScripType Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId Formula Formula, or null if none. Declaration public string Formula Field Value Type Description System.String ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel ScriptType Type of script. Declaration public ScriptType ScriptType Field Value Type Description ScriptType Type Type of smart text. Declaration public SmartTextType Type Field Value Type Description SmartTextType Value Value, or null if unknown. Declaration public string Value Field Value Type Description System.String"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartTextType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartTextType.html",
    "title": "Enum SmartTextType | TopSolid Automation website",
    "keywords": "Enum SmartTextType Defines the various types of smart text values. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public enum SmartTextType Remarks This enum is available since v7.8. Fields Name Description Basic Basic. Element Provided by an element. Formula Formula. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartTexture.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartTexture.html",
    "title": "Class SmartTexture | TopSolid Automation website",
    "keywords": "Class SmartTexture Represents a smart texture. Inheritance System.Object SmartObject SmartDocument SmartTexture Inherited Members SmartDocument.Type SmartDocument.Document SmartDocument.ElementId SmartDocument.ReferenceType System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public class SmartTexture : SmartDocument Remarks This class is available since v7.17. Constructors SmartTexture(DocumentId) Initializes a new instance of the SmartTexture class of type Basic Declaration public SmartTexture(DocumentId inDocumentId) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. SmartTexture(DocumentId, DocumentReferenceType) Initializes a new instance of the SmartTexture class of type Basic Declaration public SmartTexture(DocumentId inDocumentId, DocumentReferenceType inReferenceType) Parameters Type Name Description DocumentId inDocumentId Document identifier of the document to reference. DocumentReferenceType inReferenceType Document reference type of the SmartDocument. SmartTexture(ElementId) Initializes a new instance of the SmartTexture class of type Element . Declaration public SmartTexture(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartTexture(ElementId, DocumentReferenceType) Initializes a new instance of the SmartTexture class of type Element . Declaration public SmartTexture(ElementId inElementId, DocumentReferenceType inReferenceType) Parameters Type Name Description ElementId inElementId Identifier of providing element. DocumentReferenceType inReferenceType Document reference type of the SmartDocument."
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartUserEnumeration.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartUserEnumeration.html",
    "title": "Class SmartUserEnumeration | TopSolid Automation website",
    "keywords": "Class SmartUserEnumeration Represents a smart user enumeration value. Inheritance System.Object SmartObject SmartUserEnumeration Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public class SmartUserEnumeration : SmartObject Remarks This class is available since v7.8. Constructors SmartUserEnumeration(DocumentId, Int32) Initializes a new instance of the SmartUserEnumeration class of type Basic . Declaration public SmartUserEnumeration(DocumentId inEnumId, int inValue) Parameters Type Name Description DocumentId inEnumId Enumeration definition document identifier. System.Int32 inValue Value. SmartUserEnumeration(ElementId) Initializes a new instance of the SmartUserEnumeration class of type Element . Declaration public SmartUserEnumeration(ElementId inElementId) Parameters Type Name Description ElementId inElementId Identifier of providing element. SmartUserEnumeration(ElementId, ItemLabel) Initializes a new instance of the SmartUserEnumeration class of type Item . Declaration public SmartUserEnumeration(ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description ElementId inElementId Identifier of providing element. ItemLabel inItemLabel Label of providing element item. SmartUserEnumeration(SmartUserEnumerationType, DocumentId, Nullable<Int32>, ElementId, ItemLabel) Initializes a new instance of the SmartUserEnumeration class. Declaration public SmartUserEnumeration(SmartUserEnumerationType inType, DocumentId inEnumId, int? inValue, ElementId inElementId, ItemLabel inItemLabel) Parameters Type Name Description SmartUserEnumerationType inType Type of smart enumeration. DocumentId inEnumId Enumeration definition document identifier. System.Nullable < System.Int32 > inValue Value, or null if unknown. ElementId inElementId Identifier of providing element, or Empty for none. ItemLabel inItemLabel Label of providing element item, or Empty for none. Fields ElementId Providing element identifier, or empty if none. Declaration public ElementId ElementId Field Value Type Description ElementId EnumId Enumeration definition document identifier. Declaration public DocumentId EnumId Field Value Type Description DocumentId ItemLabel Providing element item label, or empty if none. Declaration public ItemLabel ItemLabel Field Value Type Description ItemLabel Type Type of smart user enumeration. Declaration public SmartUserEnumerationType Type Field Value Type Description SmartUserEnumerationType Value Value, or null if unknown. Declaration public int? Value Field Value Type Description System.Nullable < System.Int32 >"
  },
  "api/kernel/TopSolid.Kernel.Automating.SmartUserEnumerationType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SmartUserEnumerationType.html",
    "title": "Enum SmartUserEnumerationType | TopSolid Automation website",
    "keywords": "Enum SmartUserEnumerationType Defines the various types of smart user enumeration values. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 8, 0, 0)] public enum SmartUserEnumerationType Remarks This enum is available since v7.8. Fields Name Description Basic Basic. Element Provided by an element. Item Provided by an element item. None Not used. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.SurfaceType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.SurfaceType.html",
    "title": "Enum SurfaceType | TopSolid Automation website",
    "keywords": "Enum SurfaceType Defines the various types of surfaces attached to shape faces. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum SurfaceType Remarks This enum is available since v7.6. Fields Name Description BSpline B-spline. Cone Cone. Cylinder Cylinder. Extruded Extruded surface. Faceted Faceted (available since v7.12). Fillet Rolling ball fillet (available since v7.12). None No surface attached. Offset Offset surface. Plane Plane. Revolved Revolved surface. Sphere Sphere. Torus Torus. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.TextProperty.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.TextProperty.html",
    "title": "Class TextProperty | TopSolid Automation website",
    "keywords": "Class TextProperty Represents a text property. Inheritance System.Object Property TextProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 12, 0, 0)] public class TextProperty : Property Remarks This class is available since v7.12. Constructors TextProperty(String) Initializes a new instance of the TextProperty class. Declaration public TextProperty(string inValue) Parameters Type Name Description System.String inValue Value. Fields Value Value. Declaration public string Value Field Value Type Description System.String Properties Type Gets the property type. Declaration public override PropertyType Type { get; } Property Value Type Description PropertyType Overrides Property.Type"
  },
  "api/kernel/TopSolid.Kernel.Automating.TextureCategoryType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.TextureCategoryType.html",
    "title": "Enum TextureCategoryType | TopSolid Automation website",
    "keywords": "Enum TextureCategoryType Defines the various types of texture categories. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 16, 0, 0)] public enum TextureCategoryType Remarks This enum is available since v7.16. Fields Name Description Albedo Albedo. AmbientOcclusion Ambient Occlusion. AnisotropyAngle AnisotropyAngle. ARM ARM. Decal Decal. Displacement Displacement. Gloss Gloss. Iron Iron. Metalness Metalness. None No category. Normal Normal. Opacity Opacity. Redway Redway. Roughness Roughness. ShadowCatcher ShadowCatcher. Specularity Specularity. Substance Substance. Transmission Transmission. TransmissionGlossiness Transmission Glossiness. Unclassified Unclassified type. Wood Wood."
  },
  "api/kernel/TopSolid.Kernel.Automating.TextureImage.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.TextureImage.html",
    "title": "Struct TextureImage | TopSolid Automation website",
    "keywords": "Struct TextureImage Represents a texture image. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 400, 0)] public struct TextureImage Remarks This structure is available since v7.17. Constructors TextureImage(String, String, String, Boolean) Initializes a new instance of the TextureImage structure. Declaration public TextureImage(string inImageFilePath, string inMinorRevisionId, string inSignature, bool inIsGrayscale) Parameters Type Name Description System.String inImageFilePath File path of the image in PNG format. System.String inMinorRevisionId Texture document minor revision identifier. System.String inSignature Signature. System.Boolean inIsGrayscale Is grayscale image. Properties ImageFilePath Gets the image. Declaration public readonly string ImageFilePath { get; } Property Value Type Description System.String IsGrayscale Tells whether the image is in grey colors (grayscale). Declaration public readonly bool IsGrayscale { get; } Property Value Type Description System.Boolean MinorRevisionId Gets the texture document minor revision identifier. Declaration public readonly string MinorRevisionId { get; } Property Value Type Description System.String Signature Gets the image signature. Declaration public readonly string Signature { get; } Property Value Type Description System.String"
  },
  "api/kernel/TopSolid.Kernel.Automating.TextureMappingType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.TextureMappingType.html",
    "title": "Enum TextureMappingType | TopSolid Automation website",
    "keywords": "Enum TextureMappingType Defines the various types of texture mapping. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 16, 0, 0)] public enum TextureMappingType Remarks This enum is available since v7.16. Fields Name Description AutoAxis Auto-Axis. Cylindrical Cylindrical. Edge Edge. Inherited Inherited. None No mapping defined. Parametric Parametric. Planar Planar. Spherical Spherical. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.ToleranceSymbolType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ToleranceSymbolType.html",
    "title": "Enum ToleranceSymbolType | TopSolid Automation website",
    "keywords": "Enum ToleranceSymbolType Defines the various types of tolerance symbol. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public enum ToleranceSymbolType Remarks This enum is available since v7.17.000.000. Fields Name Description Angularity Angularity tolerance. Circularity Circularity tolerance. CircularRunout Circular runout tolerance. Concentricity Concentricity tolerance. Cylindricity Cylindricity tolerance. Flatness Flatness tolerance. LineProfile Line profile tolerance. None No standard symbol. Parallelism Parallelism tolerance. Perpendicularity Perpendicularity tolerance. Position Position tolerance. Straightness Straightness tolerance. SurfaceProfile Surface profile tolerance. Symmetry Symmetry tolerance. TotalRunout Total runout tolerance. Unclassified Unclassified type."
  },
  "api/kernel/TopSolid.Kernel.Automating.ToleranceZoneType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.ToleranceZoneType.html",
    "title": "Enum ToleranceZoneType | TopSolid Automation website",
    "keywords": "Enum ToleranceZoneType Defines the various types of tolerance zone. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 17, 0, 0)] public enum ToleranceZoneType Remarks This enum is available since v7.17.000.000. Fields Name Description Box The tolerance zone is a box. Cylinder The tolerance zone is a cylinder. GraphicCylinder The tolerance zone is a cylinder, with a graphic Ø symbol. GraphicSphere The tolerance zone is a sphere, with a graphic SØ symbol. None Unknown tolerance zone (general case). Sphere The tolerance zone is a sphere."
  },
  "api/kernel/TopSolid.Kernel.Automating.TopSolidHost.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.TopSolidHost.html",
    "title": "Class TopSolidHost | TopSolid Automation website",
    "keywords": "Class TopSolidHost Represents TopSolid host providing WCF services for automating. Inheritance System.Object TopSolidHost Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public static class TopSolidHost Remarks This class is available since v7.6. Fields AngularPrecision Geometric angular precision (in radians): two lines which make an angle of less than this value are considered parallel. Declaration public const double AngularPrecision = 1E-08 Field Value Type Description System.Double LinearPrecision Geometric linear precision (in meters): two points which are less than this distance apart are considered coincident. Declaration public const double LinearPrecision = 1E-08 Field Value Type Description System.Double Properties Application Gets access to the application, or null if not available. Declaration public static IApplication Application { get; } Property Value Type Description IApplication Arguments Gets or sets the arguments to declare to the TopSolid process when the process needs to be started. To set before the call to the Connect() methods. Declaration public static string Arguments { get; set; } Property Value Type Description System.String Classifications Gets access to classifications, or null if not available. Declaration public static IClassifications Classifications { get; } Property Value Type Description IClassifications ClientAddress Gets the client IP address used for receiving events when using TCP, or null for not managing events. Declaration public static string ClientAddress { get; } Property Value Type Description System.String ClientName Gets the client name, or null if anonymous. Declaration public static string ClientName { get; } Property Value Type Description System.String ClientPort Gets the client port used for receiving events when using TCP, or 0 for not managing events. Declaration public static int ClientPort { get; } Property Value Type Description System.Int32 ClientVersion Gets the version of TopSolid used to build this application. Declaration public static int ClientVersion { get; } Property Value Type Description System.Int32 Remarks The value returned is defined by: Major * 100000000 + Minor * 1000000 + Build * 1000 + Revision . For example, v7.5.200.100 is returned as: 705200100 . Documents Gets access to documents, or null if not available. Declaration public static IDocuments Documents { get; } Property Value Type Description IDocuments DocumentsEventsHost Gets access to the documents events service host, or null if not created. Declaration public static ServiceHost DocumentsEventsHost { get; } Property Value Type Description ServiceHost Elements Gets access to elements, or null if not available. Declaration public static IElements Elements { get; } Property Value Type Description IElements Entities Gets access to entities, or null if not available. Declaration public static IEntities Entities { get; } Property Value Type Description IEntities Families Gets access to families, or null if not available. Declaration public static IFamilies Families { get; } Property Value Type Description IFamilies Geometries2D Gets access to 2D geometric entities, or null if not available. Declaration public static IGeometries2D Geometries2D { get; } Property Value Type Description IGeometries2D Geometries3D Gets access to 3D geometric entities, or null if not available. Declaration public static IGeometries3D Geometries3D { get; } Property Value Type Description IGeometries3D HostAddress Gets the host IP address, or null if not using TCP. Declaration public static string HostAddress { get; } Property Value Type Description System.String HostInstance Gets the host instance. Declaration public static TopSolidHostInstance HostInstance { get; } Property Value Type Description TopSolidHostInstance HostPort Gets the host port, or 0 if not using TCP. Declaration public static int HostPort { get; } Property Value Type Description System.Int32 IsConnected Tells whether TopSolid is connected. Declaration public static bool IsConnected { get; } Property Value Type Description System.Boolean Licenses Gets access to licenses, or null if not available. Declaration public static ILicenses Licenses { get; } Property Value Type Description ILicenses Materials Gets access to materials, or null if not available. Declaration public static IMaterials Materials { get; } Property Value Type Description IMaterials Operations Gets access to operations, or null if not available. Declaration public static IOperations Operations { get; } Property Value Type Description IOperations Options Gets access to documents options, or null if not available. Declaration public static IOptions Options { get; } Property Value Type Description IOptions Parameters Gets access to parameter entities, or null if not available. Declaration public static IParameters Parameters { get; } Property Value Type Description IParameters Pdm Gets access to the PDM, or null if not available. Declaration public static IPdm Pdm { get; } Property Value Type Description IPdm PdmAdmin Gets access to the PDM administration, or null if not available. Declaration public static IPdmAdmin PdmAdmin { get; } Property Value Type Description IPdmAdmin PdmSecurity Gets access to the PDM security, or null if not available. Declaration public static IPdmSecurity PdmSecurity { get; } Property Value Type Description IPdmSecurity PdmWorkflow Gets access to the PDM administration, or null if not available. Declaration public static IPdmWorkflow PdmWorkflow { get; } Property Value Type Description IPdmWorkflow PipeName Gets or sets the name used to make named pipe, or null for default. Declaration public static string PipeName { get; set; } Property Value Type Description System.String Remarks This property can be changed before connecting to a TopSolid host on the same machine using named pipes if the default name is not convenient (in particular when several TopSolid processes are running at the same time), it is not needed to change it otherwise. This property cannot be set once connected to TopSolid, i.e. when IsConnected is true . Shapes Gets access to shape entities, or null if not available. Declaration public static IShapes Shapes { get; } Property Value Type Description IShapes Sketches2D Gets access to 2D sketches, or null if not available. Declaration public static ISketches2D Sketches2D { get; } Property Value Type Description ISketches2D Sketches3D Gets access to 3D sketches, or null if not available. Declaration public static ISketches3D Sketches3D { get; } Property Value Type Description ISketches3D Textures Gets access to textures, or null if not available. Declaration public static ITextures Textures { get; } Property Value Type Description ITextures Units Gets access to units, or null if not available. Declaration public static IUnits Units { get; } Property Value Type Description IUnits User Gets access to the user, or null if not available. Declaration public static IUser User { get; } Property Value Type Description IUser Version Gets the version of TopSolid host, or 0 if not connected. Declaration public static int Version { get; } Property Value Type Description System.Int32 Remarks The value returned is defined by: Major * 100000000 + Minor * 1000000 + Build * 1000 + Revision . For example, v7.5.200.100 is returned as: 705200100 . Visualization3D Gets access to 3D visualization, or null if not available. Declaration public static IVisualization3D Visualization3D { get; } Property Value Type Description IVisualization3D Methods Connect() Connects to TopSolid application. Declaration public static bool Connect() Returns Type Description System.Boolean TopSolid has been automatically started. Remarks TopSolid is automatically started if it is not already running. When starting TopSolid automatically, if several versions are installed, the most recent version is started. When starting TopSolid automatically, if both 64-bit and 32-bit versions are installed, the 64-bit version is started. This methods waits up to 10 minutes for TopSolid to be ready before failing to connect. Connect(Boolean, Int32) Connects to TopSolid application. Declaration public static bool Connect(bool inStarts, int inTimeOut) Parameters Type Name Description System.Boolean inStarts Automatically starts TopSolid if it is not already running. System.Int32 inTimeOut Number of seconds to wait for TopSolid to be ready before failing to connect. Returns Type Description System.Boolean TopSolid has been automatically started. Remarks When starting TopSolid automatically, if several versions are installed, the most recent version is started. When starting TopSolid automatically, if both 64-bit and 32-bit versions are installed, the 64-bit version is started. Connect(Boolean, Int32, String) Connects to TopSolid application. Declaration public static bool Connect(bool inStarts, int inTimeOut, string inClientName) Parameters Type Name Description System.Boolean inStarts Automatically starts TopSolid if it is not already running. System.Int32 inTimeOut Number of seconds to wait for TopSolid to be ready before failing to connect. System.String inClientName Name identifying your application, ex: \"MyApplication\". Returns Type Description System.Boolean TopSolid has been automatically started. Remarks When starting TopSolid automatically, if several versions are installed, the most recent version is started. When starting TopSolid automatically, if both 64-bit and 32-bit versions are installed, the 64-bit version is started. The inClientName string must uniquely identify your application, as it is used to make a Windows pipe name that must be unique when managing events. Connect(String) Connects to TopSolid application. Declaration public static bool Connect(string inClientName) Parameters Type Name Description System.String inClientName Name identifying your application, ex: \"MyApplication\". Returns Type Description System.Boolean TopSolid has been automatically started. Remarks TopSolid is automatically started if it is not already running. When starting TopSolid automatically, if several versions are installed, the most recent version is started. When starting TopSolid automatically, if both 64-bit and 32-bit versions are installed, the 64-bit version is started. This methods waits up to 10 minutes for TopSolid to be ready before failing to connect. DefineConnection(String, Int32, String, Int32) Defines the connection between this client application and TopSolid host for remote access. Declaration public static void DefineConnection(string inHostAddress, int inHostPort, string inClientAddress, int inClientPort) Parameters Type Name Description System.String inHostAddress Host IP address (or \"localhost\" for local machine) if using TCP, or null otherwise (default). System.Int32 inHostPort Host port used if using TCP, or 0 otherwise (default). System.String inClientAddress Client IP address (or \"localhost\" for local machine) if using TCP and managing events, or null otherwise (default). System.Int32 inClientPort Client port used if using TCP and managing events, or 0 otherwise (default). Remarks This method must be called before connecting to a remote TopSolid host on another machine to use TCP instead of named pipes, it is not needed to call it otherwise. When performing remote access and using events, inClientAddress and inClientPort must be set to allow TopSolid to connect to this client application, otherwise they must be set to null and 0 . This method cannot be called once connected to TopSolid, i.e. when IsConnected is true . Disconnect() Disconnects from TopSolid application. Declaration public static void Disconnect() HandleDocumentsEvents(Type) Starts documents events handling. Declaration public static void HandleDocumentsEvents(Type inClassType) Parameters Type Name Description System.Type inClassType Type of class implementing IDocumentsEvents interface. Remarks To handle documents events, one needs to make a class implementing IDocumentsEvents interface, and call this method with that type in the inClassType argument. This method creates a new service host, returned afterwards by the DocumentsEventsHost property. This method then subscribes to documents events using the SubscribeToEvents(Int32, String) method. This method may only be called when connected to TopSolid, otherwise an exception is thrown. ParseVersion(String) Parses a string version (i.e. \"7.8.200.0\" to get the corresponding integer version (i.e. 708200000). Declaration public static int ParseVersion(string inVersion) Parameters Type Name Description System.String inVersion String version. Returns Type Description System.Int32 Integer version. Events Exited This event is raised when the host process was running on the local machine and has exited. Declaration public static event EventHandler Exited Event Type Type Description System.EventHandler"
  },
  "api/kernel/TopSolid.Kernel.Automating.TopSolidHostInstance.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.TopSolidHostInstance.html",
    "title": "Class TopSolidHostInstance | TopSolid Automation website",
    "keywords": "Class TopSolidHostInstance Represents a TopSolid host instance providing WCF services for automating. Inheritance System.Object TopSolidHostInstance Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 10, 0, 0)] public class TopSolidHostInstance Remarks When automating several instances of TopSolid at the same time one must make and use several instances of this class (one per TopSolid instance), otherwise if only one instance of TopSolid is to be automated, it is possible to simply use the TopSolidHost static class. This class is available since v7.10. Constructors TopSolidHostInstance() Initializes a new instance of the TopSolidHostInstance class. Declaration public TopSolidHostInstance() Properties Application Gets access to the application, or null if not available. Declaration public IApplication Application { get; } Property Value Type Description IApplication Arguments Gets or sets the arguments to declare to the TopSolid process when the process needs to be started. To set before the call to the Connect() methods. Declaration public string Arguments { get; set; } Property Value Type Description System.String Classifications Gets access to classifications, or null if not available. Declaration public IClassifications Classifications { get; } Property Value Type Description IClassifications ClientAddress Gets the client IP address used for receiving events when using TCP, or null for not managing events. Declaration public string ClientAddress { get; } Property Value Type Description System.String ClientName Gets the client name, or null if anonymous. Declaration public string ClientName { get; } Property Value Type Description System.String ClientPort Gets the client port used for receiving events when using TCP, or 0 for not managing events. Declaration public int ClientPort { get; } Property Value Type Description System.Int32 Documents Gets access to documents, or null if not available. Declaration public IDocuments Documents { get; } Property Value Type Description IDocuments DocumentsEventsHost Gets access to the documents events service host, or null if not created. Declaration public ServiceHost DocumentsEventsHost { get; } Property Value Type Description ServiceHost Elements Gets access to elements, or null if not available. Declaration public IElements Elements { get; } Property Value Type Description IElements Entities Gets access to entities, or null if not available. Declaration public IEntities Entities { get; } Property Value Type Description IEntities Families Gets access to families, or null if not available. Declaration public IFamilies Families { get; } Property Value Type Description IFamilies Geometries2D Gets access to 2D geometric entities, or null if not available. Declaration public IGeometries2D Geometries2D { get; } Property Value Type Description IGeometries2D Geometries3D Gets access to 3D geometric entities, or null if not available. Declaration public IGeometries3D Geometries3D { get; } Property Value Type Description IGeometries3D HostAddress Gets the host IP address, or null if not using TCP. Declaration public string HostAddress { get; } Property Value Type Description System.String HostPort Gets the host port, or 0 if not using TCP. Declaration public int HostPort { get; } Property Value Type Description System.Int32 IsConnected Tells whether TopSolid is connected. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean Licenses Gets access to licenses, or null if not available. Declaration public ILicenses Licenses { get; } Property Value Type Description ILicenses Materials Gets access to materials, or null if not available. Declaration public IMaterials Materials { get; } Property Value Type Description IMaterials Operations Gets access to operations, or null if not available. Declaration public IOperations Operations { get; } Property Value Type Description IOperations Options Gets access to documents options, or null if not available. Declaration public IOptions Options { get; } Property Value Type Description IOptions Parameters Gets access to parameter entities, or null if not available. Declaration public IParameters Parameters { get; } Property Value Type Description IParameters Pdm Gets access to the PDM, or null if not available. Declaration public IPdm Pdm { get; } Property Value Type Description IPdm PdmAdmin Gets access to the PDM administration, or null if not available. Declaration public IPdmAdmin PdmAdmin { get; } Property Value Type Description IPdmAdmin PdmSecurity Gets access to the PDM security, or null if not available. Declaration public IPdmSecurity PdmSecurity { get; } Property Value Type Description IPdmSecurity PdmWorkflow Gets access to the PDM administration, or null if not available. Declaration public IPdmWorkflow PdmWorkflow { get; } Property Value Type Description IPdmWorkflow PipeName Gets or sets the name used to make named pipe, or null for default. Declaration public string PipeName { get; set; } Property Value Type Description System.String Remarks This property can be changed before connecting to a TopSolid host on the same machine using named pipes if the default name is not convenient (in particular when several TopSolid processes are running at the same time), it is not needed to change it otherwise. This property cannot be set once connected to TopSolid, i.e. when IsConnected is true . Shapes Gets access to shape entities, or null if not available. Declaration public IShapes Shapes { get; } Property Value Type Description IShapes Sketches2D Gets access to 2D sketches, or null if not available. Declaration public ISketches2D Sketches2D { get; } Property Value Type Description ISketches2D Sketches3D Gets access to 3D sketches, or null if not available. Declaration public ISketches3D Sketches3D { get; } Property Value Type Description ISketches3D Textures Gets access to textures, or null if not available. Declaration public ITextures Textures { get; } Property Value Type Description ITextures Units Gets access to units, or null if not available. Declaration public IUnits Units { get; } Property Value Type Description IUnits User Gets access to the user, or null if not available. Declaration public IUser User { get; } Property Value Type Description IUser Version Gets the version of TopSolid host, or 0 if not connected. Declaration public int Version { get; } Property Value Type Description System.Int32 Remarks The value returned is defined by: Major * 100000000 + Minor * 1000000 + Build * 1000 + Revision . For example, v7.5.200.100 is returned as: 705200100 . Visualization3D Gets access to 3D visualization, or null if not available. Declaration public IVisualization3D Visualization3D { get; } Property Value Type Description IVisualization3D Methods Connect() Connects to TopSolid application. Declaration public bool Connect() Returns Type Description System.Boolean TopSolid has been automatically started. Remarks TopSolid is automatically started if it is not already running. When starting TopSolid automatically, if several versions are installed, the most recent version is started. When starting TopSolid automatically, if both 64-bit and 32-bit versions are installed, the 64-bit version is started. This methods waits up to 10 minutes for TopSolid to be ready before failing to connect. Connect(Boolean, Int32) Connects to TopSolid application. Declaration public bool Connect(bool inStarts, int inTimeOut) Parameters Type Name Description System.Boolean inStarts Automatically starts TopSolid if it is not already running. System.Int32 inTimeOut Number of seconds to wait for TopSolid to be ready before failing to connect. Returns Type Description System.Boolean TopSolid has been automatically started. Remarks When starting TopSolid automatically, if several versions are installed, the most recent version is started. When starting TopSolid automatically, if both 64-bit and 32-bit versions are installed, the 64-bit version is started. Connect(Boolean, Int32, String) Connects to TopSolid application. Declaration public bool Connect(bool inStarts, int inTimeOut, string inClientName) Parameters Type Name Description System.Boolean inStarts Automatically starts TopSolid if it is not already running. System.Int32 inTimeOut Number of seconds to wait for TopSolid to be ready before failing to connect. System.String inClientName Name identifying your application, ex: \"MyApplication\". Returns Type Description System.Boolean TopSolid has been automatically started. Remarks When starting TopSolid automatically, if several versions are installed, the most recent version is started. When starting TopSolid automatically, if both 64-bit and 32-bit versions are installed, the 64-bit version is started. The inClientName string must uniquely identify your application, as it is used to make a Windows pipe name that must be unique when managing events. Connect(String) Connects to TopSolid application. Declaration public bool Connect(string inClientName) Parameters Type Name Description System.String inClientName Name identifying your application, ex: \"MyApplication\". Returns Type Description System.Boolean TopSolid has been automatically started. Remarks TopSolid is automatically started if it is not already running. When starting TopSolid automatically, if several versions are installed, the most recent version is started. When starting TopSolid automatically, if both 64-bit and 32-bit versions are installed, the 64-bit version is started. This methods waits up to 10 minutes for TopSolid to be ready before failing to connect. DefineConnection(String, Int32, String, Int32) Defines the connection between this client application and TopSolid host for remote access. Declaration public void DefineConnection(string inHostAddress, int inHostPort, string inClientAddress, int inClientPort) Parameters Type Name Description System.String inHostAddress Host IP address (or \"localhost\" for local machine) if using TCP, or null otherwise (default). System.Int32 inHostPort Host port used if using TCP, or 0 otherwise (default). System.String inClientAddress Client IP address (or \"localhost\" for local machine) if using TCP and managing events, or null otherwise (default). System.Int32 inClientPort Client port used if using TCP and managing events, or 0 otherwise (default). Remarks This method must be called before connecting to a remote TopSolid host on another machine to use TCP instead of named pipes, it is not needed to call it otherwise. When performing remote access and using events, inClientAddress and inClientPort must be set to allow TopSolid to connect to this client application, otherwise they must be set to null and 0 . This method cannot be called once connected to TopSolid, i.e. when IsConnected is true . Disconnect() Disconnects from TopSolid application. Declaration public void Disconnect() HandleDocumentsEvents(Type) Starts documents events handling. Declaration public void HandleDocumentsEvents(Type inClassType) Parameters Type Name Description System.Type inClassType Type of class implementing IDocumentsEvents interface. Remarks To handle documents events, one needs to make a class implementing IDocumentsEvents interface, and call this method with that type in the inClassType argument. This method creates a new service host, returned afterwards by the DocumentsEventsHost property. This method then subscribes to documents events using the SubscribeToEvents(Int32, String) method. This method may only be called when connected to TopSolid, otherwise an exception is thrown. MakeClientHost(Type, Type) Makes a TopSolid client WCF host. Declaration public ServiceHost MakeClientHost(Type inClassType, Type inInterfaceType) Parameters Type Name Description System.Type inClassType Class type, implementing the inInterfaceType interface. System.Type inInterfaceType Interface type. Returns Type Description ServiceHost Host. Events Exited This event is raised when the host process was running on the local machine and has exited. Declaration public event EventHandler Exited Event Type Type Description System.EventHandler"
  },
  "api/kernel/TopSolid.Kernel.Automating.Transform2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Transform2D.html",
    "title": "Struct Transform2D | TopSolid Automation website",
    "keywords": "Struct Transform2D Represents a 2D transformation. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Transform2D Remarks The transformation is defined by a 3x3 matrix that operates as multiplier on column vectors containing homogeneous coordinates: [ R00 R01 Tx ] [ R10 R11 Ty ] [ Px Py Si ] That transforms (X, Y, H) into (X', Y', H') as follows: X' = R00 * X + R01 * Y + Tx * H Y' = R10 * X + R11 * Y + Ty * H H' = Px * X + Py * Y + Si * H R is a non singular transformation matrix, that contains the rotation, reflection, non-uniform scaling and shearing components. T is a translation vector. P represents the perspective terms in viewing transformations. It must be zero in transformations used for modeling. Si is the inverse of the global scale factor, it has to be greater than zero. In the case of conventional coordinates, H is equal to one, and the coordinates of the transformed point are (X'/H', Y'/H'). For instance here is the transformation matrix corresponding to the rotation of angle \"a\" around the origin point: [ cos(a) -sin(a) 0 ] [ sin(a) cos(a) 0 ] [ 0 0 1 ] This structure is available since v7.6. Constructors Transform2D(Double, Double, Double, Double, Double, Double, Double, Double, Double) Initializes a new instance of the Transform2D structure. Declaration public Transform2D(double inR00, double inR01, double inTx, double inR10, double inR11, double inTy, double inPx, double inPy, double inSi) Parameters Type Name Description System.Double inR00 System.Double inR01 System.Double inTx System.Double inR10 System.Double inR11 System.Double inTy System.Double inPx System.Double inPy System.Double inSi Fields Identity Indentity transformation. Declaration public static readonly Transform2D Identity Field Value Type Description Transform2D Px Perspective factor along X. Declaration public double Px Field Value Type Description System.Double Py Perspective factor along Y. Declaration public double Py Field Value Type Description System.Double R00 Rotation[0,0]. Declaration public double R00 Field Value Type Description System.Double R01 Rotation[0,1]. Declaration public double R01 Field Value Type Description System.Double R10 Rotation[1,0]. Declaration public double R10 Field Value Type Description System.Double R11 Rotation[1,1]. Declaration public double R11 Field Value Type Description System.Double Si Inverse of the global scale factor. Declaration public double Si Field Value Type Description System.Double Tx Translation along X. Declaration public double Tx Field Value Type Description System.Double Ty Translation along Y. Declaration public double Ty Field Value Type Description System.Double Methods SetRotation(Point3D, Double) Sets the transformation as the rotation about a specified point with a specified angle. Declaration public void SetRotation(Point3D inCenter, double inAngle) Parameters Type Name Description Point3D inCenter Rotation center. System.Double inAngle Rotation angle, in radians. SetTranslation(Vector2D) Sets the transformation as the translation along a specified vector. Declaration public void SetTranslation(Vector2D inVector) Parameters Type Name Description Vector2D inVector Translation vector."
  },
  "api/kernel/TopSolid.Kernel.Automating.Transform3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Transform3D.html",
    "title": "Struct Transform3D | TopSolid Automation website",
    "keywords": "Struct Transform3D Represents a 3D transformation. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Transform3D Remarks The transformation is defined by a 4x4 matrix that operates as multiplier on column vectors containing homogeneous coordinates: [ R00 R01 R02 Tx ] [ R10 R11 R12 Ty ] [ R20 R21 R22 Tz ] [ Px Py Pz Si ] That transforms (X, Y, Z, H) into (X', Y', Z', H') as follows: X' = R00 * X + R01 * Y + R02 * Z + Tx * H Y' = R10 * X + R11 * Y + R12 * Z + Ty * H Z' = R20 * X + R21 * Y + R22 * Z + Tz * H H' = Px * X + Py * Y + Pz * Z + Si * H R is a non singular transformation matrix, that contains the rotation, reflection, non-uniform scaling and shearing components. T is a translation vector. P represents the perspective terms in viewing transformations. It must be zero in transformations used for modeling. Si is the inverse of the global scale factor, it has to be greater than zero. In the case of conventional coordinates, H is equal to one, and the coordinates of the transformed point are (X'/H', Y'/H', Z'/H'). For instance here is the transformation matrix corresponding to the rotation of angle \"a\" around the Z axis: [ cos(a) -sin(a) 0 0 ] [ sin(a) cos(a) 0 0 ] [ 0 0 1 0 ] [ 0 0 0 1 ] This structure is available since v7.6. Constructors Transform3D(Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) Initializes a new instance of the Transform3D structure. Declaration public Transform3D(double inR00, double inR01, double inR02, double inTx, double inR10, double inR11, double inR12, double inTy, double inR20, double inR21, double inR22, double inTz, double inPx, double inPy, double inPz, double inSi) Parameters Type Name Description System.Double inR00 System.Double inR01 System.Double inR02 System.Double inTx System.Double inR10 System.Double inR11 System.Double inR12 System.Double inTy System.Double inR20 System.Double inR21 System.Double inR22 System.Double inTz System.Double inPx System.Double inPy System.Double inPz System.Double inSi Fields Identity Indentity transformation. Declaration public static readonly Transform3D Identity Field Value Type Description Transform3D Px Perspective factor along X. Declaration public double Px Field Value Type Description System.Double Py Perspective factor along Y. Declaration public double Py Field Value Type Description System.Double Pz Perspective factor along Z. Declaration public double Pz Field Value Type Description System.Double R00 Rotation[0,0]. Declaration public double R00 Field Value Type Description System.Double R01 Rotation[0,1]. Declaration public double R01 Field Value Type Description System.Double R02 Rotation[0,2]. Declaration public double R02 Field Value Type Description System.Double R10 Rotation[1,0]. Declaration public double R10 Field Value Type Description System.Double R11 Rotation[1,1]. Declaration public double R11 Field Value Type Description System.Double R12 Rotation[1,2]. Declaration public double R12 Field Value Type Description System.Double R20 Rotation[2,0]. Declaration public double R20 Field Value Type Description System.Double R21 Rotation[2,1]. Declaration public double R21 Field Value Type Description System.Double R22 Rotation[2,2]. Declaration public double R22 Field Value Type Description System.Double Si Inverse of the global scale factor. Declaration public double Si Field Value Type Description System.Double Tx Translation along X. Declaration public double Tx Field Value Type Description System.Double Ty Translation along Y. Declaration public double Ty Field Value Type Description System.Double Tz Translation along Z. Declaration public double Tz Field Value Type Description System.Double Methods SetRotation(Axis3D, Double) Sets the transformation as the rotation about a specified axis with a specified angle. Declaration public void SetRotation(Axis3D inAxis, double inAngle) Parameters Type Name Description Axis3D inAxis Rotation axis. System.Double inAngle Rotation angle, in radians. SetTranslation(Vector3D) Sets the transformation as the translation along a specified vector. Declaration public void SetTranslation(Vector3D inVector) Parameters Type Name Description Vector3D inVector Translation vector."
  },
  "api/kernel/TopSolid.Kernel.Automating.UnitType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.UnitType.html",
    "title": "Enum UnitType | TopSolid Automation website",
    "keywords": "Enum UnitType Defines the various types of units. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public enum UnitType Remarks This enum is available since v7.6. Fields Name Description AbsorbedDose Absorbed dose (available since v7.10). Acceleration Acceleration. AmountOfSubstance Amount of substance (available since v7.10). Angle Plane angle. AngularAcceleration Angular acceleration. AngularDampingCoefficient Angular damping coefficient. AngularFeedRate Angular feed rate. AngularStiffness Angular stiffness of a spring. AngularVelocity Angular velocity. Area Area. AreaInertiaMoment Area moment of inertia (available since v7.8). Curvature Curvature (available since v7.10). DampingCoefficient Damping coefficient. Density Density. DoseEquivalent Dose equivalent (available since v7.10). DynamicViscosity Dynamic viscosity (available since v7.10). ElectricCapacitance Electric capacitance (available since v7.10). ElectricCharge Electric charge (available since v7.10). ElectricConductance Electric conductance (available since v7.10). ElectricCurrentIntensity Electric current intensity (available since v7.10). ElectricFieldStrength Electric field strength (available since v7.10). ElectricInductance Electric inductance (available since v7.10). ElectricPotential Electric potential (available since v7.10). ElectricResistance Electric resistance (available since v7.10). Energy Energy. Factor Dimensionless factor. FactorVelocity Factor velocity. Force Force. ForceMoment Moment of force. Frequency Frequency. HeatFluxDensity Heat flux density (available since v7.10). HeatingValue Heating value (available since v7.10). Illuminance Illuminance (available since v7.10). IndexOfAcidity Index of acidity (available since v7.10). InertiaMoment Moment of inertia. KinematicViscosity Kinematic viscosity (available since v7.10). Length Length. LinearDensity Linear density. LinearForce Linear force (available since v7.10). LuminousFlux Luminous flux (available since v7.9). LuminousIntensity Luminous intensity (available since v7.9). LuminousIntensityDistribution Luminous intensity distribution (available since v7.10). MagneticFlux Magnetic flux (available since v7.10). MagneticFluxDensity Magnetic flux density (available since v7.10). Mass Mass. MassFlowRate Mass flow rate (available since v7.10). MolarConcentration Molar concentration (available since v7.10). None No unit type defined. Power Power. Pressure Pressure or stress. Radioactivity Radioactivity (available since v7.10). SolidAngle Solid angle (available since v7.10). SpecificHeatCapacity Specific heat capacity (available since v7.10). Stiffness Stiffness of a spring. SurfaceDensity Surface density. Temperature Temperature. TemperatureChangeRate Temperature change rate (available since v7.10). TemperatureGradient Temperature gradient (available since v7.10). ThermalAdmittance Thermal admittance (available since v7.10). ThermalConductance Thermal conductance (available since v7.10). ThermalConductivity Thermal conductivity (available since v7.10). ThermalFactor Thermal factor (available since v7.10). ThermalInsulance Thermal insulation (available since v7.10). ThermalResistance Thermal resistance (available since v7.10). ThermalResistivity Thermal resistivity (available since v7.10). Time Time. ToothFeedRate Tooth feed rate. Torque Torque. Velocity Velocity. Volume Volume. VolumeFlowRate Volume flow rate (available since v7.10)."
  },
  "api/kernel/TopSolid.Kernel.Automating.UserAnswerType.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.UserAnswerType.html",
    "title": "Enum UserAnswerType | TopSolid Automation website",
    "keywords": "Enum UserAnswerType Defines the various types of user answers. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public enum UserAnswerType Remarks This enum is available since v7.7. Fields Name Description Cancel Cancel. Ok Ok. Previous Previous."
  },
  "api/kernel/TopSolid.Kernel.Automating.UserEnumerationProperty.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.UserEnumerationProperty.html",
    "title": "Class UserEnumerationProperty | TopSolid Automation website",
    "keywords": "Class UserEnumerationProperty Represents a user enumeration property. Inheritance System.Object Property UserEnumerationProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 12, 0, 0)] public class UserEnumerationProperty : Property Remarks This class is available since v7.12. Constructors UserEnumerationProperty(Int32) Initializes a new instance of the UserEnumerationProperty class. Declaration public UserEnumerationProperty(int inValue) Parameters Type Name Description System.Int32 inValue Value. Fields Value Value. Declaration public int Value Field Value Type Description System.Int32 Properties Type Gets the property type. Declaration public override PropertyType Type { get; } Property Value Type Description PropertyType Overrides Property.Type"
  },
  "api/kernel/TopSolid.Kernel.Automating.UserQuestion.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.UserQuestion.html",
    "title": "Struct UserQuestion | TopSolid Automation website",
    "keywords": "Struct UserQuestion Represents a question asked to the user. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 7, 0, 0)] public struct UserQuestion Remarks This structure is available since v7.7. Constructors UserQuestion(String, String) Initializes a new instance of the UserQuestion structure. Declaration public UserQuestion(string inTitle, string inLabel) Parameters Type Name Description System.String inTitle Title. System.String inLabel Label. UserQuestion(String, String, String) Initializes a new instance of the UserQuestion structure. Declaration public UserQuestion(string inTitle, string inLabel, string inPrompt) Parameters Type Name Description System.String inTitle Title. System.String inLabel Label. System.String inPrompt Prompt. UserQuestion(String, String, String, UserQuestionFlags) Initializes a new instance of the UserQuestion structure. Declaration public UserQuestion(string inTitle, string inLabel, string inPrompt, UserQuestionFlags inFlags) Parameters Type Name Description System.String inTitle Title. System.String inLabel Label. System.String inPrompt Prompt. UserQuestionFlags inFlags Flags. Fields Flags Flags. Declaration public UserQuestionFlags Flags Field Value Type Description UserQuestionFlags Label Label. Declaration public string Label Field Value Type Description System.String Prompt Prompt. Declaration public string Prompt Field Value Type Description System.String Title Title. Declaration public string Title Field Value Type Description System.String Properties AcceptsAuto Tells or sets whether to automatically answer \"Ok\" when a valid input or selection is made (available since v7.11). Declaration public bool AcceptsAuto { get; set; } Property Value Type Description System.Boolean AllowsCreation Tells or sets whether the user can create new entities to answer the question. Declaration public bool AllowsCreation { get; set; } Property Value Type Description System.Boolean AllowsEmpty Tells or sets whether the user can answer \"nothing\". Declaration public bool AllowsEmpty { get; set; } Property Value Type Description System.Boolean AllowsNext Tells or sets whether the user can answer \"Next\". Declaration public bool AllowsNext { get; set; } Property Value Type Description System.Boolean AllowsPrevious Tells or sets whether the user can answer \"Previous\". Declaration public bool AllowsPrevious { get; set; } Property Value Type Description System.Boolean"
  },
  "api/kernel/TopSolid.Kernel.Automating.UserQuestionFlags.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.UserQuestionFlags.html",
    "title": "Enum UserQuestionFlags | TopSolid Automation website",
    "keywords": "Enum UserQuestionFlags Defines the various flags associated to the user question. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [Flags] [AvailableSinceVersion(7, 7, 0, 0)] public enum UserQuestionFlags Remarks This enum is available since v7.7. Fields Name Description AcceptsAuto Automatically answers \"Ok\" when a valid input or selection is made (available since v7.11). AllowsCreation Allows the user to create new entities to answer the question. AllowsEmpty Allows the user to answer \"nothing\". AllowsNext Allows the user to answer \"Next\" instead of \"Ok\". AllowsPrevious Allows the user to answer \"Previous\". None No flag used."
  },
  "api/kernel/TopSolid.Kernel.Automating.Vector2D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Vector2D.html",
    "title": "Struct Vector2D | TopSolid Automation website",
    "keywords": "Struct Vector2D Represents a geometric 2D vector. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Vector2D Remarks This structure is available since v7.6. Constructors Vector2D(Double, Double) Initializes a new instance of the Vector2D structure with its coordinates. Declaration public Vector2D(double inX, double inY) Parameters Type Name Description System.Double inX X component. System.Double inY Y component. Fields V0 Null vector, i.e. (0,0). Declaration public static readonly Vector2D V0 Field Value Type Description Vector2D VX Positive X unit vector, i.e. (1,0). Declaration public static readonly Vector2D VX Field Value Type Description Vector2D VY Positive Y unit vector, i.e. (0,1). Declaration public static readonly Vector2D VY Field Value Type Description Vector2D X X component. Declaration public double X Field Value Type Description System.Double Y Y component. Declaration public double Y Field Value Type Description System.Double Properties Norm Gets the vector's norm. Declaration public readonly double Norm { get; } Property Value Type Description System.Double Vector's norm. Operators Addition(Vector2D, Vector2D) Adds two vectors. Declaration public static Vector2D operator +(Vector2D inVector1, Vector2D inVector2) Parameters Type Name Description Vector2D inVector1 Left hand side vector. Vector2D inVector2 Right hand side vector. Returns Type Description Vector2D Vectors' sum. Division(Vector2D, Double) Divides a vector by a double value. Declaration public static Vector2D operator /(Vector2D inVector, double inD) Parameters Type Name Description Vector2D inVector Left hand side vector. System.Double inD Right hand side double. Returns Type Description Vector2D Scaled vector. ExclusiveOr(Vector2D, Vector2D) Computes the cross product of two vectors. Declaration public static double operator ^(Vector2D inVector1, Vector2D inVector2) Parameters Type Name Description Vector2D inVector1 Left hand side vector. Vector2D inVector2 Right hand side vector. Returns Type Description System.Double Vectors' cross product \"Z\" component. Explicit(Vector2D to Direction2D) Casts a vector into a direction. Declaration public static explicit operator Direction2D(Vector2D inVector) Parameters Type Name Description Vector2D inVector Returns Type Description Direction2D Multiply(Double, Vector2D) Multiplies a double value and a vector. Declaration public static Vector2D operator *(double inD, Vector2D inVector) Parameters Type Name Description System.Double inD Left hand side double. Vector2D inVector Right hand side vector. Returns Type Description Vector2D Scaled vector. Multiply(Vector2D, Double) Multiplies a vector and a double value. Declaration public static Vector2D operator *(Vector2D inVector, double inD) Parameters Type Name Description Vector2D inVector Left hand side vector. System.Double inD Right hand side double. Returns Type Description Vector2D Scaled vector. Multiply(Vector2D, Vector2D) Computes the dot product of two vectors. Declaration public static double operator *(Vector2D inVector1, Vector2D inVector2) Parameters Type Name Description Vector2D inVector1 Left hand side vector. Vector2D inVector2 Right hand side vector. Returns Type Description System.Double Vectors' dot product. Subtraction(Vector2D, Vector2D) Subtracts two vectors. Declaration public static Vector2D operator -(Vector2D inVector1, Vector2D inVector2) Parameters Type Name Description Vector2D inVector1 Left hand side vector. Vector2D inVector2 Right hand side vector. Returns Type Description Vector2D Vectors' subtraction. UnaryNegation(Vector2D) Negates a vector. Declaration public static Vector2D operator -(Vector2D inVector) Parameters Type Name Description Vector2D inVector Vector to negate. Returns Type Description Vector2D Negated vector."
  },
  "api/kernel/TopSolid.Kernel.Automating.Vector3D.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.Vector3D.html",
    "title": "Struct Vector3D | TopSolid Automation website",
    "keywords": "Struct Vector3D Represents a geometric 3D vector. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 6, 0, 0)] public struct Vector3D Remarks This structure is available since v7.6. Constructors Vector3D(Double, Double, Double) Initializes a new instance of the Vector3D structure with its coordinates. Declaration public Vector3D(double inX, double inY, double inZ) Parameters Type Name Description System.Double inX X component. System.Double inY Y component. System.Double inZ Z component. Fields V0 Null vector, i.e. (0,0,0). Declaration public static readonly Vector3D V0 Field Value Type Description Vector3D VX Positive X unit vector, i.e. (1,0,0). Declaration public static readonly Vector3D VX Field Value Type Description Vector3D VY Positive Y unit vector, i.e. (0,1,0). Declaration public static readonly Vector3D VY Field Value Type Description Vector3D VZ Positive Z unit vector, i.e. (0,0,1). Declaration public static readonly Vector3D VZ Field Value Type Description Vector3D X X component. Declaration public double X Field Value Type Description System.Double Y Y component. Declaration public double Y Field Value Type Description System.Double Z Z component. Declaration public double Z Field Value Type Description System.Double Properties Norm Gets the vector's norm. Declaration public readonly double Norm { get; } Property Value Type Description System.Double Vector's norm. Operators Addition(Vector3D, Vector3D) Adds two vectors. Declaration public static Vector3D operator +(Vector3D inVector1, Vector3D inVector2) Parameters Type Name Description Vector3D inVector1 Left hand side vector. Vector3D inVector2 Right hand side vector. Returns Type Description Vector3D Vectors' sum. Division(Vector3D, Double) Divides a vector by a double value. Declaration public static Vector3D operator /(Vector3D inVector, double inD) Parameters Type Name Description Vector3D inVector Left hand side vector. System.Double inD Right hand side double. Returns Type Description Vector3D Scaled vector. ExclusiveOr(Vector3D, Vector3D) Computes the cross product of two vectors. Declaration public static Vector3D operator ^(Vector3D inVector1, Vector3D inVector2) Parameters Type Name Description Vector3D inVector1 Left hand side vector. Vector3D inVector2 Right hand side vector. Returns Type Description Vector3D Vectors' cross product. Explicit(Vector3D to Direction3D) Casts a vector into a direction. Declaration public static explicit operator Direction3D(Vector3D inVector) Parameters Type Name Description Vector3D inVector Returns Type Description Direction3D Multiply(Double, Vector3D) Multiplies a double value and a vector. Declaration public static Vector3D operator *(double inD, Vector3D inVector) Parameters Type Name Description System.Double inD Left hand side double. Vector3D inVector Right hand side vector. Returns Type Description Vector3D Scaled vector. Multiply(Vector3D, Double) Multiplies a vector and a double value. Declaration public static Vector3D operator *(Vector3D inVector, double inD) Parameters Type Name Description Vector3D inVector Left hand side vector. System.Double inD Right hand side double. Returns Type Description Vector3D Scaled vector. Multiply(Vector3D, Vector3D) Computes the dot product of two vectors. Declaration public static double operator *(Vector3D inVector1, Vector3D inVector2) Parameters Type Name Description Vector3D inVector1 Left hand side vector. Vector3D inVector2 Right hand side vector. Returns Type Description System.Double Vectors' dot product. Subtraction(Vector3D, Vector3D) Subtracts two vectors. Declaration public static Vector3D operator -(Vector3D inVector1, Vector3D inVector2) Parameters Type Name Description Vector3D inVector1 Left hand side vector. Vector3D inVector2 Right hand side vector. Returns Type Description Vector3D Vectors' subtraction. UnaryNegation(Vector3D) Negates a vector. Declaration public static Vector3D operator -(Vector3D inVector) Parameters Type Name Description Vector3D inVector Vector to negate. Returns Type Description Vector3D Negated vector."
  },
  "api/kernel/TopSolid.Kernel.Automating.WorkflowActionState.html": {
    "href": "api/kernel/TopSolid.Kernel.Automating.WorkflowActionState.html",
    "title": "Enum WorkflowActionState | TopSolid Automation website",
    "keywords": "Enum WorkflowActionState Defines the various workflow action states. Namespace : TopSolid.Kernel.Automating Assembly : cs.temp.dll.dll Syntax [AvailableSinceVersion(7, 14, 248, 0)] public enum WorkflowActionState Remarks This enum is available since v7.14. Fields Name Description Accepted Accepted. Cancelled Cancelled. None None. Pending Pending. Refused Refused."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "TopSolid Automation in a nutshell | TopSolid Automation website",
    "keywords": "TopSolid Automation in a nutshell Note TopSolid Automation is only available to TopSolid Users owning a legal copy of the software. More information about TopSolid : https://www.topsolid.com/ What is TopSolid Automation? TopSolid Automation is an Application Program Interfacing (A.P.I.) provided by TopSolid through its Software TopSolid . It allows communication with TopSolid, via a programming interfacing called Microsoft Windows Communication Foundation (MWCF) https://learn.microsoft.com/en-us/dotnet/framework/wcf/whats-wcf The application built with TopSolid Automation will be able to replace physical user in order to perform actions into *TopSolid . TopSolid Automation Benefits Building applications with TopSolid Automation can have lots of advantages. Usually TopSolid Automation is used to: Ease TopSolid usage Automate tasks Help with specific needs Extend TopSolid possibilities Share data between software"
  },
  "articles/welcome.html": {
    "href": "articles/welcome.html",
    "title": "Welcome to TopSolid Automation Help Website!! | TopSolid Automation website",
    "keywords": "Welcome to TopSolid Automation Help Website!! TopSolid Automation is an Application Program Interfacing (A.P.I.) provided by TopSolid through its Software TopSolid . You will find on this website API Reference, tutorials, self-learning exercises, tips n tricks and lots more for an unforgettable user experience. Enjoy TopSolid Automation!"
  },
  "index.html": {
    "href": "index.html",
    "title": "TopSolid Automation | TopSolid Automation website",
    "keywords": "TopSolid Automation TopSolid'Automation is TopSolid's API. It allows users to easily control TopSolid. Main parts of the documentation are: General Automation Kernel documentation Automation Cad documentation"
  }
}